(function (factory) {
    typeof define === 'function' && define.amd ? define(factory) :
    factory();
}((function () { 'use strict';

    /**
     * @module ol/util
     */
    /**
     * @return {?} Any return.
     */
    function abstract() {
        return /** @type {?} */ ((function () {
            throw new Error('Unimplemented abstract method.');
        })());
    }
    /**
     * Counter for getUid.
     * @type {number}
     * @private
     */
    var uidCounter_ = 0;
    /**
     * Gets a unique ID for an object. This mutates the object so that further calls
     * with the same object as a parameter returns the same value. Unique IDs are generated
     * as a strictly increasing sequence. Adapted from goog.getUid.
     *
     * @param {Object} obj The object to get the unique ID for.
     * @return {string} The unique ID for the object.
     * @api
     */
    function getUid(obj) {
        return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
    }
    /**
     * OpenLayers version.
     * @type {string}
     */
    var VERSION = '6.4.2';

    var __extends = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Error object thrown when an assertion failed. This is an ECMA-262 Error,
     * extended with a `code` property.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
     */
    var AssertionError = /** @class */ (function (_super) {
        __extends(AssertionError, _super);
        /**
         * @param {number} code Error code.
         */
        function AssertionError(code) {
            var _this = this;
            var path =  'v' + VERSION.split('-')[0];
            var message = 'Assertion failed. See https://openlayers.org/en/' +
                path +
                '/doc/errors/#' +
                code +
                ' for details.';
            _this = _super.call(this, message) || this;
            /**
             * Error code. The meaning of the code can be found on
             * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
             * the version found in the OpenLayers script's header comment if a version
             * other than the latest is used).
             * @type {number}
             * @api
             */
            _this.code = code;
            /**
             * @type {string}
             */
            _this.name = 'AssertionError';
            // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
            _this.message = message;
            return _this;
        }
        return AssertionError;
    }(Error));

    /**
     * @module ol/events/Event
     */
    /**
     * @classdesc
     * Stripped down implementation of the W3C DOM Level 2 Event interface.
     * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
     *
     * This implementation only provides `type` and `target` properties, and
     * `stopPropagation` and `preventDefault` methods. It is meant as base class
     * for higher level events defined in the library, and works with
     * {@link module:ol/events/Target~Target}.
     */
    var BaseEvent = /** @class */ (function () {
        /**
         * @param {string} type Type.
         */
        function BaseEvent(type) {
            /**
             * @type {boolean}
             */
            this.propagationStopped;
            /**
             * The event type.
             * @type {string}
             * @api
             */
            this.type = type;
            /**
             * The event target.
             * @type {Object}
             * @api
             */
            this.target = null;
        }
        /**
         * Stop event propagation.
         * @api
         */
        BaseEvent.prototype.preventDefault = function () {
            this.propagationStopped = true;
        };
        /**
         * Stop event propagation.
         * @api
         */
        BaseEvent.prototype.stopPropagation = function () {
            this.propagationStopped = true;
        };
        return BaseEvent;
    }());

    /**
     * @module ol/ObjectEventType
     */
    /**
     * @enum {string}
     */
    var ObjectEventType = {
        /**
         * Triggered when a property is changed.
         * @event module:ol/Object.ObjectEvent#propertychange
         * @api
         */
        PROPERTYCHANGE: 'propertychange',
    };

    /**
     * @module ol/Disposable
     */
    /**
     * @classdesc
     * Objects that need to clean up after themselves.
     */
    var Disposable = /** @class */ (function () {
        function Disposable() {
            /**
             * The object has already been disposed.
             * @type {boolean}
             * @protected
             */
            this.disposed = false;
        }
        /**
         * Clean up.
         */
        Disposable.prototype.dispose = function () {
            if (!this.disposed) {
                this.disposed = true;
                this.disposeInternal();
            }
        };
        /**
         * Extension point for disposable objects.
         * @protected
         */
        Disposable.prototype.disposeInternal = function () { };
        return Disposable;
    }());

    /**
     * @module ol/array
     */
    /**
     * Compare function for array sort that is safe for numbers.
     * @param {*} a The first object to be compared.
     * @param {*} b The second object to be compared.
     * @return {number} A negative number, zero, or a positive number as the first
     *     argument is less than, equal to, or greater than the second.
     */
    function numberSafeCompareFunction(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
    }
    /**
     * @param {Array<number>} arr Array.
     * @param {number} target Target.
     * @param {number} direction 0 means return the nearest, > 0
     *    means return the largest nearest, < 0 means return the
     *    smallest nearest.
     * @return {number} Index.
     */
    function linearFindNearest(arr, target, direction) {
        var n = arr.length;
        if (arr[0] <= target) {
            return 0;
        }
        else if (target <= arr[n - 1]) {
            return n - 1;
        }
        else {
            var i = void 0;
            if (direction > 0) {
                for (i = 1; i < n; ++i) {
                    if (arr[i] < target) {
                        return i - 1;
                    }
                }
            }
            else if (direction < 0) {
                for (i = 1; i < n; ++i) {
                    if (arr[i] <= target) {
                        return i;
                    }
                }
            }
            else {
                for (i = 1; i < n; ++i) {
                    if (arr[i] == target) {
                        return i;
                    }
                    else if (arr[i] < target) {
                        if (arr[i - 1] - target < target - arr[i]) {
                            return i - 1;
                        }
                        else {
                            return i;
                        }
                    }
                }
            }
            return n - 1;
        }
    }
    /**
     * @param {Array<VALUE>} arr The array to modify.
     * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
     * @template VALUE
     */
    function extend(arr, data) {
        var extension = Array.isArray(data) ? data : [data];
        var length = extension.length;
        for (var i = 0; i < length; i++) {
            arr[arr.length] = extension[i];
        }
    }
    /**
     * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
     * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
     * @return {boolean} Whether the two arrays are equal.
     */
    function equals(arr1, arr2) {
        var len1 = arr1.length;
        if (len1 !== arr2.length) {
            return false;
        }
        for (var i = 0; i < len1; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {Array<*>} arr The array to test.
     * @param {Function=} opt_func Comparison function.
     * @param {boolean=} opt_strict Strictly sorted (default false).
     * @return {boolean} Return index.
     */
    function isSorted(arr, opt_func, opt_strict) {
        var compare = opt_func || numberSafeCompareFunction;
        return arr.every(function (currentVal, index) {
            if (index === 0) {
                return true;
            }
            var res = compare(arr[index - 1], currentVal);
            return !(res > 0 || (opt_strict && res === 0));
        });
    }

    /**
     * @module ol/functions
     */
    /**
     * Always returns true.
     * @returns {boolean} true.
     */
    function TRUE() {
        return true;
    }
    /**
     * Always returns false.
     * @returns {boolean} false.
     */
    function FALSE() {
        return false;
    }
    /**
     * A reusable function, used e.g. as a default for callbacks.
     *
     * @return {void} Nothing.
     */
    function VOID() { }
    /**
     * Wrap a function in another function that remembers the last return.  If the
     * returned function is called twice in a row with the same arguments and the same
     * this object, it will return the value from the first call in the second call.
     *
     * @param {function(...any): ReturnType} fn The function to memoize.
     * @return {function(...any): ReturnType} The memoized function.
     * @template ReturnType
     */
    function memoizeOne(fn) {
        var called = false;
        /** @type {ReturnType} */
        var lastResult;
        /** @type {Array<any>} */
        var lastArgs;
        var lastThis;
        return function () {
            var nextArgs = Array.prototype.slice.call(arguments);
            if (!called || this !== lastThis || !equals(nextArgs, lastArgs)) {
                called = true;
                lastThis = this;
                lastArgs = nextArgs;
                lastResult = fn.apply(this, arguments);
            }
            return lastResult;
        };
    }

    /**
     * @module ol/obj
     */
    /**
     * Polyfill for Object.assign().  Assigns enumerable and own properties from
     * one or more source objects to a target object.
     * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
     *
     * @param {!Object} target The target object.
     * @param {...Object} var_sources The source object(s).
     * @return {!Object} The modified target object.
     */
    var assign = typeof Object.assign === 'function'
        ? Object.assign
        : function (target, var_sources) {
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }
            var output = Object(target);
            for (var i = 1, ii = arguments.length; i < ii; ++i) {
                var source = arguments[i];
                if (source !== undefined && source !== null) {
                    for (var key in source) {
                        if (source.hasOwnProperty(key)) {
                            output[key] = source[key];
                        }
                    }
                }
            }
            return output;
        };
    /**
     * Removes all properties from an object.
     * @param {Object} object The object to clear.
     */
    function clear(object) {
        for (var property in object) {
            delete object[property];
        }
    }
    /**
     * Polyfill for Object.values().  Get an array of property values from an object.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
     *
     * @param {!Object<K,V>} object The object from which to get the values.
     * @return {!Array<V>} The property values.
     * @template K,V
     */
    var getValues = typeof Object.values === 'function'
        ? Object.values
        : function (object) {
            var values = [];
            for (var property in object) {
                values.push(object[property]);
            }
            return values;
        };
    /**
     * Determine if an object has any properties.
     * @param {Object} object The object to check.
     * @return {boolean} The object is empty.
     */
    function isEmpty(object) {
        var property;
        for (property in object) {
            return false;
        }
        return !property;
    }

    var __extends$1 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {EventTarget|Target} EventTargetLike
     */
    /**
     * @classdesc
     * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
     * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
     *
     * There are two important simplifications compared to the specification:
     *
     * 1. The handling of `useCapture` in `addEventListener` and
     *    `removeEventListener`. There is no real capture model.
     * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
     *    There is no event target hierarchy. When a listener calls
     *    `stopPropagation` or `preventDefault` on an event object, it means that no
     *    more listeners after this one will be called. Same as when the listener
     *    returns false.
     */
    var Target = /** @class */ (function (_super) {
        __extends$1(Target, _super);
        /**
         * @param {*=} opt_target Default event target for dispatched events.
         */
        function Target(opt_target) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {*}
             */
            _this.eventTarget_ = opt_target;
            /**
             * @private
             * @type {Object<string, number>}
             */
            _this.pendingRemovals_ = null;
            /**
             * @private
             * @type {Object<string, number>}
             */
            _this.dispatching_ = null;
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").Listener>>}
             */
            _this.listeners_ = null;
            return _this;
        }
        /**
         * @param {string} type Type.
         * @param {import("../events.js").Listener} listener Listener.
         */
        Target.prototype.addEventListener = function (type, listener) {
            if (!type || !listener) {
                return;
            }
            var listeners = this.listeners_ || (this.listeners_ = {});
            var listenersForType = listeners[type] || (listeners[type] = []);
            if (listenersForType.indexOf(listener) === -1) {
                listenersForType.push(listener);
            }
        };
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         *
         * @param {import("./Event.js").default|string} event Event object.
         * @return {boolean|undefined} `false` if anyone called preventDefault on the
         *     event object or if any of the listeners returned false.
         * @api
         */
        Target.prototype.dispatchEvent = function (event) {
            /** @type {import("./Event.js").default|Event} */
            var evt = typeof event === 'string' ? new BaseEvent(event) : event;
            var type = evt.type;
            if (!evt.target) {
                evt.target = this.eventTarget_ || this;
            }
            var listeners = this.listeners_ && this.listeners_[type];
            var propagate;
            if (listeners) {
                var dispatching = this.dispatching_ || (this.dispatching_ = {});
                var pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});
                if (!(type in dispatching)) {
                    dispatching[type] = 0;
                    pendingRemovals[type] = 0;
                }
                ++dispatching[type];
                for (var i = 0, ii = listeners.length; i < ii; ++i) {
                    if ('handleEvent' in listeners[i]) {
                        propagate = /** @type {import("../events.js").ListenerObject} */ (listeners[i]).handleEvent(evt);
                    }
                    else {
                        propagate = /** @type {import("../events.js").ListenerFunction} */ (listeners[i]).call(this, evt);
                    }
                    if (propagate === false || evt.propagationStopped) {
                        propagate = false;
                        break;
                    }
                }
                --dispatching[type];
                if (dispatching[type] === 0) {
                    var pr = pendingRemovals[type];
                    delete pendingRemovals[type];
                    while (pr--) {
                        this.removeEventListener(type, VOID);
                    }
                    delete dispatching[type];
                }
                return propagate;
            }
        };
        /**
         * Clean up.
         */
        Target.prototype.disposeInternal = function () {
            this.listeners_ && clear(this.listeners_);
        };
        /**
         * Get the listeners for a specified event type. Listeners are returned in the
         * order that they will be called in.
         *
         * @param {string} type Type.
         * @return {Array<import("../events.js").Listener>|undefined} Listeners.
         */
        Target.prototype.getListeners = function (type) {
            return (this.listeners_ && this.listeners_[type]) || undefined;
        };
        /**
         * @param {string=} opt_type Type. If not provided,
         *     `true` will be returned if this event target has any listeners.
         * @return {boolean} Has listeners.
         */
        Target.prototype.hasListener = function (opt_type) {
            if (!this.listeners_) {
                return false;
            }
            return opt_type
                ? opt_type in this.listeners_
                : Object.keys(this.listeners_).length > 0;
        };
        /**
         * @param {string} type Type.
         * @param {import("../events.js").Listener} listener Listener.
         */
        Target.prototype.removeEventListener = function (type, listener) {
            var listeners = this.listeners_ && this.listeners_[type];
            if (listeners) {
                var index = listeners.indexOf(listener);
                if (index !== -1) {
                    if (this.pendingRemovals_ && type in this.pendingRemovals_) {
                        // make listener a no-op, and remove later in #dispatchEvent()
                        listeners[index] = VOID;
                        ++this.pendingRemovals_[type];
                    }
                    else {
                        listeners.splice(index, 1);
                        if (listeners.length === 0) {
                            delete this.listeners_[type];
                        }
                    }
                }
            }
        };
        return Target;
    }(Disposable));

    /**
     * @module ol/events/EventType
     */
    /**
     * @enum {string}
     * @const
     */
    var EventType = {
        /**
         * Generic change event. Triggered when the revision counter is increased.
         * @event module:ol/events/Event~BaseEvent#change
         * @api
         */
        CHANGE: 'change',
        /**
         * Generic error event. Triggered when an error occurs.
         * @event module:ol/events/Event~BaseEvent#error
         * @api
         */
        ERROR: 'error',
        BLUR: 'blur',
        CLEAR: 'clear',
        CONTEXTMENU: 'contextmenu',
        CLICK: 'click',
        DBLCLICK: 'dblclick',
        DRAGENTER: 'dragenter',
        DRAGOVER: 'dragover',
        DROP: 'drop',
        FOCUS: 'focus',
        KEYDOWN: 'keydown',
        KEYPRESS: 'keypress',
        LOAD: 'load',
        RESIZE: 'resize',
        TOUCHMOVE: 'touchmove',
        WHEEL: 'wheel',
    };

    /**
     * @module ol/events
     */
    /**
     * Key to use with {@link module:ol/Observable~Observable#unByKey}.
     * @typedef {Object} EventsKey
     * @property {ListenerFunction} listener
     * @property {import("./events/Target.js").EventTargetLike} target
     * @property {string} type
     * @api
     */
    /**
     * Listener function. This function is called with an event object as argument.
     * When the function returns `false`, event propagation will stop.
     *
     * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
     * @api
     */
    /**
     * @typedef {Object} ListenerObject
     * @property {ListenerFunction} handleEvent
     */
    /**
     * @typedef {ListenerFunction|ListenerObject} Listener
     */
    /**
     * Registers an event listener on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * This function efficiently binds a `listener` to a `this` object, and returns
     * a key for use with {@link module:ol/events~unlistenByKey}.
     *
     * @param {import("./events/Target.js").EventTargetLike} target Event target.
     * @param {string} type Event type.
     * @param {ListenerFunction} listener Listener.
     * @param {Object=} opt_this Object referenced by the `this` keyword in the
     *     listener. Default is the `target`.
     * @param {boolean=} opt_once If true, add the listener as one-off listener.
     * @return {EventsKey} Unique key for the listener.
     */
    function listen(target, type, listener, opt_this, opt_once) {
        if (opt_this && opt_this !== target) {
            listener = listener.bind(opt_this);
        }
        if (opt_once) {
            var originalListener_1 = listener;
            listener = function () {
                target.removeEventListener(type, listener);
                originalListener_1.apply(this, arguments);
            };
        }
        var eventsKey = {
            target: target,
            type: type,
            listener: listener,
        };
        target.addEventListener(type, listener);
        return eventsKey;
    }
    /**
     * Registers a one-off event listener on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * This function efficiently binds a `listener` as self-unregistering listener
     * to a `this` object, and returns a key for use with
     * {@link module:ol/events~unlistenByKey} in case the listener needs to be
     * unregistered before it is called.
     *
     * When {@link module:ol/events~listen} is called with the same arguments after this
     * function, the self-unregistering listener will be turned into a permanent
     * listener.
     *
     * @param {import("./events/Target.js").EventTargetLike} target Event target.
     * @param {string} type Event type.
     * @param {ListenerFunction} listener Listener.
     * @param {Object=} opt_this Object referenced by the `this` keyword in the
     *     listener. Default is the `target`.
     * @return {EventsKey} Key for unlistenByKey.
     */
    function listenOnce(target, type, listener, opt_this) {
        return listen(target, type, listener, opt_this, true);
    }
    /**
     * Unregisters event listeners on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * The argument passed to this function is the key returned from
     * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
     *
     * @param {EventsKey} key The key.
     */
    function unlistenByKey(key) {
        if (key && key.target) {
            key.target.removeEventListener(key.type, key.listener);
            clear(key);
        }
    }

    var __extends$2 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * An event target providing convenient methods for listener registration
     * and unregistration. A generic `change` event is always available through
     * {@link module:ol/Observable~Observable#changed}.
     *
     * @fires import("./events/Event.js").default
     * @api
     */
    var Observable = /** @class */ (function (_super) {
        __extends$2(Observable, _super);
        function Observable() {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {number}
             */
            _this.revision_ = 0;
            return _this;
        }
        /**
         * Increases the revision counter and dispatches a 'change' event.
         * @api
         */
        Observable.prototype.changed = function () {
            ++this.revision_;
            this.dispatchEvent(EventType.CHANGE);
        };
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         * @return {number} Revision.
         * @api
         */
        Observable.prototype.getRevision = function () {
            return this.revision_;
        };
        /**
         * Listen for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
         *     called with an array of event types as the first argument, the return
         *     will be an array of keys.
         * @api
         */
        Observable.prototype.on = function (type, listener) {
            if (Array.isArray(type)) {
                var len = type.length;
                var keys = new Array(len);
                for (var i = 0; i < len; ++i) {
                    keys[i] = listen(this, type[i], listener);
                }
                return keys;
            }
            else {
                return listen(this, /** @type {string} */ (type), listener);
            }
        };
        /**
         * Listen once for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
         *     called with an array of event types as the first argument, the return
         *     will be an array of keys.
         * @api
         */
        Observable.prototype.once = function (type, listener) {
            var key;
            if (Array.isArray(type)) {
                var len = type.length;
                key = new Array(len);
                for (var i = 0; i < len; ++i) {
                    key[i] = listenOnce(this, type[i], listener);
                }
            }
            else {
                key = listenOnce(this, /** @type {string} */ (type), listener);
            }
            /** @type {Object} */ (listener).ol_key = key;
            return key;
        };
        /**
         * Unlisten for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @api
         */
        Observable.prototype.un = function (type, listener) {
            var key = /** @type {Object} */ (listener).ol_key;
            if (key) {
                unByKey(key);
            }
            else if (Array.isArray(type)) {
                for (var i = 0, ii = type.length; i < ii; ++i) {
                    this.removeEventListener(type[i], listener);
                }
            }
            else {
                this.removeEventListener(type, listener);
            }
        };
        return Observable;
    }(Target));
    /**
     * Removes an event listener using the key returned by `on()` or `once()`.
     * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
     *     or `once()` (or an array of keys).
     * @api
     */
    function unByKey(key) {
        if (Array.isArray(key)) {
            for (var i = 0, ii = key.length; i < ii; ++i) {
                unlistenByKey(key[i]);
            }
        }
        else {
            unlistenByKey(/** @type {import("./events.js").EventsKey} */ (key));
        }
    }

    var __extends$3 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
     */
    var ObjectEvent = /** @class */ (function (_super) {
        __extends$3(ObjectEvent, _super);
        /**
         * @param {string} type The event type.
         * @param {string} key The property name.
         * @param {*} oldValue The old value for `key`.
         */
        function ObjectEvent(type, key, oldValue) {
            var _this = _super.call(this, type) || this;
            /**
             * The name of the property whose value is changing.
             * @type {string}
             * @api
             */
            _this.key = key;
            /**
             * The old value. To get the new value use `e.target.get(e.key)` where
             * `e` is the event object.
             * @type {*}
             * @api
             */
            _this.oldValue = oldValue;
            return _this;
        }
        return ObjectEvent;
    }(BaseEvent));
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Most non-trivial classes inherit from this.
     *
     * This extends {@link module:ol/Observable} with observable
     * properties, where each property is observable as well as the object as a
     * whole.
     *
     * Classes that inherit from this have pre-defined properties, to which you can
     * add your owns. The pre-defined properties are listed in this documentation as
     * 'Observable Properties', and have their own accessors; for example,
     * {@link module:ol/Map~Map} has a `target` property, accessed with
     * `getTarget()` and changed with `setTarget()`. Not all properties are however
     * settable. There are also general-purpose accessors `get()` and `set()`. For
     * example, `get('target')` is equivalent to `getTarget()`.
     *
     * The `set` accessors trigger a change event, and you can monitor this by
     * registering a listener. For example, {@link module:ol/View~View} has a
     * `center` property, so `view.on('change:center', function(evt) {...});` would
     * call the function whenever the value of the center property changes. Within
     * the function, `evt.target` would be the view, so `evt.target.getCenter()`
     * would return the new center.
     *
     * You can add your own observable properties with
     * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
     * You can listen for changes on that property value with
     * `object.on('change:prop', listener)`. You can get a list of all
     * properties with {@link module:ol/Object~BaseObject#getProperties}.
     *
     * Note that the observable properties are separate from standard JS properties.
     * You can, for example, give your map object a title with
     * `map.title='New title'` and with `map.set('title', 'Another title')`. The
     * first will be a `hasOwnProperty`; the second will appear in
     * `getProperties()`. Only the second is observable.
     *
     * Properties can be deleted by using the unset method. E.g.
     * object.unset('foo').
     *
     * @fires ObjectEvent
     * @api
     */
    var BaseObject = /** @class */ (function (_super) {
        __extends$3(BaseObject, _super);
        /**
         * @param {Object<string, *>=} opt_values An object with key-value pairs.
         */
        function BaseObject(opt_values) {
            var _this = _super.call(this) || this;
            // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
            // the same as the order in which they were created.  This also helps to
            // ensure that object properties are always added in the same order, which
            // helps many JavaScript engines generate faster code.
            getUid(_this);
            /**
             * @private
             * @type {Object<string, *>}
             */
            _this.values_ = null;
            if (opt_values !== undefined) {
                _this.setProperties(opt_values);
            }
            return _this;
        }
        /**
         * Gets a value.
         * @param {string} key Key name.
         * @return {*} Value.
         * @api
         */
        BaseObject.prototype.get = function (key) {
            var value;
            if (this.values_ && this.values_.hasOwnProperty(key)) {
                value = this.values_[key];
            }
            return value;
        };
        /**
         * Get a list of object property names.
         * @return {Array<string>} List of property names.
         * @api
         */
        BaseObject.prototype.getKeys = function () {
            return (this.values_ && Object.keys(this.values_)) || [];
        };
        /**
         * Get an object of all property names and values.
         * @return {Object<string, *>} Object.
         * @api
         */
        BaseObject.prototype.getProperties = function () {
            return (this.values_ && assign({}, this.values_)) || {};
        };
        /**
         * @return {boolean} The object has properties.
         */
        BaseObject.prototype.hasProperties = function () {
            return !!this.values_;
        };
        /**
         * @param {string} key Key name.
         * @param {*} oldValue Old value.
         */
        BaseObject.prototype.notify = function (key, oldValue) {
            var eventType;
            eventType = getChangeEventType(key);
            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
            eventType = ObjectEventType.PROPERTYCHANGE;
            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
        };
        /**
         * Sets a value.
         * @param {string} key Key name.
         * @param {*} value Value.
         * @param {boolean=} opt_silent Update without triggering an event.
         * @api
         */
        BaseObject.prototype.set = function (key, value, opt_silent) {
            var values = this.values_ || (this.values_ = {});
            if (opt_silent) {
                values[key] = value;
            }
            else {
                var oldValue = values[key];
                values[key] = value;
                if (oldValue !== value) {
                    this.notify(key, oldValue);
                }
            }
        };
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param {Object<string, *>} values Values.
         * @param {boolean=} opt_silent Update without triggering an event.
         * @api
         */
        BaseObject.prototype.setProperties = function (values, opt_silent) {
            for (var key in values) {
                this.set(key, values[key], opt_silent);
            }
        };
        /**
         * Unsets a property.
         * @param {string} key Key name.
         * @param {boolean=} opt_silent Unset without triggering an event.
         * @api
         */
        BaseObject.prototype.unset = function (key, opt_silent) {
            if (this.values_ && key in this.values_) {
                var oldValue = this.values_[key];
                delete this.values_[key];
                if (isEmpty(this.values_)) {
                    this.values_ = null;
                }
                if (!opt_silent) {
                    this.notify(key, oldValue);
                }
            }
        };
        return BaseObject;
    }(Observable));
    /**
     * @type {Object<string, string>}
     */
    var changeEventTypeCache = {};
    /**
     * @param {string} key Key name.
     * @return {string} Change name.
     */
    function getChangeEventType(key) {
        return changeEventTypeCache.hasOwnProperty(key)
            ? changeEventTypeCache[key]
            : (changeEventTypeCache[key] = 'change:' + key);
    }

    /**
     * @module ol/CollectionEventType
     */
    /**
     * @enum {string}
     */
    var CollectionEventType = {
        /**
         * Triggered when an item is added to the collection.
         * @event module:ol/Collection.CollectionEvent#add
         * @api
         */
        ADD: 'add',
        /**
         * Triggered when an item is removed from the collection.
         * @event module:ol/Collection.CollectionEvent#remove
         * @api
         */
        REMOVE: 'remove',
    };

    var __extends$4 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @enum {string}
     * @private
     */
    var Property = {
        LENGTH: 'length',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
     * type.
     */
    var CollectionEvent = /** @class */ (function (_super) {
        __extends$4(CollectionEvent, _super);
        /**
         * @param {import("./CollectionEventType.js").default} type Type.
         * @param {*=} opt_element Element.
         * @param {number=} opt_index The index of the added or removed element.
         */
        function CollectionEvent(type, opt_element, opt_index) {
            var _this = _super.call(this, type) || this;
            /**
             * The element that is added to or removed from the collection.
             * @type {*}
             * @api
             */
            _this.element = opt_element;
            /**
             * The index of the added or removed element.
             * @type {number}
             * @api
             */
            _this.index = opt_index;
            return _this;
        }
        return CollectionEvent;
    }(BaseEvent));
    /**
     * @typedef {Object} Options
     * @property {boolean} [unique=false] Disallow the same item from being added to
     * the collection twice.
     */
    /**
     * @classdesc
     * An expanded version of standard JS Array, adding convenience methods for
     * manipulation. Add and remove changes to the Collection trigger a Collection
     * event. Note that this does not cover changes to the objects _within_ the
     * Collection; they trigger events on the appropriate object, not on the
     * Collection as a whole.
     *
     * @fires CollectionEvent
     *
     * @template T
     * @api
     */
    var Collection = /** @class */ (function (_super) {
        __extends$4(Collection, _super);
        /**
         * @param {Array<T>=} opt_array Array.
         * @param {Options=} opt_options Collection options.
         */
        function Collection(opt_array, opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options || {};
            /**
             * @private
             * @type {boolean}
             */
            _this.unique_ = !!options.unique;
            /**
             * @private
             * @type {!Array<T>}
             */
            _this.array_ = opt_array ? opt_array : [];
            if (_this.unique_) {
                for (var i = 0, ii = _this.array_.length; i < ii; ++i) {
                    _this.assertUnique_(_this.array_[i], i);
                }
            }
            _this.updateLength_();
            return _this;
        }
        /**
         * Remove all elements from the collection.
         * @api
         */
        Collection.prototype.clear = function () {
            while (this.getLength() > 0) {
                this.pop();
            }
        };
        /**
         * Add elements to the collection.  This pushes each item in the provided array
         * to the end of the collection.
         * @param {!Array<T>} arr Array.
         * @return {Collection<T>} This collection.
         * @api
         */
        Collection.prototype.extend = function (arr) {
            for (var i = 0, ii = arr.length; i < ii; ++i) {
                this.push(arr[i]);
            }
            return this;
        };
        /**
         * Iterate over each element, calling the provided callback.
         * @param {function(T, number, Array<T>): *} f The function to call
         *     for every element. This function takes 3 arguments (the element, the
         *     index and the array). The return value is ignored.
         * @api
         */
        Collection.prototype.forEach = function (f) {
            var array = this.array_;
            for (var i = 0, ii = array.length; i < ii; ++i) {
                f(array[i], i, array);
            }
        };
        /**
         * Get a reference to the underlying Array object. Warning: if the array
         * is mutated, no events will be dispatched by the collection, and the
         * collection's "length" property won't be in sync with the actual length
         * of the array.
         * @return {!Array<T>} Array.
         * @api
         */
        Collection.prototype.getArray = function () {
            return this.array_;
        };
        /**
         * Get the element at the provided index.
         * @param {number} index Index.
         * @return {T} Element.
         * @api
         */
        Collection.prototype.item = function (index) {
            return this.array_[index];
        };
        /**
         * Get the length of this collection.
         * @return {number} The length of the array.
         * @observable
         * @api
         */
        Collection.prototype.getLength = function () {
            return this.get(Property.LENGTH);
        };
        /**
         * Insert an element at the provided index.
         * @param {number} index Index.
         * @param {T} elem Element.
         * @api
         */
        Collection.prototype.insertAt = function (index, elem) {
            if (this.unique_) {
                this.assertUnique_(elem);
            }
            this.array_.splice(index, 0, elem);
            this.updateLength_();
            this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
        };
        /**
         * Remove the last element of the collection and return it.
         * Return `undefined` if the collection is empty.
         * @return {T|undefined} Element.
         * @api
         */
        Collection.prototype.pop = function () {
            return this.removeAt(this.getLength() - 1);
        };
        /**
         * Insert the provided element at the end of the collection.
         * @param {T} elem Element.
         * @return {number} New length of the collection.
         * @api
         */
        Collection.prototype.push = function (elem) {
            if (this.unique_) {
                this.assertUnique_(elem);
            }
            var n = this.getLength();
            this.insertAt(n, elem);
            return this.getLength();
        };
        /**
         * Remove the first occurrence of an element from the collection.
         * @param {T} elem Element.
         * @return {T|undefined} The removed element or undefined if none found.
         * @api
         */
        Collection.prototype.remove = function (elem) {
            var arr = this.array_;
            for (var i = 0, ii = arr.length; i < ii; ++i) {
                if (arr[i] === elem) {
                    return this.removeAt(i);
                }
            }
            return undefined;
        };
        /**
         * Remove the element at the provided index and return it.
         * Return `undefined` if the collection does not contain this index.
         * @param {number} index Index.
         * @return {T|undefined} Value.
         * @api
         */
        Collection.prototype.removeAt = function (index) {
            var prev = this.array_[index];
            this.array_.splice(index, 1);
            this.updateLength_();
            this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
            return prev;
        };
        /**
         * Set the element at the provided index.
         * @param {number} index Index.
         * @param {T} elem Element.
         * @api
         */
        Collection.prototype.setAt = function (index, elem) {
            var n = this.getLength();
            if (index < n) {
                if (this.unique_) {
                    this.assertUnique_(elem, index);
                }
                var prev = this.array_[index];
                this.array_[index] = elem;
                this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
                this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
            }
            else {
                for (var j = n; j < index; ++j) {
                    this.insertAt(j, undefined);
                }
                this.insertAt(index, elem);
            }
        };
        /**
         * @private
         */
        Collection.prototype.updateLength_ = function () {
            this.set(Property.LENGTH, this.array_.length);
        };
        /**
         * @private
         * @param {T} elem Element.
         * @param {number=} opt_except Optional index to ignore.
         */
        Collection.prototype.assertUnique_ = function (elem, opt_except) {
            for (var i = 0, ii = this.array_.length; i < ii; ++i) {
                if (this.array_[i] === elem && i !== opt_except) {
                    throw new AssertionError(58);
                }
            }
        };
        return Collection;
    }(BaseObject));

    /**
     * @module ol/asserts
     */
    /**
     * @param {*} assertion Assertion we expected to be truthy.
     * @param {number} errorCode Error code.
     */
    function assert(assertion, errorCode) {
        if (!assertion) {
            throw new AssertionError(errorCode);
        }
    }

    /**
     * @module ol/geom/GeometryLayout
     */
    /**
     * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
     * or measure ('M') coordinate is available. Supported values are `'XY'`,
     * `'XYZ'`, `'XYM'`, `'XYZM'`.
     * @enum {string}
     */
    var GeometryLayout = {
        XY: 'XY',
        XYZ: 'XYZ',
        XYM: 'XYM',
        XYZM: 'XYZM',
    };

    /**
     * @module ol/geom/GeometryType
     */
    /**
     * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
     * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
     * `'GeometryCollection'`, `'Circle'`.
     * @enum {string}
     */
    var GeometryType = {
        POINT: 'Point',
        LINE_STRING: 'LineString',
        LINEAR_RING: 'LinearRing',
        POLYGON: 'Polygon',
        MULTI_POINT: 'MultiPoint',
        MULTI_LINE_STRING: 'MultiLineString',
        MULTI_POLYGON: 'MultiPolygon',
        GEOMETRY_COLLECTION: 'GeometryCollection',
        CIRCLE: 'Circle',
    };

    /**
     * @module ol/proj/Units
     */
    /**
     * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
     * `'us-ft'`.
     * @enum {string}
     */
    var Units = {
        DEGREES: 'degrees',
        FEET: 'ft',
        METERS: 'm',
        PIXELS: 'pixels',
        TILE_PIXELS: 'tile-pixels',
        USFEET: 'us-ft',
    };
    /**
     * Meters per unit lookup table.
     * @const
     * @type {Object<Units, number>}
     * @api
     */
    var METERS_PER_UNIT = {};
    // use the radius of the Normal sphere
    METERS_PER_UNIT[Units.DEGREES] = (2 * Math.PI * 6370997) / 360;
    METERS_PER_UNIT[Units.FEET] = 0.3048;
    METERS_PER_UNIT[Units.METERS] = 1;
    METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;

    /**
     * @module ol/transform
     */
    /**
     * An array representing an affine 2d transformation for use with
     * {@link module:ol/transform} functions. The array has 6 elements.
     * @typedef {!Array<number>} Transform
     * @api
     */
    /**
     * Collection of affine 2d transformation functions. The functions work on an
     * array of 6 elements. The element order is compatible with the [SVGMatrix
     * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
     * a subset (elements a to f) of a 3×3 matrix:
     * ```
     * [ a c e ]
     * [ b d f ]
     * [ 0 0 1 ]
     * ```
     */
    /**
     * @private
     * @type {Transform}
     */
    var tmp_ = new Array(6);
    /**
     * Create an identity transform.
     * @return {!Transform} Identity transform.
     */
    function create() {
        return [1, 0, 0, 1, 0, 0];
    }
    /**
     * Transforms the given coordinate with the given transform returning the
     * resulting, transformed coordinate. The coordinate will be modified in-place.
     *
     * @param {Transform} transform The transformation.
     * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
     * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
     *     chained together.
     */
    function apply(transform, coordinate) {
        var x = coordinate[0];
        var y = coordinate[1];
        coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
        coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
        return coordinate;
    }
    /**
     * Creates a composite transform given an initial translation, scale, rotation, and
     * final translation (in that order only, not commutative).
     * @param {!Transform} transform The transform (will be modified in place).
     * @param {number} dx1 Initial translation x.
     * @param {number} dy1 Initial translation y.
     * @param {number} sx Scale factor x.
     * @param {number} sy Scale factor y.
     * @param {number} angle Rotation (in counter-clockwise radians).
     * @param {number} dx2 Final translation x.
     * @param {number} dy2 Final translation y.
     * @return {!Transform} The composite transform.
     */
    function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
        var sin = Math.sin(angle);
        var cos = Math.cos(angle);
        transform[0] = sx * cos;
        transform[1] = sy * sin;
        transform[2] = -sx * sin;
        transform[3] = sy * cos;
        transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
        transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
        return transform;
    }
    /**
     * Invert the given transform.
     * @param {!Transform} target Transform to be set as the inverse of
     *     the source transform.
     * @param {!Transform} source The source transform to invert.
     * @return {!Transform} The inverted (target) transform.
     */
    function makeInverse(target, source) {
        var det = determinant(source);
        assert(det !== 0, 32); // Transformation matrix cannot be inverted
        var a = source[0];
        var b = source[1];
        var c = source[2];
        var d = source[3];
        var e = source[4];
        var f = source[5];
        target[0] = d / det;
        target[1] = -b / det;
        target[2] = -c / det;
        target[3] = a / det;
        target[4] = (c * f - d * e) / det;
        target[5] = -(a * f - b * e) / det;
        return target;
    }
    /**
     * Returns the determinant of the given matrix.
     * @param {!Transform} mat Matrix.
     * @return {number} Determinant.
     */
    function determinant(mat) {
        return mat[0] * mat[3] - mat[1] * mat[2];
    }
    /**
     * A string version of the transform.  This can be used
     * for CSS transforms.
     * @param {!Transform} mat Matrix.
     * @return {string} The transform as a string.
     */
    function toString(mat) {
        return 'matrix(' + mat.join(', ') + ')';
    }

    /**
     * @module ol/extent/Corner
     */
    /**
     * Extent corner.
     * @enum {string}
     */
    var Corner = {
        BOTTOM_LEFT: 'bottom-left',
        BOTTOM_RIGHT: 'bottom-right',
        TOP_LEFT: 'top-left',
        TOP_RIGHT: 'top-right',
    };

    /**
     * @module ol/extent/Relationship
     */
    /**
     * Relationship to an extent.
     * @enum {number}
     */
    var Relationship = {
        UNKNOWN: 0,
        INTERSECTING: 1,
        ABOVE: 2,
        RIGHT: 4,
        BELOW: 8,
        LEFT: 16,
    };

    /**
     * @module ol/extent
     */
    /**
     * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
     * @typedef {Array<number>} Extent
     * @api
     */
    /**
     * Build an extent that includes all given coordinates.
     *
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @return {Extent} Bounding extent.
     * @api
     */
    function boundingExtent(coordinates) {
        var extent = createEmpty();
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
            extendCoordinate(extent, coordinates[i]);
        }
        return extent;
    }
    /**
     * Creates a clone of an extent.
     *
     * @param {Extent} extent Extent to clone.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} The clone.
     */
    function clone(extent, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0];
            opt_extent[1] = extent[1];
            opt_extent[2] = extent[2];
            opt_extent[3] = extent[3];
            return opt_extent;
        }
        else {
            return extent.slice();
        }
    }
    /**
     * @param {Extent} extent Extent.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {number} Closest squared distance.
     */
    function closestSquaredDistanceXY(extent, x, y) {
        var dx, dy;
        if (x < extent[0]) {
            dx = extent[0] - x;
        }
        else if (extent[2] < x) {
            dx = x - extent[2];
        }
        else {
            dx = 0;
        }
        if (y < extent[1]) {
            dy = extent[1] - y;
        }
        else if (extent[3] < y) {
            dy = y - extent[3];
        }
        else {
            dy = 0;
        }
        return dx * dx + dy * dy;
    }
    /**
     * Check if the passed coordinate is contained or on the edge of the extent.
     *
     * @param {Extent} extent Extent.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} The coordinate is contained in the extent.
     * @api
     */
    function containsCoordinate(extent, coordinate) {
        return containsXY(extent, coordinate[0], coordinate[1]);
    }
    /**
     * Check if one extent contains another.
     *
     * An extent is deemed contained if it lies completely within the other extent,
     * including if they share one or more edges.
     *
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {boolean} The second extent is contained by or on the edge of the
     *     first.
     * @api
     */
    function containsExtent(extent1, extent2) {
        return (extent1[0] <= extent2[0] &&
            extent2[2] <= extent1[2] &&
            extent1[1] <= extent2[1] &&
            extent2[3] <= extent1[3]);
    }
    /**
     * Check if the passed coordinate is contained or on the edge of the extent.
     *
     * @param {Extent} extent Extent.
     * @param {number} x X coordinate.
     * @param {number} y Y coordinate.
     * @return {boolean} The x, y values are contained in the extent.
     * @api
     */
    function containsXY(extent, x, y) {
        return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
    }
    /**
     * Get the relationship between a coordinate and extent.
     * @param {Extent} extent The extent.
     * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
     * @return {import("./extent/Relationship.js").default} The relationship (bitwise compare with
     *     import("./extent/Relationship.js").Relationship).
     */
    function coordinateRelationship(extent, coordinate) {
        var minX = extent[0];
        var minY = extent[1];
        var maxX = extent[2];
        var maxY = extent[3];
        var x = coordinate[0];
        var y = coordinate[1];
        var relationship = Relationship.UNKNOWN;
        if (x < minX) {
            relationship = relationship | Relationship.LEFT;
        }
        else if (x > maxX) {
            relationship = relationship | Relationship.RIGHT;
        }
        if (y < minY) {
            relationship = relationship | Relationship.BELOW;
        }
        else if (y > maxY) {
            relationship = relationship | Relationship.ABOVE;
        }
        if (relationship === Relationship.UNKNOWN) {
            relationship = Relationship.INTERSECTING;
        }
        return relationship;
    }
    /**
     * Create an empty extent.
     * @return {Extent} Empty extent.
     * @api
     */
    function createEmpty() {
        return [Infinity, Infinity, -Infinity, -Infinity];
    }
    /**
     * Create a new extent or update the provided extent.
     * @param {number} minX Minimum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxX Maximum X.
     * @param {number} maxY Maximum Y.
     * @param {Extent=} opt_extent Destination extent.
     * @return {Extent} Extent.
     */
    function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = minX;
            opt_extent[1] = minY;
            opt_extent[2] = maxX;
            opt_extent[3] = maxY;
            return opt_extent;
        }
        else {
            return [minX, minY, maxX, maxY];
        }
    }
    /**
     * Create a new empty extent or make the provided one empty.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateEmpty(opt_extent) {
        return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);
    }
    /**
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromCoordinate(coordinate, opt_extent) {
        var x = coordinate[0];
        var y = coordinate[1];
        return createOrUpdate(x, y, x, y, opt_extent);
    }
    /**
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromCoordinates(coordinates, opt_extent) {
        var extent = createOrUpdateEmpty(opt_extent);
        return extendCoordinates(extent, coordinates);
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
        var extent = createOrUpdateEmpty(opt_extent);
        return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
    }
    /**
     * Determine if two extents are equivalent.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {boolean} The two extents are equivalent.
     * @api
     */
    function equals$1(extent1, extent2) {
        return (extent1[0] == extent2[0] &&
            extent1[2] == extent2[2] &&
            extent1[1] == extent2[1] &&
            extent1[3] == extent2[3]);
    }
    /**
     * Modify an extent to include another extent.
     * @param {Extent} extent1 The extent to be modified.
     * @param {Extent} extent2 The extent that will be included in the first.
     * @return {Extent} A reference to the first (extended) extent.
     * @api
     */
    function extend$1(extent1, extent2) {
        if (extent2[0] < extent1[0]) {
            extent1[0] = extent2[0];
        }
        if (extent2[2] > extent1[2]) {
            extent1[2] = extent2[2];
        }
        if (extent2[1] < extent1[1]) {
            extent1[1] = extent2[1];
        }
        if (extent2[3] > extent1[3]) {
            extent1[3] = extent2[3];
        }
        return extent1;
    }
    /**
     * @param {Extent} extent Extent.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     */
    function extendCoordinate(extent, coordinate) {
        if (coordinate[0] < extent[0]) {
            extent[0] = coordinate[0];
        }
        if (coordinate[0] > extent[2]) {
            extent[2] = coordinate[0];
        }
        if (coordinate[1] < extent[1]) {
            extent[1] = coordinate[1];
        }
        if (coordinate[1] > extent[3]) {
            extent[3] = coordinate[1];
        }
    }
    /**
     * @param {Extent} extent Extent.
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @return {Extent} Extent.
     */
    function extendCoordinates(extent, coordinates) {
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
            extendCoordinate(extent, coordinates[i]);
        }
        return extent;
    }
    /**
     * @param {Extent} extent Extent.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {Extent} Extent.
     */
    function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
        for (; offset < end; offset += stride) {
            extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
        }
        return extent;
    }
    /**
     * @param {Extent} extent Extent.
     * @param {number} x X.
     * @param {number} y Y.
     */
    function extendXY(extent, x, y) {
        extent[0] = Math.min(extent[0], x);
        extent[1] = Math.min(extent[1], y);
        extent[2] = Math.max(extent[2], x);
        extent[3] = Math.max(extent[3], y);
    }
    /**
     * This function calls `callback` for each corner of the extent. If the
     * callback returns a truthy value the function returns that value
     * immediately. Otherwise the function returns `false`.
     * @param {Extent} extent Extent.
     * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
     * @return {S|boolean} Value.
     * @template S
     */
    function forEachCorner(extent, callback) {
        var val;
        val = callback(getBottomLeft(extent));
        if (val) {
            return val;
        }
        val = callback(getBottomRight(extent));
        if (val) {
            return val;
        }
        val = callback(getTopRight(extent));
        if (val) {
            return val;
        }
        val = callback(getTopLeft(extent));
        if (val) {
            return val;
        }
        return false;
    }
    /**
     * Get the size of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Area.
     * @api
     */
    function getArea(extent) {
        var area = 0;
        if (!isEmpty$1(extent)) {
            area = getWidth(extent) * getHeight(extent);
        }
        return area;
    }
    /**
     * Get the bottom left coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
     * @api
     */
    function getBottomLeft(extent) {
        return [extent[0], extent[1]];
    }
    /**
     * Get the bottom right coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
     * @api
     */
    function getBottomRight(extent) {
        return [extent[2], extent[1]];
    }
    /**
     * Get the center coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Center.
     * @api
     */
    function getCenter(extent) {
        return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
    }
    /**
     * Get a corner coordinate of an extent.
     * @param {Extent} extent Extent.
     * @param {import("./extent/Corner.js").default} corner Corner.
     * @return {import("./coordinate.js").Coordinate} Corner coordinate.
     */
    function getCorner(extent, corner) {
        var coordinate;
        if (corner === Corner.BOTTOM_LEFT) {
            coordinate = getBottomLeft(extent);
        }
        else if (corner === Corner.BOTTOM_RIGHT) {
            coordinate = getBottomRight(extent);
        }
        else if (corner === Corner.TOP_LEFT) {
            coordinate = getTopLeft(extent);
        }
        else if (corner === Corner.TOP_RIGHT) {
            coordinate = getTopRight(extent);
        }
        else {
            assert(false, 13); // Invalid corner
        }
        return coordinate;
    }
    /**
     * @param {import("./coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("./size.js").Size} size Size.
     * @param {Extent=} opt_extent Destination extent.
     * @return {Extent} Extent.
     */
    function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
        var dx = (resolution * size[0]) / 2;
        var dy = (resolution * size[1]) / 2;
        var cosRotation = Math.cos(rotation);
        var sinRotation = Math.sin(rotation);
        var xCos = dx * cosRotation;
        var xSin = dx * sinRotation;
        var yCos = dy * cosRotation;
        var ySin = dy * sinRotation;
        var x = center[0];
        var y = center[1];
        var x0 = x - xCos + ySin;
        var x1 = x - xCos - ySin;
        var x2 = x + xCos - ySin;
        var x3 = x + xCos + ySin;
        var y0 = y - xSin - yCos;
        var y1 = y - xSin + yCos;
        var y2 = y + xSin + yCos;
        var y3 = y + xSin - yCos;
        return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);
    }
    /**
     * Get the height of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Height.
     * @api
     */
    function getHeight(extent) {
        return extent[3] - extent[1];
    }
    /**
     * Get the intersection of two extents.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @param {Extent=} opt_extent Optional extent to populate with intersection.
     * @return {Extent} Intersecting extent.
     * @api
     */
    function getIntersection(extent1, extent2, opt_extent) {
        var intersection = opt_extent ? opt_extent : createEmpty();
        if (intersects(extent1, extent2)) {
            if (extent1[0] > extent2[0]) {
                intersection[0] = extent1[0];
            }
            else {
                intersection[0] = extent2[0];
            }
            if (extent1[1] > extent2[1]) {
                intersection[1] = extent1[1];
            }
            else {
                intersection[1] = extent2[1];
            }
            if (extent1[2] < extent2[2]) {
                intersection[2] = extent1[2];
            }
            else {
                intersection[2] = extent2[2];
            }
            if (extent1[3] < extent2[3]) {
                intersection[3] = extent1[3];
            }
            else {
                intersection[3] = extent2[3];
            }
        }
        else {
            createOrUpdateEmpty(intersection);
        }
        return intersection;
    }
    /**
     * Get the top left coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Top left coordinate.
     * @api
     */
    function getTopLeft(extent) {
        return [extent[0], extent[3]];
    }
    /**
     * Get the top right coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Top right coordinate.
     * @api
     */
    function getTopRight(extent) {
        return [extent[2], extent[3]];
    }
    /**
     * Get the width of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Width.
     * @api
     */
    function getWidth(extent) {
        return extent[2] - extent[0];
    }
    /**
     * Determine if one extent intersects another.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent.
     * @return {boolean} The two extents intersect.
     * @api
     */
    function intersects(extent1, extent2) {
        return (extent1[0] <= extent2[2] &&
            extent1[2] >= extent2[0] &&
            extent1[1] <= extent2[3] &&
            extent1[3] >= extent2[1]);
    }
    /**
     * Determine if an extent is empty.
     * @param {Extent} extent Extent.
     * @return {boolean} Is empty.
     * @api
     */
    function isEmpty$1(extent) {
        return extent[2] < extent[0] || extent[3] < extent[1];
    }
    /**
     * @param {Extent} extent Extent.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function returnOrUpdate(extent, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0];
            opt_extent[1] = extent[1];
            opt_extent[2] = extent[2];
            opt_extent[3] = extent[3];
            return opt_extent;
        }
        else {
            return extent;
        }
    }
    /**
     * @param {Extent} extent Extent.
     * @param {number} value Value.
     */
    function scaleFromCenter(extent, value) {
        var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
        var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
        extent[0] -= deltaX;
        extent[2] += deltaX;
        extent[1] -= deltaY;
        extent[3] += deltaY;
    }
    /**
     * Determine if the segment between two coordinates intersects (crosses,
     * touches, or is contained by) the provided extent.
     * @param {Extent} extent The extent.
     * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
     * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
     * @return {boolean} The segment intersects the extent.
     */
    function intersectsSegment(extent, start, end) {
        var intersects = false;
        var startRel = coordinateRelationship(extent, start);
        var endRel = coordinateRelationship(extent, end);
        if (startRel === Relationship.INTERSECTING ||
            endRel === Relationship.INTERSECTING) {
            intersects = true;
        }
        else {
            var minX = extent[0];
            var minY = extent[1];
            var maxX = extent[2];
            var maxY = extent[3];
            var startX = start[0];
            var startY = start[1];
            var endX = end[0];
            var endY = end[1];
            var slope = (endY - startY) / (endX - startX);
            var x = void 0, y = void 0;
            if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {
                // potentially intersects top
                x = endX - (endY - maxY) / slope;
                intersects = x >= minX && x <= maxX;
            }
            if (!intersects &&
                !!(endRel & Relationship.RIGHT) &&
                !(startRel & Relationship.RIGHT)) {
                // potentially intersects right
                y = endY - (endX - maxX) * slope;
                intersects = y >= minY && y <= maxY;
            }
            if (!intersects &&
                !!(endRel & Relationship.BELOW) &&
                !(startRel & Relationship.BELOW)) {
                // potentially intersects bottom
                x = endX - (endY - minY) / slope;
                intersects = x >= minX && x <= maxX;
            }
            if (!intersects &&
                !!(endRel & Relationship.LEFT) &&
                !(startRel & Relationship.LEFT)) {
                // potentially intersects left
                y = endY - (endX - minX) * slope;
                intersects = y >= minY && y <= maxY;
            }
        }
        return intersects;
    }

    /**
     * @module ol/proj/Projection
     */
    /**
     * @typedef {Object} Options
     * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
     * @property {import("./Units.js").default|string} [units] Units. Required unless a
     * proj4 projection is defined for `code`.
     * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
     * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
     * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
     * @property {number} [metersPerUnit] The meters per unit for the SRS.
     * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
     * lookup table.
     * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
     * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
     * Function to determine resolution at a point. The function is called with a
     * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
     * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,
     * the default {@link module:ol/proj#getPointResolution} function will be used.
     */
    /**
     * @classdesc
     * Projection definition class. One of these is created for each projection
     * supported in the application and stored in the {@link module:ol/proj} namespace.
     * You can use these in applications, but this is not required, as API params
     * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
     * code will suffice.
     *
     * You can use {@link module:ol/proj~get} to retrieve the object for a particular
     * projection.
     *
     * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
     * with the following aliases:
     * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
     *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
     *     http://www.opengis.net/gml/srs/epsg.xml#4326,
     *     urn:x-ogc:def:crs:EPSG:4326
     * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
     *     urn:ogc:def:crs:EPSG:6.18:3:3857,
     *     http://www.opengis.net/gml/srs/epsg.xml#3857
     *
     * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
     * be added using `proj4.defs()`. After all required projection definitions are
     * added, call the {@link module:ol/proj/proj4~register} function.
     *
     * @api
     */
    var Projection = /** @class */ (function () {
        /**
         * @param {Options} options Projection options.
         */
        function Projection(options) {
            /**
             * @private
             * @type {string}
             */
            this.code_ = options.code;
            /**
             * Units of projected coordinates. When set to `TILE_PIXELS`, a
             * `this.extent_` and `this.worldExtent_` must be configured properly for each
             * tile.
             * @private
             * @type {import("./Units.js").default}
             */
            this.units_ = /** @type {import("./Units.js").default} */ (options.units);
            /**
             * Validity extent of the projection in projected coordinates. For projections
             * with `TILE_PIXELS` units, this is the extent of the tile in
             * tile pixel space.
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.extent_ = options.extent !== undefined ? options.extent : null;
            /**
             * Extent of the world in EPSG:4326. For projections with
             * `TILE_PIXELS` units, this is the extent of the tile in
             * projected coordinate space.
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.worldExtent_ =
                options.worldExtent !== undefined ? options.worldExtent : null;
            /**
             * @private
             * @type {string}
             */
            this.axisOrientation_ =
                options.axisOrientation !== undefined ? options.axisOrientation : 'enu';
            /**
             * @private
             * @type {boolean}
             */
            this.global_ = options.global !== undefined ? options.global : false;
            /**
             * @private
             * @type {boolean}
             */
            this.canWrapX_ = !!(this.global_ && this.extent_);
            /**
             * @private
             * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
             */
            this.getPointResolutionFunc_ = options.getPointResolution;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            this.defaultTileGrid_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.metersPerUnit_ = options.metersPerUnit;
        }
        /**
         * @return {boolean} The projection is suitable for wrapping the x-axis
         */
        Projection.prototype.canWrapX = function () {
            return this.canWrapX_;
        };
        /**
         * Get the code for this projection, e.g. 'EPSG:4326'.
         * @return {string} Code.
         * @api
         */
        Projection.prototype.getCode = function () {
            return this.code_;
        };
        /**
         * Get the validity extent for this projection.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        Projection.prototype.getExtent = function () {
            return this.extent_;
        };
        /**
         * Get the units of this projection.
         * @return {import("./Units.js").default} Units.
         * @api
         */
        Projection.prototype.getUnits = function () {
            return this.units_;
        };
        /**
         * Get the amount of meters per unit of this projection.  If the projection is
         * not configured with `metersPerUnit` or a units identifier, the return is
         * `undefined`.
         * @return {number|undefined} Meters.
         * @api
         */
        Projection.prototype.getMetersPerUnit = function () {
            return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];
        };
        /**
         * Get the world extent for this projection.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        Projection.prototype.getWorldExtent = function () {
            return this.worldExtent_;
        };
        /**
         * Get the axis orientation of this projection.
         * Example values are:
         * enu - the default easting, northing, elevation.
         * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
         *     or south orientated transverse mercator.
         * wnu - westing, northing, up - some planetary coordinate systems have
         *     "west positive" coordinate systems
         * @return {string} Axis orientation.
         * @api
         */
        Projection.prototype.getAxisOrientation = function () {
            return this.axisOrientation_;
        };
        /**
         * Is this projection a global projection which spans the whole world?
         * @return {boolean} Whether the projection is global.
         * @api
         */
        Projection.prototype.isGlobal = function () {
            return this.global_;
        };
        /**
         * Set if the projection is a global projection which spans the whole world
         * @param {boolean} global Whether the projection is global.
         * @api
         */
        Projection.prototype.setGlobal = function (global) {
            this.global_ = global;
            this.canWrapX_ = !!(global && this.extent_);
        };
        /**
         * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
         */
        Projection.prototype.getDefaultTileGrid = function () {
            return this.defaultTileGrid_;
        };
        /**
         * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
         */
        Projection.prototype.setDefaultTileGrid = function (tileGrid) {
            this.defaultTileGrid_ = tileGrid;
        };
        /**
         * Set the validity extent for this projection.
         * @param {import("../extent.js").Extent} extent Extent.
         * @api
         */
        Projection.prototype.setExtent = function (extent) {
            this.extent_ = extent;
            this.canWrapX_ = !!(this.global_ && extent);
        };
        /**
         * Set the world extent for this projection.
         * @param {import("../extent.js").Extent} worldExtent World extent
         *     [minlon, minlat, maxlon, maxlat].
         * @api
         */
        Projection.prototype.setWorldExtent = function (worldExtent) {
            this.worldExtent_ = worldExtent;
        };
        /**
         * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
         * for this projection.
         * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
         * @api
         */
        Projection.prototype.setGetPointResolution = function (func) {
            this.getPointResolutionFunc_ = func;
        };
        /**
         * Get the custom point resolution function for this projection (if set).
         * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
         * resolution function (if set).
         */
        Projection.prototype.getPointResolutionFunc = function () {
            return this.getPointResolutionFunc_;
        };
        return Projection;
    }());

    /**
     * @module ol/math
     */
    /**
     * Takes a number and clamps it to within the provided bounds.
     * @param {number} value The input number.
     * @param {number} min The minimum value to return.
     * @param {number} max The maximum value to return.
     * @return {number} The input number if it is within bounds, or the nearest
     *     number within the bounds.
     */
    function clamp(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
    /**
     * Return the hyperbolic cosine of a given number. The method will use the
     * native `Math.cosh` function if it is available, otherwise the hyperbolic
     * cosine will be calculated via the reference implementation of the Mozilla
     * developer network.
     *
     * @param {number} x X.
     * @return {number} Hyperbolic cosine of x.
     */
    var cosh = (function () {
        // Wrapped in a iife, to save the overhead of checking for the native
        // implementation on every invocation.
        var cosh;
        if ('cosh' in Math) {
            // The environment supports the native Math.cosh function, use it…
            cosh = Math.cosh;
        }
        else {
            // … else, use the reference implementation of MDN:
            cosh = function (x) {
                var y = /** @type {Math} */ (Math).exp(x);
                return (y + 1 / y) / 2;
            };
        }
        return cosh;
    })();
    /**
     * Return the base 2 logarithm of a given number. The method will use the
     * native `Math.log2` function if it is available, otherwise the base 2
     * logarithm will be calculated via the reference implementation of the
     * Mozilla developer network.
     *
     * @param {number} x X.
     * @return {number} Base 2 logarithm of x.
     */
    var log2 = (function () {
        // Wrapped in a iife, to save the overhead of checking for the native
        // implementation on every invocation.
        var log2;
        if ('log2' in Math) {
            // The environment supports the native Math.log2 function, use it…
            log2 = Math.log2;
        }
        else {
            // … else, use the reference implementation of MDN:
            log2 = function (x) {
                return Math.log(x) * Math.LOG2E;
            };
        }
        return log2;
    })();
    /**
     * Returns the square of the closest distance between the point (x, y) and the
     * line segment (x1, y1) to (x2, y2).
     * @param {number} x X.
     * @param {number} y Y.
     * @param {number} x1 X1.
     * @param {number} y1 Y1.
     * @param {number} x2 X2.
     * @param {number} y2 Y2.
     * @return {number} Squared distance.
     */
    function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
        var dx = x2 - x1;
        var dy = y2 - y1;
        if (dx !== 0 || dy !== 0) {
            var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
            if (t > 1) {
                x1 = x2;
                y1 = y2;
            }
            else if (t > 0) {
                x1 += dx * t;
                y1 += dy * t;
            }
        }
        return squaredDistance(x, y, x1, y1);
    }
    /**
     * Returns the square of the distance between the points (x1, y1) and (x2, y2).
     * @param {number} x1 X1.
     * @param {number} y1 Y1.
     * @param {number} x2 X2.
     * @param {number} y2 Y2.
     * @return {number} Squared distance.
     */
    function squaredDistance(x1, y1, x2, y2) {
        var dx = x2 - x1;
        var dy = y2 - y1;
        return dx * dx + dy * dy;
    }
    /**
     * Solves system of linear equations using Gaussian elimination method.
     *
     * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
     *                                     in row-major order.
     * @return {Array<number>} The resulting vector.
     */
    function solveLinearSystem(mat) {
        var n = mat.length;
        for (var i = 0; i < n; i++) {
            // Find max in the i-th column (ignoring i - 1 first rows)
            var maxRow = i;
            var maxEl = Math.abs(mat[i][i]);
            for (var r = i + 1; r < n; r++) {
                var absValue = Math.abs(mat[r][i]);
                if (absValue > maxEl) {
                    maxEl = absValue;
                    maxRow = r;
                }
            }
            if (maxEl === 0) {
                return null; // matrix is singular
            }
            // Swap max row with i-th (current) row
            var tmp = mat[maxRow];
            mat[maxRow] = mat[i];
            mat[i] = tmp;
            // Subtract the i-th row to make all the remaining rows 0 in the i-th column
            for (var j = i + 1; j < n; j++) {
                var coef = -mat[j][i] / mat[i][i];
                for (var k = i; k < n + 1; k++) {
                    if (i == k) {
                        mat[j][k] = 0;
                    }
                    else {
                        mat[j][k] += coef * mat[i][k];
                    }
                }
            }
        }
        // Solve Ax=b for upper triangular matrix A (mat)
        var x = new Array(n);
        for (var l = n - 1; l >= 0; l--) {
            x[l] = mat[l][n] / mat[l][l];
            for (var m = l - 1; m >= 0; m--) {
                mat[m][n] -= mat[m][l] * x[l];
            }
        }
        return x;
    }
    /**
     * Converts degrees to radians.
     *
     * @param {number} angleInDegrees Angle in degrees.
     * @return {number} Angle in radians.
     */
    function toRadians(angleInDegrees) {
        return (angleInDegrees * Math.PI) / 180;
    }
    /**
     * Returns the modulo of a / b, depending on the sign of b.
     *
     * @param {number} a Dividend.
     * @param {number} b Divisor.
     * @return {number} Modulo.
     */
    function modulo(a, b) {
        var r = a % b;
        return r * b < 0 ? r + b : r;
    }
    /**
     * Calculates the linearly interpolated value of x between a and b.
     *
     * @param {number} a Number
     * @param {number} b Number
     * @param {number} x Value to be interpolated.
     * @return {number} Interpolated value.
     */
    function lerp(a, b, x) {
        return a + x * (b - a);
    }

    var __extends$5 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Radius of WGS84 sphere
     *
     * @const
     * @type {number}
     */
    var RADIUS = 6378137;
    /**
     * @const
     * @type {number}
     */
    var HALF_SIZE = Math.PI * RADIUS;
    /**
     * @const
     * @type {import("../extent.js").Extent}
     */
    var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];
    /**
     * @const
     * @type {import("../extent.js").Extent}
     */
    var WORLD_EXTENT = [-180, -85, 180, 85];
    /**
     * @classdesc
     * Projection object for web/spherical Mercator (EPSG:3857).
     */
    var EPSG3857Projection = /** @class */ (function (_super) {
        __extends$5(EPSG3857Projection, _super);
        /**
         * @param {string} code Code.
         */
        function EPSG3857Projection(code) {
            return _super.call(this, {
                code: code,
                units: Units.METERS,
                extent: EXTENT,
                global: true,
                worldExtent: WORLD_EXTENT,
                getPointResolution: function (resolution, point) {
                    return resolution / cosh(point[1] / RADIUS);
                },
            }) || this;
        }
        return EPSG3857Projection;
    }(Projection));
    /**
     * Projections equal to EPSG:3857.
     *
     * @const
     * @type {Array<import("./Projection.js").default>}
     */
    var PROJECTIONS = [
        new EPSG3857Projection('EPSG:3857'),
        new EPSG3857Projection('EPSG:102100'),
        new EPSG3857Projection('EPSG:102113'),
        new EPSG3857Projection('EPSG:900913'),
        new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
        new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
        new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),
    ];
    /**
     * Transformation from EPSG:4326 to EPSG:3857.
     *
     * @param {Array<number>} input Input array of coordinate values.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension (default is `2`).
     * @return {Array<number>} Output array of coordinate values.
     */
    function fromEPSG4326(input, opt_output, opt_dimension) {
        var length = input.length;
        var dimension = opt_dimension > 1 ? opt_dimension : 2;
        var output = opt_output;
        if (output === undefined) {
            if (dimension > 2) {
                // preserve values beyond second dimension
                output = input.slice();
            }
            else {
                output = new Array(length);
            }
        }
        var halfSize = HALF_SIZE;
        for (var i = 0; i < length; i += dimension) {
            output[i] = (halfSize * input[i]) / 180;
            var y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));
            if (y > halfSize) {
                y = halfSize;
            }
            else if (y < -halfSize) {
                y = -halfSize;
            }
            output[i + 1] = y;
        }
        return output;
    }
    /**
     * Transformation from EPSG:3857 to EPSG:4326.
     *
     * @param {Array<number>} input Input array of coordinate values.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension (default is `2`).
     * @return {Array<number>} Output array of coordinate values.
     */
    function toEPSG4326(input, opt_output, opt_dimension) {
        var length = input.length;
        var dimension = opt_dimension > 1 ? opt_dimension : 2;
        var output = opt_output;
        if (output === undefined) {
            if (dimension > 2) {
                // preserve values beyond second dimension
                output = input.slice();
            }
            else {
                output = new Array(length);
            }
        }
        for (var i = 0; i < length; i += dimension) {
            output[i] = (180 * input[i]) / HALF_SIZE;
            output[i + 1] =
                (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;
        }
        return output;
    }

    var __extends$6 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Semi-major radius of the WGS84 ellipsoid.
     *
     * @const
     * @type {number}
     */
    var RADIUS$1 = 6378137;
    /**
     * Extent of the EPSG:4326 projection which is the whole world.
     *
     * @const
     * @type {import("../extent.js").Extent}
     */
    var EXTENT$1 = [-180, -90, 180, 90];
    /**
     * @const
     * @type {number}
     */
    var METERS_PER_UNIT$1 = (Math.PI * RADIUS$1) / 180;
    /**
     * @classdesc
     * Projection object for WGS84 geographic coordinates (EPSG:4326).
     *
     * Note that OpenLayers does not strictly comply with the EPSG definition.
     * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
     * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
     */
    var EPSG4326Projection = /** @class */ (function (_super) {
        __extends$6(EPSG4326Projection, _super);
        /**
         * @param {string} code Code.
         * @param {string=} opt_axisOrientation Axis orientation.
         */
        function EPSG4326Projection(code, opt_axisOrientation) {
            return _super.call(this, {
                code: code,
                units: Units.DEGREES,
                extent: EXTENT$1,
                axisOrientation: opt_axisOrientation,
                global: true,
                metersPerUnit: METERS_PER_UNIT$1,
                worldExtent: EXTENT$1,
            }) || this;
        }
        return EPSG4326Projection;
    }(Projection));
    /**
     * Projections equal to EPSG:4326.
     *
     * @const
     * @type {Array<import("./Projection.js").default>}
     */
    var PROJECTIONS$1 = [
        new EPSG4326Projection('CRS:84'),
        new EPSG4326Projection('EPSG:4326', 'neu'),
        new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
        new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
        new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
        new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
        new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
        new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu'),
    ];

    /**
     * @module ol/proj/projections
     */
    /**
     * @type {Object<string, import("./Projection.js").default>}
     */
    var cache = {};
    /**
     * Get a cached projection by code.
     * @param {string} code The code for the projection.
     * @return {import("./Projection.js").default} The projection (if cached).
     */
    function get(code) {
        return cache[code] || null;
    }
    /**
     * Add a projection to the cache.
     * @param {string} code The projection code.
     * @param {import("./Projection.js").default} projection The projection to cache.
     */
    function add(code, projection) {
        cache[code] = projection;
    }

    /**
     * @module ol/proj/transforms
     */
    /**
     * @private
     * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
     */
    var transforms = {};
    /**
     * Registers a conversion function to convert coordinates from the source
     * projection to the destination projection.
     *
     * @param {import("./Projection.js").default} source Source.
     * @param {import("./Projection.js").default} destination Destination.
     * @param {import("../proj.js").TransformFunction} transformFn Transform.
     */
    function add$1(source, destination, transformFn) {
        var sourceCode = source.getCode();
        var destinationCode = destination.getCode();
        if (!(sourceCode in transforms)) {
            transforms[sourceCode] = {};
        }
        transforms[sourceCode][destinationCode] = transformFn;
    }
    /**
     * Get a transform given a source code and a destination code.
     * @param {string} sourceCode The code for the source projection.
     * @param {string} destinationCode The code for the destination projection.
     * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
     */
    function get$1(sourceCode, destinationCode) {
        var transform;
        if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
            transform = transforms[sourceCode][destinationCode];
        }
        return transform;
    }

    /**
     * @module ol/sphere
     */
    /**
     * Object literal with options for the {@link getLength} or {@link getArea}
     * functions.
     * @typedef {Object} SphereMetricOptions
     * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
     * Projection of the  geometry.  By default, the geometry is assumed to be in
     * Web Mercator.
     * @property {number} [radius=6371008.8] Sphere radius.  By default, the
     * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
     * for the WGS84 ellipsoid is used.
     */
    /**
     * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
     * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
     * @type {number}
     */
    var DEFAULT_RADIUS = 6371008.8;
    /**
     * Get the great circle distance (in meters) between two geographic coordinates.
     * @param {Array} c1 Starting coordinate.
     * @param {Array} c2 Ending coordinate.
     * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
     *     mean radius using the WGS84 ellipsoid.
     * @return {number} The great circle distance between the points (in meters).
     * @api
     */
    function getDistance(c1, c2, opt_radius) {
        var radius = opt_radius || DEFAULT_RADIUS;
        var lat1 = toRadians(c1[1]);
        var lat2 = toRadians(c2[1]);
        var deltaLatBy2 = (lat2 - lat1) / 2;
        var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
        var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
            Math.sin(deltaLonBy2) *
                Math.sin(deltaLonBy2) *
                Math.cos(lat1) *
                Math.cos(lat2);
        return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    }

    /**
     * @module ol/coordinate
     */
    /**
     * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
     * @typedef {Array<number>} Coordinate
     * @api
     */
    /**
     * A function that takes a {@link module:ol/coordinate~Coordinate} and
     * transforms it into a `{string}`.
     *
     * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
     * @api
     */
    /**
     * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
     * by the function.
     *
     * Example:
     *
     *     import {add} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     add(coord, [-2, 4]);
     *     // coord is now [5.85, 51.983333]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {Coordinate} delta Delta.
     * @return {Coordinate} The input coordinate adjusted by
     * the given delta.
     * @api
     */
    function add$2(coordinate, delta) {
        coordinate[0] += +delta[0];
        coordinate[1] += +delta[1];
        return coordinate;
    }
    /**
     * @param {Coordinate} coordinate1 First coordinate.
     * @param {Coordinate} coordinate2 Second coordinate.
     * @return {boolean} The two coordinates are equal.
     */
    function equals$2(coordinate1, coordinate2) {
        var equals = true;
        for (var i = coordinate1.length - 1; i >= 0; --i) {
            if (coordinate1[i] != coordinate2[i]) {
                equals = false;
                break;
            }
        }
        return equals;
    }
    /**
     * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
     * returned by the function.
     *
     * Example:
     *
     *     import {rotate} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var rotateRadians = Math.PI / 2; // 90 degrees
     *     rotate(coord, rotateRadians);
     *     // coord is now [-47.983333, 7.85]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number} angle Angle in radian.
     * @return {Coordinate} Coordinate.
     * @api
     */
    function rotate(coordinate, angle) {
        var cosAngle = Math.cos(angle);
        var sinAngle = Math.sin(angle);
        var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
        var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
        coordinate[0] = x;
        coordinate[1] = y;
        return coordinate;
    }
    /**
     * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
     * by the function.
     *
     * Example:
     *
     *     import {scale as scaleCoordinate} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var scale = 1.2;
     *     scaleCoordinate(coord, scale);
     *     // coord is now [9.42, 57.5799996]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number} scale Scale factor.
     * @return {Coordinate} Coordinate.
     */
    function scale(coordinate, scale) {
        coordinate[0] *= scale;
        coordinate[1] *= scale;
        return coordinate;
    }
    /**
     * Modifies the provided coordinate in-place to be within the real world
     * extent. The lower projection extent boundary is inclusive, the upper one
     * exclusive.
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {Coordinate} The coordinate within the real world extent.
     */
    function wrapX(coordinate, projection) {
        if (projection.canWrapX()) {
            var worldWidth = getWidth(projection.getExtent());
            var worldsAway = getWorldsAway(coordinate, projection, worldWidth);
            if (worldsAway) {
                coordinate[0] -= worldsAway * worldWidth;
            }
        }
        return coordinate;
    }
    /**
     * @param {Coordinate} coordinate Coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @param {number=} opt_sourceExtentWidth Width of the source extent.
     * @return {number} Offset in world widths.
     */
    function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {
        var projectionExtent = projection.getExtent();
        var worldsAway = 0;
        if (projection.canWrapX() &&
            (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {
            var sourceExtentWidth = opt_sourceExtentWidth || getWidth(projectionExtent);
            worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);
        }
        return worldsAway;
    }

    /**
     * @module ol/proj
     */
    /**
     * @param {Array<number>} input Input coordinate array.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension.
     * @return {Array<number>} Output coordinate array (new array, same coordinate
     *     values).
     */
    function cloneTransform(input, opt_output, opt_dimension) {
        var output;
        if (opt_output !== undefined) {
            for (var i = 0, ii = input.length; i < ii; ++i) {
                opt_output[i] = input[i];
            }
            output = opt_output;
        }
        else {
            output = input.slice();
        }
        return output;
    }
    /**
     * @param {Array<number>} input Input coordinate array.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension.
     * @return {Array<number>} Input coordinate array (same array as input).
     */
    function identityTransform(input, opt_output, opt_dimension) {
        if (opt_output !== undefined && input !== opt_output) {
            for (var i = 0, ii = input.length; i < ii; ++i) {
                opt_output[i] = input[i];
            }
            input = opt_output;
        }
        return input;
    }
    /**
     * Add a Projection object to the list of supported projections that can be
     * looked up by their code.
     *
     * @param {Projection} projection Projection instance.
     * @api
     */
    function addProjection(projection) {
        add(projection.getCode(), projection);
        add$1(projection, projection, cloneTransform);
    }
    /**
     * @param {Array<Projection>} projections Projections.
     */
    function addProjections(projections) {
        projections.forEach(addProjection);
    }
    /**
     * Fetches a Projection object for the code specified.
     *
     * @param {ProjectionLike} projectionLike Either a code string which is
     *     a combination of authority and identifier such as "EPSG:4326", or an
     *     existing projection object, or undefined.
     * @return {Projection} Projection object, or null if not in list.
     * @api
     */
    function get$2(projectionLike) {
        return typeof projectionLike === 'string'
            ? get(/** @type {string} */ (projectionLike))
            : /** @type {Projection} */ (projectionLike) || null;
    }
    /**
     * Get the resolution of the point in degrees or distance units.
     * For projections with degrees as the unit this will simply return the
     * provided resolution. For other projections the point resolution is
     * by default estimated by transforming the 'point' pixel to EPSG:4326,
     * measuring its width and height on the normal sphere,
     * and taking the average of the width and height.
     * A custom function can be provided for a specific projection, either
     * by setting the `getPointResolution` option in the
     * {@link module:ol/proj/Projection~Projection} constructor or by using
     * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
     * projection object.
     * @param {ProjectionLike} projection The projection.
     * @param {number} resolution Nominal resolution in projection units.
     * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
     * @param {import("./proj/Units.js").default=} opt_units Units to get the point resolution in.
     * Default is the projection's units.
     * @return {number} Point resolution.
     * @api
     */
    function getPointResolution(projection, resolution, point, opt_units) {
        projection = get$2(projection);
        var pointResolution;
        var getter = projection.getPointResolutionFunc();
        if (getter) {
            pointResolution = getter(resolution, point);
            if (opt_units && opt_units !== projection.getUnits()) {
                var metersPerUnit = projection.getMetersPerUnit();
                if (metersPerUnit) {
                    pointResolution =
                        (pointResolution * metersPerUnit) / METERS_PER_UNIT[opt_units];
                }
            }
        }
        else {
            var units = projection.getUnits();
            if ((units == Units.DEGREES && !opt_units) || opt_units == Units.DEGREES) {
                pointResolution = resolution;
            }
            else {
                // Estimate point resolution by transforming the center pixel to EPSG:4326,
                // measuring its width and height on the normal sphere, and taking the
                // average of the width and height.
                var toEPSG4326_1 = getTransformFromProjections(projection, get$2('EPSG:4326'));
                var vertices = [
                    point[0] - resolution / 2,
                    point[1],
                    point[0] + resolution / 2,
                    point[1],
                    point[0],
                    point[1] - resolution / 2,
                    point[0],
                    point[1] + resolution / 2,
                ];
                vertices = toEPSG4326_1(vertices, vertices, 2);
                var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
                var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
                pointResolution = (width + height) / 2;
                var metersPerUnit = opt_units
                    ? METERS_PER_UNIT[opt_units]
                    : projection.getMetersPerUnit();
                if (metersPerUnit !== undefined) {
                    pointResolution /= metersPerUnit;
                }
            }
        }
        return pointResolution;
    }
    /**
     * Registers transformation functions that don't alter coordinates. Those allow
     * to transform between projections with equal meaning.
     *
     * @param {Array<Projection>} projections Projections.
     * @api
     */
    function addEquivalentProjections(projections) {
        addProjections(projections);
        projections.forEach(function (source) {
            projections.forEach(function (destination) {
                if (source !== destination) {
                    add$1(source, destination, cloneTransform);
                }
            });
        });
    }
    /**
     * Registers transformation functions to convert coordinates in any projection
     * in projection1 to any projection in projection2.
     *
     * @param {Array<Projection>} projections1 Projections with equal
     *     meaning.
     * @param {Array<Projection>} projections2 Projections with equal
     *     meaning.
     * @param {TransformFunction} forwardTransform Transformation from any
     *   projection in projection1 to any projection in projection2.
     * @param {TransformFunction} inverseTransform Transform from any projection
     *   in projection2 to any projection in projection1..
     */
    function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
        projections1.forEach(function (projection1) {
            projections2.forEach(function (projection2) {
                add$1(projection1, projection2, forwardTransform);
                add$1(projection2, projection1, inverseTransform);
            });
        });
    }
    /**
     * @param {Projection|string|undefined} projection Projection.
     * @param {string} defaultCode Default code.
     * @return {Projection} Projection.
     */
    function createProjection(projection, defaultCode) {
        if (!projection) {
            return get$2(defaultCode);
        }
        else if (typeof projection === 'string') {
            return get$2(projection);
        }
        else {
            return /** @type {Projection} */ (projection);
        }
    }
    /**
     * Checks if two projections are the same, that is every coordinate in one
     * projection does represent the same geographic point as the same coordinate in
     * the other projection.
     *
     * @param {Projection} projection1 Projection 1.
     * @param {Projection} projection2 Projection 2.
     * @return {boolean} Equivalent.
     * @api
     */
    function equivalent(projection1, projection2) {
        if (projection1 === projection2) {
            return true;
        }
        var equalUnits = projection1.getUnits() === projection2.getUnits();
        if (projection1.getCode() === projection2.getCode()) {
            return equalUnits;
        }
        else {
            var transformFunc = getTransformFromProjections(projection1, projection2);
            return transformFunc === cloneTransform && equalUnits;
        }
    }
    /**
     * Searches in the list of transform functions for the function for converting
     * coordinates from the source projection to the destination projection.
     *
     * @param {Projection} sourceProjection Source Projection object.
     * @param {Projection} destinationProjection Destination Projection
     *     object.
     * @return {TransformFunction} Transform function.
     */
    function getTransformFromProjections(sourceProjection, destinationProjection) {
        var sourceCode = sourceProjection.getCode();
        var destinationCode = destinationProjection.getCode();
        var transformFunc = get$1(sourceCode, destinationCode);
        if (!transformFunc) {
            transformFunc = identityTransform;
        }
        return transformFunc;
    }
    /**
     * Given the projection-like objects, searches for a transformation
     * function to convert a coordinates array from the source projection to the
     * destination projection.
     *
     * @param {ProjectionLike} source Source.
     * @param {ProjectionLike} destination Destination.
     * @return {TransformFunction} Transform function.
     * @api
     */
    function getTransform(source, destination) {
        var sourceProjection = get$2(source);
        var destinationProjection = get$2(destination);
        return getTransformFromProjections(sourceProjection, destinationProjection);
    }
    /**
     * Transforms a coordinate from source projection to destination projection.
     * This returns a new coordinate (and does not modify the original).
     *
     * See {@link module:ol/proj~transformExtent} for extent transformation.
     * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
     * subclasses for geometry transforms.
     *
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {ProjectionLike} source Source projection-like.
     * @param {ProjectionLike} destination Destination projection-like.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    function transform(coordinate, source, destination) {
        var transformFunc = getTransform(source, destination);
        return transformFunc(coordinate, undefined, coordinate.length);
    }
    /**
     * @type {?Projection}
     */
    var userProjection = null;
    /**
     * Get the projection for coordinates supplied from and returned by API methods.
     * Note that this method is not yet a part of the stable API.  Support for user
     * projections is not yet complete and should be considered experimental.
     * @returns {?Projection} The user projection (or null if not set).
     */
    function getUserProjection() {
        return userProjection;
    }
    /**
     * Return a coordinate transformed into the user projection.  If no user projection
     * is set, the original coordinate is returned.
     * @param {Array<number>} coordinate Input coordinate.
     * @param {ProjectionLike} sourceProjection The input coordinate projection.
     * @returns {Array<number>} The input coordinate in the user projection.
     */
    function toUserCoordinate(coordinate, sourceProjection) {
        {
            return coordinate;
        }
    }
    /**
     * Return a coordinate transformed from the user projection.  If no user projection
     * is set, the original coordinate is returned.
     * @param {Array<number>} coordinate Input coordinate.
     * @param {ProjectionLike} destProjection The destination projection.
     * @returns {Array<number>} The input coordinate transformed.
     */
    function fromUserCoordinate(coordinate, destProjection) {
        {
            return coordinate;
        }
    }
    /**
     * Return an extent transformed into the user projection.  If no user projection
     * is set, the original extent is returned.
     * @param {import("./extent.js").Extent} extent Input extent.
     * @param {ProjectionLike} sourceProjection The input extent projection.
     * @returns {import("./extent.js").Extent} The input extent in the user projection.
     */
    function toUserExtent(extent, sourceProjection) {
        {
            return extent;
        }
    }
    /**
     * Return an extent transformed from the user projection.  If no user projection
     * is set, the original extent is returned.
     * @param {import("./extent.js").Extent} extent Input extent.
     * @param {ProjectionLike} destProjection The destination projection.
     * @returns {import("./extent.js").Extent} The input extent transformed.
     */
    function fromUserExtent(extent, destProjection) {
        {
            return extent;
        }
    }
    /**
     * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
     * by when this module is executed and should only need to be called again after
     * `clearAllProjections()` is called (e.g. in tests).
     */
    function addCommon() {
        // Add transformations that don't alter coordinates to convert within set of
        // projections with equal meaning.
        addEquivalentProjections(PROJECTIONS);
        addEquivalentProjections(PROJECTIONS$1);
        // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
        // coordinates and back.
        addEquivalentTransforms(PROJECTIONS$1, PROJECTIONS, fromEPSG4326, toEPSG4326);
    }
    addCommon();

    /**
     * @module ol/geom/flat/transform
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            var x = flatCoordinates[j];
            var y = flatCoordinates[j + 1];
            dest[i++] = transform[0] * x + transform[2] * y + transform[4];
            dest[i++] = transform[1] * x + transform[3] * y + transform[5];
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} angle Angle.
     * @param {Array<number>} anchor Rotation anchor point.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function rotate$1(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        var anchorX = anchor[0];
        var anchorY = anchor[1];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            var deltaX = flatCoordinates[j] - anchorX;
            var deltaY = flatCoordinates[j + 1] - anchorY;
            dest[i++] = anchorX + deltaX * cos - deltaY * sin;
            dest[i++] = anchorY + deltaX * sin + deltaY * cos;
            for (var k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    /**
     * Scale the coordinates.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} sx Scale factor in the x-direction.
     * @param {number} sy Scale factor in the y-direction.
     * @param {Array<number>} anchor Scale anchor point.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function scale$1(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var anchorX = anchor[0];
        var anchorY = anchor[1];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            var deltaX = flatCoordinates[j] - anchorX;
            var deltaY = flatCoordinates[j + 1] - anchorY;
            dest[i++] = anchorX + sx * deltaX;
            dest[i++] = anchorY + sy * deltaY;
            for (var k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
        var dest = opt_dest ? opt_dest : [];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            dest[i++] = flatCoordinates[j] + deltaX;
            dest[i++] = flatCoordinates[j + 1] + deltaY;
            for (var k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }

    var __extends$7 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @type {import("../transform.js").Transform}
     */
    var tmpTransform = create();
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for vector geometries.
     *
     * To get notified of changes to the geometry, register a listener for the
     * generic `change` event on your geometry instance.
     *
     * @abstract
     * @api
     */
    var Geometry = /** @class */ (function (_super) {
        __extends$7(Geometry, _super);
        function Geometry() {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {import("../extent.js").Extent}
             */
            _this.extent_ = createEmpty();
            /**
             * @private
             * @type {number}
             */
            _this.extentRevision_ = -1;
            /**
             * @protected
             * @type {number}
             */
            _this.simplifiedGeometryMaxMinSquaredTolerance = 0;
            /**
             * @protected
             * @type {number}
             */
            _this.simplifiedGeometryRevision = 0;
            /**
             * Get a transformed and simplified version of the geometry.
             * @abstract
             * @param {number} revision The geometry revision.
             * @param {number} squaredTolerance Squared tolerance.
             * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
             * @return {Geometry} Simplified geometry.
             */
            _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, opt_transform) {
                if (!opt_transform) {
                    return this.getSimplifiedGeometry(squaredTolerance);
                }
                var clone = this.clone();
                clone.applyTransform(opt_transform);
                return clone.getSimplifiedGeometry(squaredTolerance);
            });
            return _this;
        }
        /**
         * Get a transformed and simplified version of the geometry.
         * @abstract
         * @param {number} squaredTolerance Squared tolerance.
         * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
         * @return {Geometry} Simplified geometry.
         */
        Geometry.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {
            return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);
        };
        /**
         * Make a complete copy of the geometry.
         * @abstract
         * @return {!Geometry} Clone.
         */
        Geometry.prototype.clone = function () {
            return abstract();
        };
        /**
         * @abstract
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        Geometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            return abstract();
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        Geometry.prototype.containsXY = function (x, y) {
            var coord = this.getClosestPoint([x, y]);
            return coord[0] === x && coord[1] === y;
        };
        /**
         * Return the closest point of the geometry to the passed point as
         * {@link module:ol/coordinate~Coordinate coordinate}.
         * @param {import("../coordinate.js").Coordinate} point Point.
         * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
         * @return {import("../coordinate.js").Coordinate} Closest point.
         * @api
         */
        Geometry.prototype.getClosestPoint = function (point, opt_closestPoint) {
            var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
            this.closestPointXY(point[0], point[1], closestPoint, Infinity);
            return closestPoint;
        };
        /**
         * Returns true if this geometry includes the specified coordinate. If the
         * coordinate is on the boundary of the geometry, returns false.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {boolean} Contains coordinate.
         * @api
         */
        Geometry.prototype.intersectsCoordinate = function (coordinate) {
            return this.containsXY(coordinate[0], coordinate[1]);
        };
        /**
         * @abstract
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        Geometry.prototype.computeExtent = function (extent) {
            return abstract();
        };
        /**
         * Get the extent of the geometry.
         * @param {import("../extent.js").Extent=} opt_extent Extent.
         * @return {import("../extent.js").Extent} extent Extent.
         * @api
         */
        Geometry.prototype.getExtent = function (opt_extent) {
            if (this.extentRevision_ != this.getRevision()) {
                var extent = this.computeExtent(this.extent_);
                if (isNaN(extent[0]) || isNaN(extent[1])) {
                    createOrUpdateEmpty(extent);
                }
                this.extentRevision_ = this.getRevision();
            }
            return returnOrUpdate(this.extent_, opt_extent);
        };
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @abstract
         * @param {number} angle Rotation angle in radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        Geometry.prototype.rotate = function (angle, anchor) {
            abstract();
        };
        /**
         * Scale the geometry (with an optional origin).  This modifies the geometry
         * coordinates in place.
         * @abstract
         * @param {number} sx The scaling factor in the x-direction.
         * @param {number=} opt_sy The scaling factor in the y-direction (defaults to sx).
         * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
         *     of the geometry extent).
         * @api
         */
        Geometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
            abstract();
        };
        /**
         * Create a simplified version of this geometry.  For linestrings, this uses
         * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
         * algorithm.  For polygons, a quantization-based
         * simplification is used to preserve topology.
         * @param {number} tolerance The tolerance distance for simplification.
         * @return {Geometry} A new, simplified version of the original geometry.
         * @api
         */
        Geometry.prototype.simplify = function (tolerance) {
            return this.getSimplifiedGeometry(tolerance * tolerance);
        };
        /**
         * Create a simplified version of this geometry using the Douglas Peucker
         * algorithm.
         * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
         * @abstract
         * @param {number} squaredTolerance Squared tolerance.
         * @return {Geometry} Simplified geometry.
         */
        Geometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
            return abstract();
        };
        /**
         * Get the type of this geometry.
         * @abstract
         * @return {import("./GeometryType.js").default} Geometry type.
         */
        Geometry.prototype.getType = function () {
            return abstract();
        };
        /**
         * Apply a transform function to the coordinates of the geometry.
         * The geometry is modified in place.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         * @abstract
         * @param {import("../proj.js").TransformFunction} transformFn Transform function.
         * Called with a flat array of geometry coordinates.
         */
        Geometry.prototype.applyTransform = function (transformFn) {
            abstract();
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @abstract
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         */
        Geometry.prototype.intersectsExtent = function (extent) {
            return abstract();
        };
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @abstract
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        Geometry.prototype.translate = function (deltaX, deltaY) {
            abstract();
        };
        /**
         * Transform each coordinate of the geometry from one coordinate reference
         * system to another. The geometry is modified in place.
         * For example, a line will be transformed to a line and a circle to a circle.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         *
         * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
         *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
         * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
         *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
         * @return {Geometry} This geometry.  Note that original geometry is
         *     modified in place.
         * @api
         */
        Geometry.prototype.transform = function (source, destination) {
            /** @type {import("../proj/Projection.js").default} */
            var sourceProj = get$2(source);
            var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS
                ? function (inCoordinates, outCoordinates, stride) {
                    var pixelExtent = sourceProj.getExtent();
                    var projectedExtent = sourceProj.getWorldExtent();
                    var scale = getHeight(projectedExtent) / getHeight(pixelExtent);
                    compose(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
                    transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);
                    return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
                }
                : getTransform(sourceProj, destination);
            this.applyTransform(transformFn);
            return this;
        };
        return Geometry;
    }(BaseObject));

    var __extends$8 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Abstract base class; only used for creating subclasses; do not instantiate
     * in apps, as cannot be rendered.
     *
     * @abstract
     * @api
     */
    var SimpleGeometry = /** @class */ (function (_super) {
        __extends$8(SimpleGeometry, _super);
        function SimpleGeometry() {
            var _this = _super.call(this) || this;
            /**
             * @protected
             * @type {import("./GeometryLayout.js").default}
             */
            _this.layout = GeometryLayout.XY;
            /**
             * @protected
             * @type {number}
             */
            _this.stride = 2;
            /**
             * @protected
             * @type {Array<number>}
             */
            _this.flatCoordinates = null;
            return _this;
        }
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        SimpleGeometry.prototype.computeExtent = function (extent) {
            return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
        };
        /**
         * @abstract
         * @return {Array<*>} Coordinates.
         */
        SimpleGeometry.prototype.getCoordinates = function () {
            return abstract();
        };
        /**
         * Return the first coordinate of the geometry.
         * @return {import("../coordinate.js").Coordinate} First coordinate.
         * @api
         */
        SimpleGeometry.prototype.getFirstCoordinate = function () {
            return this.flatCoordinates.slice(0, this.stride);
        };
        /**
         * @return {Array<number>} Flat coordinates.
         */
        SimpleGeometry.prototype.getFlatCoordinates = function () {
            return this.flatCoordinates;
        };
        /**
         * Return the last coordinate of the geometry.
         * @return {import("../coordinate.js").Coordinate} Last point.
         * @api
         */
        SimpleGeometry.prototype.getLastCoordinate = function () {
            return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
        };
        /**
         * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
         * @return {import("./GeometryLayout.js").default} Layout.
         * @api
         */
        SimpleGeometry.prototype.getLayout = function () {
            return this.layout;
        };
        /**
         * Create a simplified version of this geometry using the Douglas Peucker algorithm.
         * @param {number} squaredTolerance Squared tolerance.
         * @return {SimpleGeometry} Simplified geometry.
         */
        SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
            if (this.simplifiedGeometryRevision !== this.getRevision()) {
                this.simplifiedGeometryMaxMinSquaredTolerance = 0;
                this.simplifiedGeometryRevision = this.getRevision();
            }
            // If squaredTolerance is negative or if we know that simplification will not
            // have any effect then just return this.
            if (squaredTolerance < 0 ||
                (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
                    squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
                return this;
            }
            var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
            var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
            if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
                return simplifiedGeometry;
            }
            else {
                // Simplification did not actually remove any coordinates.  We now know
                // that any calls to getSimplifiedGeometry with a squaredTolerance less
                // than or equal to the current squaredTolerance will also not have any
                // effect.  This allows us to short circuit simplification (saving CPU
                // cycles) and prevents the cache of simplified geometries from filling
                // up with useless identical copies of this geometry (saving memory).
                this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
                return this;
            }
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {SimpleGeometry} Simplified geometry.
         * @protected
         */
        SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            return this;
        };
        /**
         * @return {number} Stride.
         */
        SimpleGeometry.prototype.getStride = function () {
            return this.stride;
        };
        /**
         * @param {import("./GeometryLayout.js").default} layout Layout.
         * @param {Array<number>} flatCoordinates Flat coordinates.
         */
        SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {
            this.stride = getStrideForLayout(layout);
            this.layout = layout;
            this.flatCoordinates = flatCoordinates;
        };
        /**
         * @abstract
         * @param {!Array<*>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {
            abstract();
        };
        /**
         * @param {import("./GeometryLayout.js").default|undefined} layout Layout.
         * @param {Array<*>} coordinates Coordinates.
         * @param {number} nesting Nesting.
         * @protected
         */
        SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {
            /** @type {number} */
            var stride;
            if (layout) {
                stride = getStrideForLayout(layout);
            }
            else {
                for (var i = 0; i < nesting; ++i) {
                    if (coordinates.length === 0) {
                        this.layout = GeometryLayout.XY;
                        this.stride = 2;
                        return;
                    }
                    else {
                        coordinates = /** @type {Array} */ (coordinates[0]);
                    }
                }
                stride = coordinates.length;
                layout = getLayoutForStride(stride);
            }
            this.layout = layout;
            this.stride = stride;
        };
        /**
         * Apply a transform function to the coordinates of the geometry.
         * The geometry is modified in place.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         * @param {import("../proj.js").TransformFunction} transformFn Transform function.
         * Called with a flat array of geometry coordinates.
         * @api
         */
        SimpleGeometry.prototype.applyTransform = function (transformFn) {
            if (this.flatCoordinates) {
                transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
                this.changed();
            }
        };
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @param {number} angle Rotation angle in radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        SimpleGeometry.prototype.rotate = function (angle, anchor) {
            var flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                var stride = this.getStride();
                rotate$1(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
                this.changed();
            }
        };
        /**
         * Scale the geometry (with an optional origin).  This modifies the geometry
         * coordinates in place.
         * @param {number} sx The scaling factor in the x-direction.
         * @param {number=} opt_sy The scaling factor in the y-direction (defaults to sx).
         * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
         *     of the geometry extent).
         * @api
         */
        SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
            var sy = opt_sy;
            if (sy === undefined) {
                sy = sx;
            }
            var anchor = opt_anchor;
            if (!anchor) {
                anchor = getCenter(this.getExtent());
            }
            var flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                var stride = this.getStride();
                scale$1(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
                this.changed();
            }
        };
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        SimpleGeometry.prototype.translate = function (deltaX, deltaY) {
            var flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                var stride = this.getStride();
                translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
                this.changed();
            }
        };
        return SimpleGeometry;
    }(Geometry));
    /**
     * @param {number} stride Stride.
     * @return {import("./GeometryLayout.js").default} layout Layout.
     */
    function getLayoutForStride(stride) {
        var layout;
        if (stride == 2) {
            layout = GeometryLayout.XY;
        }
        else if (stride == 3) {
            layout = GeometryLayout.XYZ;
        }
        else if (stride == 4) {
            layout = GeometryLayout.XYZM;
        }
        return /** @type {import("./GeometryLayout.js").default} */ (layout);
    }
    /**
     * @param {import("./GeometryLayout.js").default} layout Layout.
     * @return {number} Stride.
     */
    function getStrideForLayout(layout) {
        var stride;
        if (layout == GeometryLayout.XY) {
            stride = 2;
        }
        else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {
            stride = 3;
        }
        else if (layout == GeometryLayout.XYZM) {
            stride = 4;
        }
        return /** @type {number} */ (stride);
    }

    /**
     * @module ol/geom/flat/closest
     */
    /**
     * Returns the point on the 2D line segment flatCoordinates[offset1] to
     * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
     * dimensions are linearly interpolated.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset1 Offset 1.
     * @param {number} offset2 Offset 2.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     */
    function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
        var x1 = flatCoordinates[offset1];
        var y1 = flatCoordinates[offset1 + 1];
        var dx = flatCoordinates[offset2] - x1;
        var dy = flatCoordinates[offset2 + 1] - y1;
        var offset;
        if (dx === 0 && dy === 0) {
            offset = offset1;
        }
        else {
            var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
            if (t > 1) {
                offset = offset2;
            }
            else if (t > 0) {
                for (var i = 0; i < stride; ++i) {
                    closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);
                }
                closestPoint.length = stride;
                return;
            }
            else {
                offset = offset1;
            }
        }
        for (var i = 0; i < stride; ++i) {
            closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
    }
    /**
     * Return the squared of the largest distance between any pair of consecutive
     * coordinates.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} max Max squared delta.
     * @return {number} Max squared delta.
     */
    function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
        var x1 = flatCoordinates[offset];
        var y1 = flatCoordinates[offset + 1];
        for (offset += stride; offset < end; offset += stride) {
            var x2 = flatCoordinates[offset];
            var y2 = flatCoordinates[offset + 1];
            var squaredDelta = squaredDistance(x1, y1, x2, y2);
            if (squaredDelta > max) {
                max = squaredDelta;
            }
            x1 = x2;
            y1 = y2;
        }
        return max;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} max Max squared delta.
     * @return {number} Max squared delta.
     */
    function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
            offset = end;
        }
        return max;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} maxDelta Max delta.
     * @param {boolean} isRing Is ring.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @param {Array<number>=} opt_tmpPoint Temporary point object.
     * @return {number} Minimum squared distance.
     */
    function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
        if (offset == end) {
            return minSquaredDistance;
        }
        var i, squaredDistance$1;
        if (maxDelta === 0) {
            // All points are identical, so just test the first point.
            squaredDistance$1 = squaredDistance(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
            if (squaredDistance$1 < minSquaredDistance) {
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = flatCoordinates[offset + i];
                }
                closestPoint.length = stride;
                return squaredDistance$1;
            }
            else {
                return minSquaredDistance;
            }
        }
        var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
        var index = offset + stride;
        while (index < end) {
            assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
            squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
            if (squaredDistance$1 < minSquaredDistance) {
                minSquaredDistance = squaredDistance$1;
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = tmpPoint[i];
                }
                closestPoint.length = stride;
                index += stride;
            }
            else {
                // Skip ahead multiple points, because we know that all the skipped
                // points cannot be any closer than the closest point we have found so
                // far.  We know this because we know how close the current point is, how
                // close the closest point we have found so far is, and the maximum
                // distance between consecutive points.  For example, if we're currently
                // at distance 10, the best we've found so far is 3, and that the maximum
                // distance between consecutive points is 2, then we'll need to skip at
                // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
                // finding a closer point.  We use Math.max(..., 1) to ensure that we
                // always advance at least one point, to avoid an infinite loop.
                index +=
                    stride *
                        Math.max(((Math.sqrt(squaredDistance$1) - Math.sqrt(minSquaredDistance)) /
                            maxDelta) |
                            0, 1);
            }
        }
        if (isRing) {
            // Check the closing segment.
            assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
            squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
            if (squaredDistance$1 < minSquaredDistance) {
                minSquaredDistance = squaredDistance$1;
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = tmpPoint[i];
                }
                closestPoint.length = stride;
            }
        }
        return minSquaredDistance;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} maxDelta Max delta.
     * @param {boolean} isRing Is ring.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @param {Array<number>=} opt_tmpPoint Temporary point object.
     * @return {number} Minimum squared distance.
     */
    function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
        var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
            offset = end;
        }
        return minSquaredDistance;
    }

    /**
     * @module ol/geom/flat/deflate
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} stride Stride.
     * @return {number} offset Offset.
     */
    function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
        for (var i = 0, ii = coordinate.length; i < ii; ++i) {
            flatCoordinates[offset++] = coordinate[i];
        }
        return offset;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {number} stride Stride.
     * @return {number} offset Offset.
     */
    function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
            var coordinate = coordinates[i];
            for (var j = 0; j < stride; ++j) {
                flatCoordinates[offset++] = coordinate[j];
            }
        }
        return offset;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
     * @param {number} stride Stride.
     * @param {Array<number>=} opt_ends Ends.
     * @return {Array<number>} Ends.
     */
    function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
        var ends = opt_ends ? opt_ends : [];
        var i = 0;
        for (var j = 0, jj = coordinatess.length; j < jj; ++j) {
            var end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);
            ends[i++] = end;
            offset = end;
        }
        ends.length = i;
        return ends;
    }

    /**
     * @module ol/geom/flat/simplify
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @return {number} Simplified offset.
     */
    function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
        var n = (end - offset) / stride;
        if (n < 3) {
            for (; offset < end; offset += stride) {
                simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + 1];
            }
            return simplifiedOffset;
        }
        /** @type {Array<number>} */
        var markers = new Array(n);
        markers[0] = 1;
        markers[n - 1] = 1;
        /** @type {Array<number>} */
        var stack = [offset, end - stride];
        var index = 0;
        while (stack.length > 0) {
            var last = stack.pop();
            var first = stack.pop();
            var maxSquaredDistance = 0;
            var x1 = flatCoordinates[first];
            var y1 = flatCoordinates[first + 1];
            var x2 = flatCoordinates[last];
            var y2 = flatCoordinates[last + 1];
            for (var i = first + stride; i < last; i += stride) {
                var x = flatCoordinates[i];
                var y = flatCoordinates[i + 1];
                var squaredDistance_1 = squaredSegmentDistance(x, y, x1, y1, x2, y2);
                if (squaredDistance_1 > maxSquaredDistance) {
                    index = i;
                    maxSquaredDistance = squaredDistance_1;
                }
            }
            if (maxSquaredDistance > squaredTolerance) {
                markers[(index - offset) / stride] = 1;
                if (first + stride < index) {
                    stack.push(first, index);
                }
                if (index + stride < last) {
                    stack.push(index, last);
                }
            }
        }
        for (var i = 0; i < n; ++i) {
            if (markers[i]) {
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + i * stride];
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + i * stride + 1];
            }
        }
        return simplifiedOffset;
    }
    /**
     * @param {number} value Value.
     * @param {number} tolerance Tolerance.
     * @return {number} Rounded value.
     */
    function snap(value, tolerance) {
        return tolerance * Math.round(value / tolerance);
    }
    /**
     * Simplifies a line string using an algorithm designed by Tim Schaub.
     * Coordinates are snapped to the nearest value in a virtual grid and
     * consecutive duplicate coordinates are discarded.  This effectively preserves
     * topology as the simplification of any subsection of a line string is
     * independent of the rest of the line string.  This means that, for examples,
     * the common edge between two polygons will be simplified to the same line
     * string independently in both polygons.  This implementation uses a single
     * pass over the coordinates and eliminates intermediate collinear points.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} tolerance Tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @return {number} Simplified offset.
     */
    function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
        // do nothing if the line is empty
        if (offset == end) {
            return simplifiedOffset;
        }
        // snap the first coordinate (P1)
        var x1 = snap(flatCoordinates[offset], tolerance);
        var y1 = snap(flatCoordinates[offset + 1], tolerance);
        offset += stride;
        // add the first coordinate to the output
        simplifiedFlatCoordinates[simplifiedOffset++] = x1;
        simplifiedFlatCoordinates[simplifiedOffset++] = y1;
        // find the next coordinate that does not snap to the same value as the first
        // coordinate (P2)
        var x2, y2;
        do {
            x2 = snap(flatCoordinates[offset], tolerance);
            y2 = snap(flatCoordinates[offset + 1], tolerance);
            offset += stride;
            if (offset == end) {
                // all coordinates snap to the same value, the line collapses to a point
                // push the last snapped value anyway to ensure that the output contains
                // at least two points
                // FIXME should we really return at least two points anyway?
                simplifiedFlatCoordinates[simplifiedOffset++] = x2;
                simplifiedFlatCoordinates[simplifiedOffset++] = y2;
                return simplifiedOffset;
            }
        } while (x2 == x1 && y2 == y1);
        while (offset < end) {
            // snap the next coordinate (P3)
            var x3 = snap(flatCoordinates[offset], tolerance);
            var y3 = snap(flatCoordinates[offset + 1], tolerance);
            offset += stride;
            // skip P3 if it is equal to P2
            if (x3 == x2 && y3 == y2) {
                continue;
            }
            // calculate the delta between P1 and P2
            var dx1 = x2 - x1;
            var dy1 = y2 - y1;
            // calculate the delta between P3 and P1
            var dx2 = x3 - x1;
            var dy2 = y3 - y1;
            // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
            // P1 in the same direction then P2 is on the straight line between P1 and
            // P3
            if (dx1 * dy2 == dy1 * dx2 &&
                ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
                ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
                // discard P2 and set P2 = P3
                x2 = x3;
                y2 = y3;
                continue;
            }
            // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
            // between P3 and P1 or on the opposite half of the line to P2.  add P2,
            // and continue with P1 = P2 and P2 = P3
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
            x1 = x2;
            y1 = y2;
            x2 = x3;
            y2 = y3;
        }
        // add the last point (P2)
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} tolerance Tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @param {Array<number>} simplifiedEnds Simplified ends.
     * @return {number} Simplified offset.
     */
    function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);
            simplifiedEnds.push(simplifiedOffset);
            offset = end;
        }
        return simplifiedOffset;
    }

    /**
     * @module ol/geom/flat/inflate
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
     * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
     */
    function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
        var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
        var i = 0;
        for (var j = offset; j < end; j += stride) {
            coordinates[i++] = flatCoordinates.slice(j, j + stride);
        }
        coordinates.length = i;
        return coordinates;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
     * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
     */
    function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
        var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
        var i = 0;
        for (var j = 0, jj = ends.length; j < jj; ++j) {
            var end = ends[j];
            coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);
            offset = end;
        }
        coordinatess.length = i;
        return coordinatess;
    }

    /**
     * @module ol/geom/flat/area
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} Area.
     */
    function linearRing(flatCoordinates, offset, end, stride) {
        var twiceArea = 0;
        var x1 = flatCoordinates[end - stride];
        var y1 = flatCoordinates[end - stride + 1];
        for (; offset < end; offset += stride) {
            var x2 = flatCoordinates[offset];
            var y2 = flatCoordinates[offset + 1];
            twiceArea += y1 * x2 - x1 * y2;
            x1 = x2;
            y1 = y2;
        }
        return twiceArea / 2;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @return {number} Area.
     */
    function linearRings(flatCoordinates, offset, ends, stride) {
        var area = 0;
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            area += linearRing(flatCoordinates, offset, end, stride);
            offset = end;
        }
        return area;
    }

    var __extends$9 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Linear ring geometry. Only used as part of polygon; cannot be rendered
     * on its own.
     *
     * @api
     */
    var LinearRing = /** @class */ (function (_super) {
        __extends$9(LinearRing, _super);
        /**
         * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
         *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        function LinearRing(coordinates, opt_layout) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.maxDeltaRevision_ = -1;
            if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
                _this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
            }
            else {
                _this.setCoordinates(
                /** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
            }
            return _this;
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!LinearRing} Clone.
         * @api
         */
        LinearRing.prototype.clone = function () {
            return new LinearRing(this.flatCoordinates.slice(), this.layout);
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        LinearRing.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
        };
        /**
         * Return the area of the linear ring on projected plane.
         * @return {number} Area (on projected plane).
         * @api
         */
        LinearRing.prototype.getArea = function () {
            return linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        };
        /**
         * Return the coordinates of the linear ring.
         * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
         * @api
         */
        LinearRing.prototype.getCoordinates = function () {
            return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {LinearRing} Simplified LinearRing.
         * @protected
         */
        LinearRing.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            var simplifiedFlatCoordinates = [];
            simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
            return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        LinearRing.prototype.getType = function () {
            return GeometryType.LINEAR_RING;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        LinearRing.prototype.intersectsExtent = function (extent) {
            return false;
        };
        /**
         * Set the coordinates of the linear ring.
         * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        LinearRing.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 1);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        };
        return LinearRing;
    }(SimpleGeometry));

    var __extends$a = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Point geometry.
     *
     * @api
     */
    var Point = /** @class */ (function (_super) {
        __extends$a(Point, _super);
        /**
         * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        function Point(coordinates, opt_layout) {
            var _this = _super.call(this) || this;
            _this.setCoordinates(coordinates, opt_layout);
            return _this;
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!Point} Clone.
         * @api
         */
        Point.prototype.clone = function () {
            var point = new Point(this.flatCoordinates.slice(), this.layout);
            return point;
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        Point.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            var flatCoordinates = this.flatCoordinates;
            var squaredDistance$1 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
            if (squaredDistance$1 < minSquaredDistance) {
                var stride = this.stride;
                for (var i = 0; i < stride; ++i) {
                    closestPoint[i] = flatCoordinates[i];
                }
                closestPoint.length = stride;
                return squaredDistance$1;
            }
            else {
                return minSquaredDistance;
            }
        };
        /**
         * Return the coordinate of the point.
         * @return {import("../coordinate.js").Coordinate} Coordinates.
         * @api
         */
        Point.prototype.getCoordinates = function () {
            return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
        };
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        Point.prototype.computeExtent = function (extent) {
            return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        Point.prototype.getType = function () {
            return GeometryType.POINT;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        Point.prototype.intersectsExtent = function (extent) {
            return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
        };
        /**
         * @param {!Array<*>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        Point.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 0);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        };
        return Point;
    }(SimpleGeometry));

    /**
     * @module ol/geom/flat/contains
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} Contains extent.
     */
    function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
        var outside = forEachCorner(extent, 
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {boolean} Contains (x, y).
         */
        function (coordinate) {
            return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
        });
        return !outside;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
        // http://geomalgorithms.com/a03-_inclusion.html
        // Copyright 2000 softSurfer, 2012 Dan Sunday
        // This code may be freely used and modified for any purpose
        // providing that this copyright notice is included with it.
        // SoftSurfer makes no warranty for this code, and cannot be held
        // liable for any real or imagined damage resulting from its use.
        // Users of this code must verify correctness for their application.
        var wn = 0;
        var x1 = flatCoordinates[end - stride];
        var y1 = flatCoordinates[end - stride + 1];
        for (; offset < end; offset += stride) {
            var x2 = flatCoordinates[offset];
            var y2 = flatCoordinates[offset + 1];
            if (y1 <= y) {
                if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {
                    wn++;
                }
            }
            else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {
                wn--;
            }
            x1 = x2;
            y1 = y2;
        }
        return wn !== 0;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
        if (ends.length === 0) {
            return false;
        }
        if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
            return false;
        }
        for (var i = 1, ii = ends.length; i < ii; ++i) {
            if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
                return false;
            }
        }
        return true;
    }

    /**
     * @module ol/geom/flat/interiorpoint
     */
    /**
     * Calculates a point that is likely to lie in the interior of the linear rings.
     * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} flatCenters Flat centers.
     * @param {number} flatCentersOffset Flat center offset.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Destination point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     */
    function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {
        var i, ii, x, x1, x2, y1, y2;
        var y = flatCenters[flatCentersOffset + 1];
        /** @type {Array<number>} */
        var intersections = [];
        // Calculate intersections with the horizontal line
        for (var r = 0, rr = ends.length; r < rr; ++r) {
            var end = ends[r];
            x1 = flatCoordinates[end - stride];
            y1 = flatCoordinates[end - stride + 1];
            for (i = offset; i < end; i += stride) {
                x2 = flatCoordinates[i];
                y2 = flatCoordinates[i + 1];
                if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
                    x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;
                    intersections.push(x);
                }
                x1 = x2;
                y1 = y2;
            }
        }
        // Find the longest segment of the horizontal line that has its center point
        // inside the linear ring.
        var pointX = NaN;
        var maxSegmentLength = -Infinity;
        intersections.sort(numberSafeCompareFunction);
        x1 = intersections[0];
        for (i = 1, ii = intersections.length; i < ii; ++i) {
            x2 = intersections[i];
            var segmentLength = Math.abs(x2 - x1);
            if (segmentLength > maxSegmentLength) {
                x = (x1 + x2) / 2;
                if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
                    pointX = x;
                    maxSegmentLength = segmentLength;
                }
            }
            x1 = x2;
        }
        if (isNaN(pointX)) {
            // There is no horizontal line that has its center point inside the linear
            // ring.  Use the center of the the linear ring's extent.
            pointX = flatCenters[flatCentersOffset];
        }
        if (opt_dest) {
            opt_dest.push(pointX, y, maxSegmentLength);
            return opt_dest;
        }
        else {
            return [pointX, y, maxSegmentLength];
        }
    }

    /**
     * @module ol/geom/flat/segments
     */
    /**
     * This function calls `callback` for each segment of the flat coordinates
     * array. If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
     *     called for each segment.
     * @return {T|boolean} Value.
     * @template T
     */
    function forEach(flatCoordinates, offset, end, stride, callback) {
        var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
        var point2 = [];
        var ret;
        for (; offset + stride < end; offset += stride) {
            point2[0] = flatCoordinates[offset + stride];
            point2[1] = flatCoordinates[offset + stride + 1];
            ret = callback(point1, point2);
            if (ret) {
                return ret;
            }
            point1[0] = point2[0];
            point1[1] = point2[1];
        }
        return false;
    }

    /**
     * @module ol/geom/flat/intersectsextent
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
        var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);
        if (!intersects(extent, coordinatesExtent)) {
            return false;
        }
        if (containsExtent(extent, coordinatesExtent)) {
            return true;
        }
        if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {
            return true;
        }
        if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {
            return true;
        }
        return forEach(flatCoordinates, offset, end, stride, 
        /**
         * @param {import("../../coordinate.js").Coordinate} point1 Start point.
         * @param {import("../../coordinate.js").Coordinate} point2 End point.
         * @return {boolean} `true` if the segment and the extent intersect,
         *     `false` otherwise.
         */
        function (point1, point2) {
            return intersectsSegment(extent, point1, point2);
        });
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
        if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
            return true;
        }
        if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
            return true;
        }
        return false;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
        if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
            return false;
        }
        if (ends.length === 1) {
            return true;
        }
        for (var i = 1, ii = ends.length; i < ii; ++i) {
            if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
                if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * @module ol/geom/flat/reverse
     */
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    function coordinates(flatCoordinates, offset, end, stride) {
        while (offset < end - stride) {
            for (var i = 0; i < stride; ++i) {
                var tmp = flatCoordinates[offset + i];
                flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
                flatCoordinates[end - stride + i] = tmp;
            }
            offset += stride;
            end -= stride;
        }
    }

    /**
     * @module ol/geom/flat/orient
     */
    /**
     * Is the linear ring oriented clockwise in a coordinate system with a bottom-left
     * coordinate origin? For a coordinate system with a top-left coordinate origin,
     * the ring's orientation is clockwise when this function returns false.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {boolean} Is clockwise.
     */
    function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
        // https://stackoverflow.com/a/1180256/2389327
        // https://en.wikipedia.org/wiki/Curve_orientation#Orientation_of_a_simple_polygon
        var firstVertexRepeated = true;
        for (var i = 0; i < stride; ++i) {
            if (flatCoordinates[offset + i] !== flatCoordinates[end - stride + i]) {
                firstVertexRepeated = false;
                break;
            }
        }
        if (firstVertexRepeated) {
            end -= stride;
        }
        var iMinVertex = findCornerVertex(flatCoordinates, offset, end, stride);
        // Orientation matrix:
        //     [ 1  xa  ya ]
        // O = | 1  xb  yb |
        //     [ 1  xc  yc ]
        var iPreviousVertex = iMinVertex - stride;
        if (iPreviousVertex < offset) {
            iPreviousVertex = end - stride;
        }
        var iNextVertex = iMinVertex + stride;
        if (iNextVertex >= end) {
            iNextVertex = offset;
        }
        var aX = flatCoordinates[iPreviousVertex];
        var aY = flatCoordinates[iPreviousVertex + 1];
        var bX = flatCoordinates[iMinVertex];
        var bY = flatCoordinates[iMinVertex + 1];
        var cX = flatCoordinates[iNextVertex];
        var cY = flatCoordinates[iNextVertex + 1];
        var determinant = bX * cY + aX * bY + aY * cX - (aY * bX + bY * cX + aX * cY);
        return determinant < 0;
    }
    // Find vertex along one edge of bounding box.
    // In this case, we find smallest y; in case of tie also smallest x.
    function findCornerVertex(flatCoordinates, offset, end, stride) {
        var iMinVertex = -1;
        var minY = Infinity;
        var minXAtMinY = Infinity;
        for (var i = offset; i < end; i += stride) {
            var x = flatCoordinates[i];
            var y = flatCoordinates[i + 1];
            if (y > minY) {
                continue;
            }
            if (y == minY) {
                if (x >= minXAtMinY) {
                    continue;
                }
            }
            // Minimum so far.
            iMinVertex = i;
            minY = y;
            minXAtMinY = x;
        }
        return iMinVertex;
    }
    /**
     * Determines if linear rings are oriented.  By default, left-hand orientation
     * is tested (first ring must be clockwise, remaining rings counter-clockwise).
     * To test for right-hand orientation, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Array of end indexes.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Test for right-hand orientation
     *     (counter-clockwise exterior ring and clockwise interior rings).
     * @return {boolean} Rings are correctly oriented.
     */
    function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {
        var right = opt_right !== undefined ? opt_right : false;
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
            if (i === 0) {
                if ((right && isClockwise) || (!right && !isClockwise)) {
                    return false;
                }
            }
            else {
                if ((right && !isClockwise) || (!right && isClockwise)) {
                    return false;
                }
            }
            offset = end;
        }
        return true;
    }
    /**
     * Orient coordinates in a flat array of linear rings.  By default, rings
     * are oriented following the left-hand rule (clockwise for exterior and
     * counter-clockwise for interior rings).  To orient according to the
     * right-hand rule, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Follow the right-hand rule for orientation.
     * @return {number} End.
     */
    function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
        var right = opt_right !== undefined ? opt_right : false;
        for (var i = 0, ii = ends.length; i < ii; ++i) {
            var end = ends[i];
            var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
            var reverse = i === 0
                ? (right && isClockwise) || (!right && !isClockwise)
                : (right && !isClockwise) || (!right && isClockwise);
            if (reverse) {
                coordinates(flatCoordinates, offset, end, stride);
            }
            offset = end;
        }
        return offset;
    }

    var __extends$b = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Polygon geometry.
     *
     * @api
     */
    var Polygon = /** @class */ (function (_super) {
        __extends$b(Polygon, _super);
        /**
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
         *     Array of linear rings that define the polygon. The first linear ring of the
         *     array defines the outer-boundary or surface of the polygon. Each subsequent
         *     linear ring defines a hole in the surface of the polygon. A linear ring is
         *     an array of vertices' coordinates where the first coordinate and the last are
         *     equivalent. (For internal use, flat coordinates in combination with
         *     `opt_layout` and `opt_ends` are also accepted.)
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).
         */
        function Polygon(coordinates, opt_layout, opt_ends) {
            var _this = _super.call(this) || this;
            /**
             * @type {Array<number>}
             * @private
             */
            _this.ends_ = [];
            /**
             * @private
             * @type {number}
             */
            _this.flatInteriorPointRevision_ = -1;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            _this.flatInteriorPoint_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.maxDeltaRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            _this.orientedRevision_ = -1;
            /**
             * @private
             * @type {Array<number>}
             */
            _this.orientedFlatCoordinates_ = null;
            if (opt_layout !== undefined && opt_ends) {
                _this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
                _this.ends_ = opt_ends;
            }
            else {
                _this.setCoordinates(
                /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
            }
            return _this;
        }
        /**
         * Append the passed linear ring to this polygon.
         * @param {LinearRing} linearRing Linear ring.
         * @api
         */
        Polygon.prototype.appendLinearRing = function (linearRing) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = linearRing.getFlatCoordinates().slice();
            }
            else {
                extend(this.flatCoordinates, linearRing.getFlatCoordinates());
            }
            this.ends_.push(this.flatCoordinates.length);
            this.changed();
        };
        /**
         * Make a complete copy of the geometry.
         * @return {!Polygon} Clone.
         * @api
         */
        Polygon.prototype.clone = function () {
            return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        Polygon.prototype.containsXY = function (x, y) {
            return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
        };
        /**
         * Return the area of the polygon on projected plane.
         * @return {number} Area (on projected plane).
         * @api
         */
        Polygon.prototype.getArea = function () {
            return linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
        };
        /**
         * Get the coordinate array for this geometry.  This array has the structure
         * of a GeoJSON coordinate array for polygons.
         *
         * @param {boolean=} opt_right Orient coordinates according to the right-hand
         *     rule (counter-clockwise for exterior and clockwise for interior rings).
         *     If `false`, coordinates will be oriented according to the left-hand rule
         *     (clockwise for exterior and counter-clockwise for interior rings).
         *     By default, coordinate orientation will depend on how the geometry was
         *     constructed.
         * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
         * @api
         */
        Polygon.prototype.getCoordinates = function (opt_right) {
            var flatCoordinates;
            if (opt_right !== undefined) {
                flatCoordinates = this.getOrientedFlatCoordinates().slice();
                orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);
            }
            else {
                flatCoordinates = this.flatCoordinates;
            }
            return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
        };
        /**
         * @return {Array<number>} Ends.
         */
        Polygon.prototype.getEnds = function () {
            return this.ends_;
        };
        /**
         * @return {Array<number>} Interior point.
         */
        Polygon.prototype.getFlatInteriorPoint = function () {
            if (this.flatInteriorPointRevision_ != this.getRevision()) {
                var flatCenter = getCenter(this.getExtent());
                this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
                this.flatInteriorPointRevision_ = this.getRevision();
            }
            return this.flatInteriorPoint_;
        };
        /**
         * Return an interior point of the polygon.
         * @return {Point} Interior point as XYM coordinate, where M is the
         * length of the horizontal intersection that the point belongs to.
         * @api
         */
        Polygon.prototype.getInteriorPoint = function () {
            return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);
        };
        /**
         * Return the number of rings of the polygon,  this includes the exterior
         * ring and any interior rings.
         *
         * @return {number} Number of rings.
         * @api
         */
        Polygon.prototype.getLinearRingCount = function () {
            return this.ends_.length;
        };
        /**
         * Return the Nth linear ring of the polygon geometry. Return `null` if the
         * given index is out of range.
         * The exterior linear ring is available at index `0` and the interior rings
         * at index `1` and beyond.
         *
         * @param {number} index Index.
         * @return {LinearRing} Linear ring.
         * @api
         */
        Polygon.prototype.getLinearRing = function (index) {
            if (index < 0 || this.ends_.length <= index) {
                return null;
            }
            return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
        };
        /**
         * Return the linear rings of the polygon.
         * @return {Array<LinearRing>} Linear rings.
         * @api
         */
        Polygon.prototype.getLinearRings = function () {
            var layout = this.layout;
            var flatCoordinates = this.flatCoordinates;
            var ends = this.ends_;
            var linearRings = [];
            var offset = 0;
            for (var i = 0, ii = ends.length; i < ii; ++i) {
                var end = ends[i];
                var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);
                linearRings.push(linearRing);
                offset = end;
            }
            return linearRings;
        };
        /**
         * @return {Array<number>} Oriented flat coordinates.
         */
        Polygon.prototype.getOrientedFlatCoordinates = function () {
            if (this.orientedRevision_ != this.getRevision()) {
                var flatCoordinates = this.flatCoordinates;
                if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
                    this.orientedFlatCoordinates_ = flatCoordinates;
                }
                else {
                    this.orientedFlatCoordinates_ = flatCoordinates.slice();
                    this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
                }
                this.orientedRevision_ = this.getRevision();
            }
            return this.orientedFlatCoordinates_;
        };
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {Polygon} Simplified Polygon.
         * @protected
         */
        Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
            var simplifiedFlatCoordinates = [];
            var simplifiedEnds = [];
            simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
            return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
        };
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        Polygon.prototype.getType = function () {
            return GeometryType.POLYGON;
        };
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        Polygon.prototype.intersectsExtent = function (extent) {
            return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
        };
        /**
         * Set the coordinates of the polygon.
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 2);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
            this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
            this.changed();
        };
        return Polygon;
    }(SimpleGeometry));
    /**
     * Create a polygon from an extent. The layout used is `XY`.
     * @param {import("../extent.js").Extent} extent The extent.
     * @return {Polygon} The polygon.
     * @api
     */
    function fromExtent(extent) {
        var minX = extent[0];
        var minY = extent[1];
        var maxX = extent[2];
        var maxY = extent[3];
        var flatCoordinates = [
            minX,
            minY,
            minX,
            maxY,
            maxX,
            maxY,
            maxX,
            minY,
            minX,
            minY,
        ];
        return new Polygon(flatCoordinates, GeometryLayout.XY, [
            flatCoordinates.length,
        ]);
    }

    /**
     * @module ol/render/EventType
     */
    /**
     * @enum {string}
     */
    var RenderEventType = {
        /**
         * Triggered before a layer is rendered.
         * @event module:ol/render/Event~RenderEvent#prerender
         * @api
         */
        PRERENDER: 'prerender',
        /**
         * Triggered after a layer is rendered.
         * @event module:ol/render/Event~RenderEvent#postrender
         * @api
         */
        POSTRENDER: 'postrender',
        /**
         * Triggered before layers are rendered.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#precompose
         * @api
         */
        PRECOMPOSE: 'precompose',
        /**
         * Triggered after all layers are rendered.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#postcompose
         * @api
         */
        POSTCOMPOSE: 'postcompose',
        /**
         * Triggered when rendering is complete, i.e. all sources and tiles have
         * finished loading for the current viewport, and all tiles are faded in.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#rendercomplete
         * @api
         */
        RENDERCOMPLETE: 'rendercomplete',
    };

    /**
     * @module ol/ImageState
     */
    /**
     * @enum {number}
     */
    var ImageState = {
        IDLE: 0,
        LOADING: 1,
        LOADED: 2,
        ERROR: 3,
        EMPTY: 4,
    };

    /**
     * @module ol/size
     */
    /**
     * Determines if a size has a positive area.
     * @param {Size} size The size to test.
     * @return {boolean} The size has a positive area.
     */
    function hasArea(size) {
        return size[0] > 0 && size[1] > 0;
    }
    /**
     * Returns a size scaled by a ratio. The result will be an array of integers.
     * @param {Size} size Size.
     * @param {number} ratio Ratio.
     * @param {Size=} opt_size Optional reusable size array.
     * @return {Size} The scaled size.
     */
    function scale$2(size, ratio, opt_size) {
        if (opt_size === undefined) {
            opt_size = [0, 0];
        }
        opt_size[0] = (size[0] * ratio + 0.5) | 0;
        opt_size[1] = (size[1] * ratio + 0.5) | 0;
        return opt_size;
    }
    /**
     * Returns an `Size` array for the passed in number (meaning: square) or
     * `Size` array.
     * (meaning: non-square),
     * @param {number|Size} size Width and height.
     * @param {Size=} opt_size Optional reusable size array.
     * @return {Size} Size.
     * @api
     */
    function toSize(size, opt_size) {
        if (Array.isArray(size)) {
            return size;
        }
        else {
            if (opt_size === undefined) {
                opt_size = [size, size];
            }
            else {
                opt_size[0] = size;
                opt_size[1] = size;
            }
            return opt_size;
        }
    }

    /**
     * @module ol/color
     */
    /**
     * Return the color as an rgba string.
     * @param {Color|string} color Color.
     * @return {string} Rgba string.
     * @api
     */
    function asString(color) {
        if (typeof color === 'string') {
            return color;
        }
        else {
            return toString$1(color);
        }
    }
    /**
     * @param {Color} color Color.
     * @return {string} String.
     */
    function toString$1(color) {
        var r = color[0];
        if (r != (r | 0)) {
            r = (r + 0.5) | 0;
        }
        var g = color[1];
        if (g != (g | 0)) {
            g = (g + 0.5) | 0;
        }
        var b = color[2];
        if (b != (b | 0)) {
            b = (b + 0.5) | 0;
        }
        var a = color[3] === undefined ? 1 : color[3];
        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
    }

    /**
     * @module ol/has
     */
    var ua = typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'
        ? navigator.userAgent.toLowerCase()
        : '';
    /**
     * User agent string says we are dealing with Firefox as browser.
     * @type {boolean}
     */
    var FIREFOX = ua.indexOf('firefox') !== -1;
    /**
     * User agent string says we are dealing with Safari as browser.
     * @type {boolean}
     */
    var SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;
    /**
     * User agent string says we are dealing with a WebKit engine.
     * @type {boolean}
     */
    var WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;
    /**
     * User agent string says we are dealing with a Mac as platform.
     * @type {boolean}
     */
    var MAC = ua.indexOf('macintosh') !== -1;
    /**
     * The ratio between physical pixels and device-independent pixels
     * (dips) on the device (`window.devicePixelRatio`).
     * @const
     * @type {number}
     * @api
     */
    var DEVICE_PIXEL_RATIO = typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;
    /**
     * The execution context is a worker with OffscreenCanvas available.
     * @const
     * @type {boolean}
     */
    var WORKER_OFFSCREEN_CANVAS = typeof WorkerGlobalScope !== 'undefined' &&
        typeof OffscreenCanvas !== 'undefined' &&
        self instanceof WorkerGlobalScope; //eslint-disable-line
    /**
     * Image.prototype.decode() is supported.
     * @type {boolean}
     */
    var IMAGE_DECODE = typeof Image !== 'undefined' && Image.prototype.decode;
    /**
     * @type {boolean}
     */
    var PASSIVE_EVENT_LISTENERS = (function () {
        var passive = false;
        try {
            var options = Object.defineProperty({}, 'passive', {
                get: function () {
                    passive = true;
                },
            });
            window.addEventListener('_', null, options);
            window.removeEventListener('_', null, options);
        }
        catch (error) {
            // passive not supported
        }
        return passive;
    })();

    /**
     * @module ol/dom
     */
    //FIXME Move this function to the canvas module
    /**
     * Create an html canvas element and returns its 2d context.
     * @param {number=} opt_width Canvas width.
     * @param {number=} opt_height Canvas height.
     * @param {Array<HTMLCanvasElement>=} opt_canvasPool Canvas pool to take existing canvas from.
     * @return {CanvasRenderingContext2D} The context.
     */
    function createCanvasContext2D(opt_width, opt_height, opt_canvasPool) {
        var canvas = opt_canvasPool && opt_canvasPool.length
            ? opt_canvasPool.shift()
            : WORKER_OFFSCREEN_CANVAS
                ? new OffscreenCanvas(opt_width || 300, opt_height || 300)
                : document.createElement('canvas');
        if (opt_width) {
            canvas.width = opt_width;
        }
        if (opt_height) {
            canvas.height = opt_height;
        }
        //FIXME Allow OffscreenCanvasRenderingContext2D as return type
        return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
    }
    /**
     * @param {Node} newNode Node to replace old node
     * @param {Node} oldNode The node to be replaced
     */
    function replaceNode(newNode, oldNode) {
        var parent = oldNode.parentNode;
        if (parent) {
            parent.replaceChild(newNode, oldNode);
        }
    }
    /**
     * @param {Node} node The node to remove.
     * @returns {Node} The node that was removed or null.
     */
    function removeNode(node) {
        return node && node.parentNode ? node.parentNode.removeChild(node) : null;
    }
    /**
     * @param {Node} node The node to remove the children from.
     */
    function removeChildren(node) {
        while (node.lastChild) {
            node.removeChild(node.lastChild);
        }
    }
    /**
     * Transform the children of a parent node so they match the
     * provided list of children.  This function aims to efficiently
     * remove, add, and reorder child nodes while maintaining a simple
     * implementation (it is not guaranteed to minimize DOM operations).
     * @param {Node} node The parent node whose children need reworking.
     * @param {Array<Node>} children The desired children.
     */
    function replaceChildren(node, children) {
        var oldChildren = node.childNodes;
        for (var i = 0; true; ++i) {
            var oldChild = oldChildren[i];
            var newChild = children[i];
            // check if our work is done
            if (!oldChild && !newChild) {
                break;
            }
            // check if children match
            if (oldChild === newChild) {
                continue;
            }
            // check if a new child needs to be added
            if (!oldChild) {
                node.appendChild(newChild);
                continue;
            }
            // check if an old child needs to be removed
            if (!newChild) {
                node.removeChild(oldChild);
                --i;
                continue;
            }
            // reorder
            node.insertBefore(newChild, oldChild);
        }
    }

    /**
     * @module ol/css
     */
    /**
     * @typedef {Object} FontParameters
     * @property {string} style
     * @property {string} variant
     * @property {string} weight
     * @property {string} size
     * @property {string} lineHeight
     * @property {string} family
     * @property {Array<string>} families
     */
    /**
     * The CSS class for hidden feature.
     *
     * @const
     * @type {string}
     */
    var CLASS_HIDDEN = 'ol-hidden';
    /**
     * The CSS class that we'll give the DOM elements to have them unselectable.
     *
     * @const
     * @type {string}
     */
    var CLASS_UNSELECTABLE = 'ol-unselectable';
    /**
     * The CSS class for controls.
     *
     * @const
     * @type {string}
     */
    var CLASS_CONTROL = 'ol-control';
    /**
     * The CSS class that we'll give the DOM elements that are collapsed, i.e.
     * to those elements which usually can be expanded.
     *
     * @const
     * @type {string}
     */
    var CLASS_COLLAPSED = 'ol-collapsed';

    /**
     * @module ol/render/canvas
     */
    /**
     * @type {BaseObject}
     */
    var checkedFonts = new BaseObject();
    /**
     * The label cache for text rendering. To change the default cache size of 2048
     * entries, use {@link module:ol/structs/LRUCache#setSize}.
     * Deprecated - there is no label cache any more.
     * @type {?}
     * @api
     * @deprecated
     */
    var labelCache = new Target();
    labelCache.setSize = function () {
        console.warn('labelCache is deprecated.'); //eslint-disable-line
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} rotation Rotation.
     * @param {number} offsetX X offset.
     * @param {number} offsetY Y offset.
     */
    function rotateAtOffset(context, rotation, offsetX, offsetY) {
        if (rotation !== 0) {
            context.translate(offsetX, offsetY);
            context.rotate(rotation);
            context.translate(-offsetX, -offsetY);
        }
    }
    /**
     * @type {HTMLCanvasElement}
     * @private
     */
    var createTransformStringCanvas = null;
    /**
     * @param {import("../transform.js").Transform} transform Transform.
     * @return {string} CSS transform.
     */
    function createTransformString(transform) {
        if (WORKER_OFFSCREEN_CANVAS) {
            return toString(transform);
        }
        else {
            if (!createTransformStringCanvas) {
                createTransformStringCanvas = createCanvasContext2D(1, 1).canvas;
            }
            createTransformStringCanvas.style.transform = toString(transform);
            return createTransformStringCanvas.style.transform;
        }
    }

    /**
     * @module ol/layer/Property
     */
    /**
     * @enum {string}
     */
    var LayerProperty = {
        OPACITY: 'opacity',
        VISIBLE: 'visible',
        EXTENT: 'extent',
        Z_INDEX: 'zIndex',
        MAX_RESOLUTION: 'maxResolution',
        MIN_RESOLUTION: 'minResolution',
        MAX_ZOOM: 'maxZoom',
        MIN_ZOOM: 'minZoom',
        SOURCE: 'source',
    };

    var __extends$c = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
     * the options is set as a {@link module:ol/Object} property on the layer object, so
     * is observable, and has get/set accessors.
     *
     * @api
     */
    var BaseLayer = /** @class */ (function (_super) {
        __extends$c(BaseLayer, _super);
        /**
         * @param {Options} options Layer options.
         */
        function BaseLayer(options) {
            var _this = _super.call(this) || this;
            /**
             * @type {Object<string, *>}
             */
            var properties = assign({}, options);
            properties[LayerProperty.OPACITY] =
                options.opacity !== undefined ? options.opacity : 1;
            assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number
            properties[LayerProperty.VISIBLE] =
                options.visible !== undefined ? options.visible : true;
            properties[LayerProperty.Z_INDEX] = options.zIndex;
            properties[LayerProperty.MAX_RESOLUTION] =
                options.maxResolution !== undefined ? options.maxResolution : Infinity;
            properties[LayerProperty.MIN_RESOLUTION] =
                options.minResolution !== undefined ? options.minResolution : 0;
            properties[LayerProperty.MIN_ZOOM] =
                options.minZoom !== undefined ? options.minZoom : -Infinity;
            properties[LayerProperty.MAX_ZOOM] =
                options.maxZoom !== undefined ? options.maxZoom : Infinity;
            /**
             * @type {string}
             * @private
             */
            _this.className_ =
                properties.className !== undefined ? options.className : 'ol-layer';
            delete properties.className;
            _this.setProperties(properties);
            /**
             * @type {import("./Layer.js").State}
             * @private
             */
            _this.state_ = null;
            return _this;
        }
        /**
         * @return {string} CSS class name.
         */
        BaseLayer.prototype.getClassName = function () {
            return this.className_;
        };
        /**
         * This method is not meant to be called by layers or layer renderers because the state
         * is incorrect if the layer is included in a layer group.
         *
         * @param {boolean=} opt_managed Layer is managed.
         * @return {import("./Layer.js").State} Layer state.
         */
        BaseLayer.prototype.getLayerState = function (opt_managed) {
            /** @type {import("./Layer.js").State} */
            var state = this.state_ ||
                /** @type {?} */ ({
                    layer: this,
                    managed: opt_managed === undefined ? true : opt_managed,
                });
            var zIndex = this.getZIndex();
            state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
            state.sourceState = this.getSourceState();
            state.visible = this.getVisible();
            state.extent = this.getExtent();
            state.zIndex =
                zIndex !== undefined ? zIndex : state.managed === false ? Infinity : 0;
            state.maxResolution = this.getMaxResolution();
            state.minResolution = Math.max(this.getMinResolution(), 0);
            state.minZoom = this.getMinZoom();
            state.maxZoom = this.getMaxZoom();
            this.state_ = state;
            return state;
        };
        /**
         * @abstract
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
         *     modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        BaseLayer.prototype.getLayersArray = function (opt_array) {
            return abstract();
        };
        /**
         * @abstract
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
         *     states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        BaseLayer.prototype.getLayerStatesArray = function (opt_states) {
            return abstract();
        };
        /**
         * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
         * will be visible regardless of extent.
         * @return {import("../extent.js").Extent|undefined} The layer extent.
         * @observable
         * @api
         */
        BaseLayer.prototype.getExtent = function () {
            return /** @type {import("../extent.js").Extent|undefined} */ (this.get(LayerProperty.EXTENT));
        };
        /**
         * Return the maximum resolution of the layer.
         * @return {number} The maximum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMaxResolution = function () {
            return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
        };
        /**
         * Return the minimum resolution of the layer.
         * @return {number} The minimum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMinResolution = function () {
            return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
        };
        /**
         * Return the minimum zoom level of the layer.
         * @return {number} The minimum zoom level of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMinZoom = function () {
            return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));
        };
        /**
         * Return the maximum zoom level of the layer.
         * @return {number} The maximum zoom level of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getMaxZoom = function () {
            return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));
        };
        /**
         * Return the opacity of the layer (between 0 and 1).
         * @return {number} The opacity of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getOpacity = function () {
            return /** @type {number} */ (this.get(LayerProperty.OPACITY));
        };
        /**
         * @abstract
         * @return {import("../source/State.js").default} Source state.
         */
        BaseLayer.prototype.getSourceState = function () {
            return abstract();
        };
        /**
         * Return the visibility of the layer (`true` or `false`).
         * @return {boolean} The visibility of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getVisible = function () {
            return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
        };
        /**
         * Return the Z-index of the layer, which is used to order layers before
         * rendering. The default Z-index is 0.
         * @return {number} The Z-index of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.getZIndex = function () {
            return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
        };
        /**
         * Set the extent at which the layer is visible.  If `undefined`, the layer
         * will be visible at all extents.
         * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setExtent = function (extent) {
            this.set(LayerProperty.EXTENT, extent);
        };
        /**
         * Set the maximum resolution at which the layer is visible.
         * @param {number} maxResolution The maximum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMaxResolution = function (maxResolution) {
            this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
        };
        /**
         * Set the minimum resolution at which the layer is visible.
         * @param {number} minResolution The minimum resolution of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMinResolution = function (minResolution) {
            this.set(LayerProperty.MIN_RESOLUTION, minResolution);
        };
        /**
         * Set the maximum zoom (exclusive) at which the layer is visible.
         * Note that the zoom levels for layer visibility are based on the
         * view zoom level, which may be different from a tile source zoom level.
         * @param {number} maxZoom The maximum zoom of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMaxZoom = function (maxZoom) {
            this.set(LayerProperty.MAX_ZOOM, maxZoom);
        };
        /**
         * Set the minimum zoom (inclusive) at which the layer is visible.
         * Note that the zoom levels for layer visibility are based on the
         * view zoom level, which may be different from a tile source zoom level.
         * @param {number} minZoom The minimum zoom of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setMinZoom = function (minZoom) {
            this.set(LayerProperty.MIN_ZOOM, minZoom);
        };
        /**
         * Set the opacity of the layer, allowed values range from 0 to 1.
         * @param {number} opacity The opacity of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setOpacity = function (opacity) {
            assert(typeof opacity === 'number', 64); // Layer opacity must be a number
            this.set(LayerProperty.OPACITY, opacity);
        };
        /**
         * Set the visibility of the layer (`true` or `false`).
         * @param {boolean} visible The visibility of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setVisible = function (visible) {
            this.set(LayerProperty.VISIBLE, visible);
        };
        /**
         * Set Z-index of the layer, which is used to order layers before rendering.
         * The default Z-index is 0.
         * @param {number} zindex The z-index of the layer.
         * @observable
         * @api
         */
        BaseLayer.prototype.setZIndex = function (zindex) {
            this.set(LayerProperty.Z_INDEX, zindex);
        };
        /**
         * Clean up.
         */
        BaseLayer.prototype.disposeInternal = function () {
            if (this.state_) {
                this.state_.layer = null;
                this.state_ = null;
            }
            _super.prototype.disposeInternal.call(this);
        };
        return BaseLayer;
    }(BaseObject));

    /**
     * @module ol/source/State
     */
    /**
     * @enum {string}
     * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
     */
    var SourceState = {
        UNDEFINED: 'undefined',
        LOADING: 'loading',
        READY: 'ready',
        ERROR: 'error',
    };

    var __extends$d = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {function(import("../PluggableMap.js").FrameState):HTMLElement} RenderFunction
     */
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
     * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
     * construction.
     * @property {import("../PluggableMap.js").default} [map] Map.
     * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
     * HTML element. Will overwrite the default rendering for the layer.
     */
    /**
     * @typedef {Object} State
     * @property {import("./Layer.js").default} layer
     * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
     * @property {import("../source/State.js").default} sourceState
     * @property {boolean} visible
     * @property {boolean} managed
     * @property {import("../extent.js").Extent} [extent]
     * @property {number} zIndex
     * @property {number} maxResolution
     * @property {number} minResolution
     * @property {number} minZoom
     * @property {number} maxZoom
     */
    /**
     * @classdesc
     * Base class from which all layer types are derived. This should only be instantiated
     * in the case where a custom layer is be added to the map with a custom `render` function.
     * Such a function can be specified in the `options` object, and is expected to return an HTML element.
     *
     * A visual representation of raster or vector map data.
     * Layers group together those properties that pertain to how the data is to be
     * displayed, irrespective of the source of that data.
     *
     * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
     * like {@link module:ol/interaction/Select~Select} use unmanaged layers
     * internally. These unmanaged layers are associated with the map using
     * {@link module:ol/layer/Layer~Layer#setMap} instead.
     *
     * A generic `change` event is fired when the state of the source changes.
     *
     * Please note that for performance reasons several layers might get rendered to
     * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to
     * give false positives. To avoid this, apply different `className` properties to the
     * layers at creation time.
     *
     * @fires import("../render/Event.js").RenderEvent#prerender
     * @fires import("../render/Event.js").RenderEvent#postrender
     *
     * @template {import("../source/Source.js").default} SourceType
     * @api
     */
    var Layer = /** @class */ (function (_super) {
        __extends$d(Layer, _super);
        /**
         * @param {Options} options Layer options.
         */
        function Layer(options) {
            var _this = this;
            var baseOptions = assign({}, options);
            delete baseOptions.source;
            _this = _super.call(this, baseOptions) || this;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            _this.mapPrecomposeKey_ = null;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            _this.mapRenderKey_ = null;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            _this.sourceChangeKey_ = null;
            /**
             * @private
             * @type {import("../renderer/Layer.js").default}
             */
            _this.renderer_ = null;
            // Overwrite default render method with a custom one
            if (options.render) {
                _this.render = options.render;
            }
            if (options.map) {
                _this.setMap(options.map);
            }
            _this.addEventListener(getChangeEventType(LayerProperty.SOURCE), _this.handleSourcePropertyChange_);
            var source = options.source
                ? /** @type {SourceType} */ (options.source)
                : null;
            _this.setSource(source);
            return _this;
        }
        /**
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        Layer.prototype.getLayersArray = function (opt_array) {
            var array = opt_array ? opt_array : [];
            array.push(this);
            return array;
        };
        /**
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        Layer.prototype.getLayerStatesArray = function (opt_states) {
            var states = opt_states ? opt_states : [];
            states.push(this.getLayerState());
            return states;
        };
        /**
         * Get the layer source.
         * @return {SourceType} The layer source (or `null` if not yet set).
         * @observable
         * @api
         */
        Layer.prototype.getSource = function () {
            return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;
        };
        /**
         * @return {import("../source/State.js").default} Source state.
         */
        Layer.prototype.getSourceState = function () {
            var source = this.getSource();
            return !source ? SourceState.UNDEFINED : source.getState();
        };
        /**
         * @private
         */
        Layer.prototype.handleSourceChange_ = function () {
            this.changed();
        };
        /**
         * @private
         */
        Layer.prototype.handleSourcePropertyChange_ = function () {
            if (this.sourceChangeKey_) {
                unlistenByKey(this.sourceChangeKey_);
                this.sourceChangeKey_ = null;
            }
            var source = this.getSource();
            if (source) {
                this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);
            }
            this.changed();
        };
        /**
         * @param {import("../pixel").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
         * an array of features.
         */
        Layer.prototype.getFeatures = function (pixel) {
            return this.renderer_.getFeatures(pixel);
        };
        /**
         * In charge to manage the rendering of the layer. One layer type is
         * bounded with one layer renderer.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target which the renderer may (but need not) use
         * for rendering its content.
         * @return {HTMLElement} The rendered element.
         */
        Layer.prototype.render = function (frameState, target) {
            var layerRenderer = this.getRenderer();
            if (layerRenderer.prepareFrame(frameState)) {
                return layerRenderer.renderFrame(frameState, target);
            }
        };
        /**
         * Sets the layer to be rendered on top of other layers on a map. The map will
         * not manage this layer in its layers collection, and the callback in
         * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
         * is useful for temporary layers. To remove an unmanaged layer from the map,
         * use `#setMap(null)`.
         *
         * To add the layer to a map and have it managed by the map, use
         * {@link module:ol/Map#addLayer} instead.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        Layer.prototype.setMap = function (map) {
            if (this.mapPrecomposeKey_) {
                unlistenByKey(this.mapPrecomposeKey_);
                this.mapPrecomposeKey_ = null;
            }
            if (!map) {
                this.changed();
            }
            if (this.mapRenderKey_) {
                unlistenByKey(this.mapRenderKey_);
                this.mapRenderKey_ = null;
            }
            if (map) {
                this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {
                    var renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
                    var layerStatesArray = renderEvent.frameState.layerStatesArray;
                    var layerState = this.getLayerState(false);
                    // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.
                    assert(!layerStatesArray.some(function (arrayLayerState) {
                        return arrayLayerState.layer === layerState.layer;
                    }), 67);
                    layerStatesArray.push(layerState);
                }, this);
                this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);
                this.changed();
            }
        };
        /**
         * Set the layer source.
         * @param {SourceType} source The layer source.
         * @observable
         * @api
         */
        Layer.prototype.setSource = function (source) {
            this.set(LayerProperty.SOURCE, source);
        };
        /**
         * Get the renderer for this layer.
         * @return {import("../renderer/Layer.js").default} The layer renderer.
         */
        Layer.prototype.getRenderer = function () {
            if (!this.renderer_) {
                this.renderer_ = this.createRenderer();
            }
            return this.renderer_;
        };
        /**
         * @return {boolean} The layer has a renderer.
         */
        Layer.prototype.hasRenderer = function () {
            return !!this.renderer_;
        };
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         * @protected
         */
        Layer.prototype.createRenderer = function () {
            return null;
        };
        /**
         * Clean up.
         */
        Layer.prototype.disposeInternal = function () {
            this.setSource(null);
            _super.prototype.disposeInternal.call(this);
        };
        return Layer;
    }(BaseLayer));
    /**
     * Return `true` if the layer is visible and if the provided view state
     * has resolution and zoom levels that are in range of the layer's min/max.
     * @param {State} layerState Layer state.
     * @param {import("../View.js").State} viewState View state.
     * @return {boolean} The layer is visible at the given view state.
     */
    function inView(layerState, viewState) {
        if (!layerState.visible) {
            return false;
        }
        var resolution = viewState.resolution;
        if (resolution < layerState.minResolution ||
            resolution >= layerState.maxResolution) {
            return false;
        }
        var zoom = viewState.zoom;
        return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
    }

    var __extends$e = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @template {import("../layer/Layer.js").default} LayerType
     */
    var LayerRenderer = /** @class */ (function (_super) {
        __extends$e(LayerRenderer, _super);
        /**
         * @param {LayerType} layer Layer.
         */
        function LayerRenderer(layer) {
            var _this = _super.call(this) || this;
            /** @private */
            _this.boundHandleImageChange_ = _this.handleImageChange_.bind(_this);
            /**
             * @protected
             * @type {LayerType}
             */
            _this.layer_ = layer;
            return _this;
        }
        /**
         * Asynchronous layer level hit detection.
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
         * an array of features.
         */
        LayerRenderer.prototype.getFeatures = function (pixel) {
            return abstract();
        };
        /**
         * Determine whether render should be called.
         * @abstract
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        LayerRenderer.prototype.prepareFrame = function (frameState) {
            return abstract();
        };
        /**
         * Render the layer.
         * @abstract
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        LayerRenderer.prototype.renderFrame = function (frameState, target) {
            return abstract();
        };
        /**
         * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @param {number} zoom Zoom level.
         * @param {import("../Tile.js").default} tile Tile.
         * @return {boolean|void} If `false`, the tile will not be considered loaded.
         */
        LayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
            if (!tiles[zoom]) {
                tiles[zoom] = {};
            }
            tiles[zoom][tile.tileCoord.toString()] = tile;
            return undefined;
        };
        /**
         * Create a function that adds loaded tiles to the tile lookup.
         * @param {import("../source/Tile.js").default} source Tile source.
         * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
         * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
         *     called with a zoom level and a tile range to add loaded tiles to the lookup.
         * @protected
         */
        LayerRenderer.prototype.createLoadedTileFinder = function (source, projection, tiles) {
            return (
            /**
             * @param {number} zoom Zoom level.
             * @param {import("../TileRange.js").default} tileRange Tile range.
             * @return {boolean} The tile range is fully loaded.
             * @this {LayerRenderer}
             */
            function (zoom, tileRange) {
                var callback = this.loadedTileCallback.bind(this, tiles, zoom);
                return source.forEachLoadedTile(projection, zoom, tileRange, callback);
            }.bind(this));
        };
        /**
         * @abstract
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default): T} callback Feature callback.
         * @param {Array<import("../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
         * @return {T|void} Callback result.
         * @template T
         */
        LayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) { };
        /**
         * @abstract
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
         *    location, null will be returned.  If there is data, but pixel values cannot be
         *    returned, and empty array will be returned.
         */
        LayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
            return abstract();
        };
        /**
         * @return {LayerType} Layer.
         */
        LayerRenderer.prototype.getLayer = function () {
            return this.layer_;
        };
        /**
         * Perform action necessary to get the layer rendered after new fonts have loaded
         * @abstract
         */
        LayerRenderer.prototype.handleFontsChanged = function () { };
        /**
         * Handle changes in image state.
         * @param {import("../events/Event.js").default} event Image change event.
         * @private
         */
        LayerRenderer.prototype.handleImageChange_ = function (event) {
            var image = /** @type {import("../Image.js").default} */ (event.target);
            if (image.getState() === ImageState.LOADED) {
                this.renderIfReadyAndVisible();
            }
        };
        /**
         * Load the image if not already loaded, and register the image change
         * listener if needed.
         * @param {import("../ImageBase.js").default} image Image.
         * @return {boolean} `true` if the image is already loaded, `false` otherwise.
         * @protected
         */
        LayerRenderer.prototype.loadImage = function (image) {
            var imageState = image.getState();
            if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
                image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);
            }
            if (imageState == ImageState.IDLE) {
                image.load();
                imageState = image.getState();
            }
            return imageState == ImageState.LOADED;
        };
        /**
         * @protected
         */
        LayerRenderer.prototype.renderIfReadyAndVisible = function () {
            var layer = this.getLayer();
            if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {
                layer.changed();
            }
        };
        return LayerRenderer;
    }(Observable));

    /**
     * @module ol/render/Event
     */
    var __extends$f = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var RenderEvent = /** @class */ (function (_super) {
        __extends$f(RenderEvent, _super);
        /**
         * @param {import("./EventType.js").default} type Type.
         * @param {import("../transform.js").Transform=} opt_inversePixelTransform Transform for
         *     CSS pixels to rendered pixels.
         * @param {import("../PluggableMap.js").FrameState=} opt_frameState Frame state.
         * @param {?CanvasRenderingContext2D=} opt_context Context.
         */
        function RenderEvent(type, opt_inversePixelTransform, opt_frameState, opt_context) {
            var _this = _super.call(this, type) || this;
            /**
             * Transform from CSS pixels (relative to the top-left corner of the map viewport)
             * to rendered pixels on this event's `context`.
             * @type {import("../transform.js").Transform|undefined}
             * @api
             */
            _this.inversePixelTransform = opt_inversePixelTransform;
            /**
             * An object representing the current render frame state.
             * @type {import("../PluggableMap.js").FrameState|undefined}
             * @api
             */
            _this.frameState = opt_frameState;
            /**
             * Canvas context. Not available when the event is dispatched by the map. Only available
             * when a Canvas renderer is used, null otherwise.
             * @type {CanvasRenderingContext2D|null|undefined}
             * @api
             */
            _this.context = opt_context;
            return _this;
        }
        return RenderEvent;
    }(BaseEvent));

    var __extends$g = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @abstract
     * @template {import("../../layer/Layer.js").default} LayerType
     */
    var CanvasLayerRenderer = /** @class */ (function (_super) {
        __extends$g(CanvasLayerRenderer, _super);
        /**
         * @param {LayerType} layer Layer.
         */
        function CanvasLayerRenderer(layer) {
            var _this = _super.call(this, layer) || this;
            /**
             * @protected
             * @type {HTMLElement}
             */
            _this.container = null;
            /**
             * @protected
             * @type {number}
             */
            _this.renderedResolution;
            /**
             * A temporary transform.  The values in this transform should only be used in a
             * function that sets the values.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            _this.tempTransform = create();
            /**
             * The transform for rendered pixels to viewport CSS pixels.  This transform must
             * be set when rendering a frame and may be used by other functions after rendering.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            _this.pixelTransform = create();
            /**
             * The transform for viewport CSS pixels to rendered pixels.  This transform must
             * be set when rendering a frame and may be used by other functions after rendering.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            _this.inversePixelTransform = create();
            /**
             * @type {CanvasRenderingContext2D}
             */
            _this.context = null;
            /**
             * @type {boolean}
             */
            _this.containerReused = false;
            return _this;
        }
        /**
         * Get a rendering container from an existing target, if compatible.
         * @param {HTMLElement} target Potential render target.
         * @param {string} transform CSS Transform.
         * @param {number} opacity Opacity.
         */
        CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {
            var layerClassName = this.getLayer().getClassName();
            var container, context;
            if (target &&
                target.style.opacity === '' &&
                target.className === layerClassName) {
                var canvas = target.firstElementChild;
                if (canvas instanceof HTMLCanvasElement) {
                    context = canvas.getContext('2d');
                }
            }
            if (context &&
                (context.canvas.width === 0 ||
                    context.canvas.style.transform === transform)) {
                // Container of the previous layer renderer can be used.
                this.container = target;
                this.context = context;
                this.containerReused = true;
            }
            else if (this.containerReused) {
                // Previously reused container cannot be used any more.
                this.container = null;
                this.context = null;
                this.containerReused = false;
            }
            if (!this.container) {
                container = document.createElement('div');
                container.className = layerClassName;
                var style = container.style;
                style.position = 'absolute';
                style.width = '100%';
                style.height = '100%';
                context = createCanvasContext2D();
                var canvas = context.canvas;
                container.appendChild(canvas);
                style = canvas.style;
                style.position = 'absolute';
                style.left = '0';
                style.transformOrigin = 'top left';
                this.container = container;
                this.context = context;
            }
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../extent.js").Extent} extent Clip extent.
         * @protected
         */
        CanvasLayerRenderer.prototype.clip = function (context, frameState, extent) {
            var pixelRatio = frameState.pixelRatio;
            var halfWidth = (frameState.size[0] * pixelRatio) / 2;
            var halfHeight = (frameState.size[1] * pixelRatio) / 2;
            var rotation = frameState.viewState.rotation;
            var topLeft = getTopLeft(extent);
            var topRight = getTopRight(extent);
            var bottomRight = getBottomRight(extent);
            var bottomLeft = getBottomLeft(extent);
            apply(frameState.coordinateToPixelTransform, topLeft);
            apply(frameState.coordinateToPixelTransform, topRight);
            apply(frameState.coordinateToPixelTransform, bottomRight);
            apply(frameState.coordinateToPixelTransform, bottomLeft);
            context.save();
            rotateAtOffset(context, -rotation, halfWidth, halfHeight);
            context.beginPath();
            context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
            context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
            context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
            context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
            context.clip();
            rotateAtOffset(context, rotation, halfWidth, halfHeight);
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../extent.js").Extent} extent Clip extent.
         * @protected
         */
        CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {
            var topLeft = getTopLeft(extent);
            var topRight = getTopRight(extent);
            var bottomRight = getBottomRight(extent);
            var bottomLeft = getBottomLeft(extent);
            apply(frameState.coordinateToPixelTransform, topLeft);
            apply(frameState.coordinateToPixelTransform, topRight);
            apply(frameState.coordinateToPixelTransform, bottomRight);
            apply(frameState.coordinateToPixelTransform, bottomLeft);
            var inverted = this.inversePixelTransform;
            apply(inverted, topLeft);
            apply(inverted, topRight);
            apply(inverted, bottomRight);
            apply(inverted, bottomLeft);
            context.save();
            context.beginPath();
            context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
            context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
            context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
            context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
            context.clip();
        };
        /**
         * @param {import("../../render/EventType.js").default} type Event type.
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @private
         */
        CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {
            var layer = this.getLayer();
            if (layer.hasListener(type)) {
                var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);
                layer.dispatchEvent(event_1);
            }
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        CanvasLayerRenderer.prototype.preRender = function (context, frameState) {
            this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
        };
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        CanvasLayerRenderer.prototype.postRender = function (context, frameState) {
            this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
        };
        /**
         * Creates a transform for rendering to an element that will be rotated after rendering.
         * @param {import("../../coordinate.js").Coordinate} center Center.
         * @param {number} resolution Resolution.
         * @param {number} rotation Rotation.
         * @param {number} pixelRatio Pixel ratio.
         * @param {number} width Width of the rendered element (in pixels).
         * @param {number} height Height of the rendered element (in pixels).
         * @param {number} offsetX Offset on the x-axis in view coordinates.
         * @protected
         * @return {!import("../../transform.js").Transform} Transform.
         */
        CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {
            var dx1 = width / 2;
            var dy1 = height / 2;
            var sx = pixelRatio / resolution;
            var sy = -sx;
            var dx2 = -center[0] + offsetX;
            var dy2 = -center[1];
            return compose(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);
        };
        /**
         * @param {import("../../pixel.js").Pixel} pixel Pixel.
         * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
         *    location, null will be returned.  If there is data, but pixel values cannot be
         *    returned, and empty array will be returned.
         */
        CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
            var renderPixel = apply(this.inversePixelTransform, pixel.slice());
            var context = this.context;
            var data;
            try {
                var x = Math.round(renderPixel[0]);
                var y = Math.round(renderPixel[1]);
                var newCanvas = document.createElement('canvas');
                var newContext = newCanvas.getContext('2d');
                newCanvas.width = 1;
                newCanvas.height = 1;
                newContext.clearRect(0, 0, 1, 1);
                newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);
                data = newContext.getImageData(0, 0, 1, 1).data;
            }
            catch (err) {
                if (err.name === 'SecurityError') {
                    // tainted canvas, we assume there is data at the given pixel (although there might not be)
                    return new Uint8Array();
                }
                return data;
            }
            if (data[3] === 0) {
                return null;
            }
            return data;
        };
        return CanvasLayerRenderer;
    }(LayerRenderer));

    /**
     * @module ol/ViewHint
     */
    /**
     * @enum {number}
     */
    var ViewHint = {
        ANIMATING: 0,
        INTERACTING: 1,
    };

    /**
     * @module ol/style/IconImageCache
     */
    /**
     * @classdesc
     * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
     */
    var IconImageCache = /** @class */ (function () {
        function IconImageCache() {
            /**
             * @type {!Object<string, import("./IconImage.js").default>}
             * @private
             */
            this.cache_ = {};
            /**
             * @type {number}
             * @private
             */
            this.cacheSize_ = 0;
            /**
             * @type {number}
             * @private
             */
            this.maxCacheSize_ = 32;
        }
        /**
         * FIXME empty description for jsdoc
         */
        IconImageCache.prototype.clear = function () {
            this.cache_ = {};
            this.cacheSize_ = 0;
        };
        /**
         * @return {boolean} Can expire cache.
         */
        IconImageCache.prototype.canExpireCache = function () {
            return this.cacheSize_ > this.maxCacheSize_;
        };
        /**
         * FIXME empty description for jsdoc
         */
        IconImageCache.prototype.expire = function () {
            if (this.canExpireCache()) {
                var i = 0;
                for (var key in this.cache_) {
                    var iconImage = this.cache_[key];
                    if ((i++ & 3) === 0 && !iconImage.hasListener()) {
                        delete this.cache_[key];
                        --this.cacheSize_;
                    }
                }
            }
        };
        /**
         * @param {string} src Src.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../color.js").Color} color Color.
         * @return {import("./IconImage.js").default} Icon image.
         */
        IconImageCache.prototype.get = function (src, crossOrigin, color) {
            var key = getKey(src, crossOrigin, color);
            return key in this.cache_ ? this.cache_[key] : null;
        };
        /**
         * @param {string} src Src.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../color.js").Color} color Color.
         * @param {import("./IconImage.js").default} iconImage Icon image.
         */
        IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {
            var key = getKey(src, crossOrigin, color);
            this.cache_[key] = iconImage;
            ++this.cacheSize_;
        };
        /**
         * Set the cache size of the icon cache. Default is `32`. Change this value when
         * your map uses more than 32 different icon images and you are not caching icon
         * styles on the application level.
         * @param {number} maxCacheSize Cache max size.
         * @api
         */
        IconImageCache.prototype.setSize = function (maxCacheSize) {
            this.maxCacheSize_ = maxCacheSize;
            this.expire();
        };
        return IconImageCache;
    }());
    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color} color Color.
     * @return {string} Cache key.
     */
    function getKey(src, crossOrigin, color) {
        var colorString = color ? asString(color) : 'null';
        return crossOrigin + ':' + src + ':' + colorString;
    }
    /**
     * The {@link module:ol/style/IconImageCache~IconImageCache} for
     * {@link module:ol/style/Icon~Icon} images.
     * @api
     */
    var shared = new IconImageCache();

    var __extends$h = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @abstract
     */
    var ImageBase = /** @class */ (function (_super) {
        __extends$h(ImageBase, _super);
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number|undefined} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./ImageState.js").default} state State.
         */
        function ImageBase(extent, resolution, pixelRatio, state) {
            var _this = _super.call(this) || this;
            /**
             * @protected
             * @type {import("./extent.js").Extent}
             */
            _this.extent = extent;
            /**
             * @private
             * @type {number}
             */
            _this.pixelRatio_ = pixelRatio;
            /**
             * @protected
             * @type {number|undefined}
             */
            _this.resolution = resolution;
            /**
             * @protected
             * @type {import("./ImageState.js").default}
             */
            _this.state = state;
            return _this;
        }
        /**
         * @protected
         */
        ImageBase.prototype.changed = function () {
            this.dispatchEvent(EventType.CHANGE);
        };
        /**
         * @return {import("./extent.js").Extent} Extent.
         */
        ImageBase.prototype.getExtent = function () {
            return this.extent;
        };
        /**
         * @abstract
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         */
        ImageBase.prototype.getImage = function () {
            return abstract();
        };
        /**
         * @return {number} PixelRatio.
         */
        ImageBase.prototype.getPixelRatio = function () {
            return this.pixelRatio_;
        };
        /**
         * @return {number} Resolution.
         */
        ImageBase.prototype.getResolution = function () {
            return /** @type {number} */ (this.resolution);
        };
        /**
         * @return {import("./ImageState.js").default} State.
         */
        ImageBase.prototype.getState = function () {
            return this.state;
        };
        /**
         * Load not yet loaded URI.
         * @abstract
         */
        ImageBase.prototype.load = function () {
            abstract();
        };
        return ImageBase;
    }(Target));

    var __extends$i = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that takes an {@link module:ol/Image~Image} for the image and a
     * `{string}` for the src as arguments. It is supposed to make it so the
     * underlying image {@link module:ol/Image~Image#getImage} is assigned the
     * content specified by the src. If not specified, the default is
     *
     *     function(image, src) {
     *       image.getImage().src = src;
     *     }
     *
     * Providing a custom `imageLoadFunction` can be useful to load images with
     * post requests or - in general - through XHR requests, where the src of the
     * image element would be set to a data URI when the content is loaded.
     *
     * @typedef {function(ImageWrapper, string): void} LoadFunction
     * @api
     */
    var ImageWrapper = /** @class */ (function (_super) {
        __extends$i(ImageWrapper, _super);
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number|undefined} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {string} src Image source URI.
         * @param {?string} crossOrigin Cross origin.
         * @param {LoadFunction} imageLoadFunction Image load function.
         */
        function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
            var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;
            /**
             * @private
             * @type {string}
             */
            _this.src_ = src;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
             */
            _this.image_ = new Image();
            if (crossOrigin !== null) {
                _this.image_.crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {?function():void}
             */
            _this.unlisten_ = null;
            /**
             * @protected
             * @type {import("./ImageState.js").default}
             */
            _this.state = ImageState.IDLE;
            /**
             * @private
             * @type {LoadFunction}
             */
            _this.imageLoadFunction_ = imageLoadFunction;
            return _this;
        }
        /**
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @api
         */
        ImageWrapper.prototype.getImage = function () {
            return this.image_;
        };
        /**
         * Tracks loading or read errors.
         *
         * @private
         */
        ImageWrapper.prototype.handleImageError_ = function () {
            this.state = ImageState.ERROR;
            this.unlistenImage_();
            this.changed();
        };
        /**
         * Tracks successful image load.
         *
         * @private
         */
        ImageWrapper.prototype.handleImageLoad_ = function () {
            if (this.resolution === undefined) {
                this.resolution = getHeight(this.extent) / this.image_.height;
            }
            this.state = ImageState.LOADED;
            this.unlistenImage_();
            this.changed();
        };
        /**
         * Load the image or retry if loading previously failed.
         * Loading is taken care of by the tile queue, and calling this method is
         * only needed for preloading or for reloading in case of an error.
         * @api
         */
        ImageWrapper.prototype.load = function () {
            if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {
                this.state = ImageState.LOADING;
                this.changed();
                this.imageLoadFunction_(this, this.src_);
                this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        };
        /**
         * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
         */
        ImageWrapper.prototype.setImage = function (image) {
            this.image_ = image;
        };
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        ImageWrapper.prototype.unlistenImage_ = function () {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        };
        return ImageWrapper;
    }(ImageBase));
    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
     * @param {function():any} loadHandler Load callback function.
     * @param {function():any} errorHandler Error callback function.
     * @return {function():void} Callback to stop listening.
     */
    function listenImage(image, loadHandler, errorHandler) {
        var img = /** @type {HTMLImageElement} */ (image);
        if (img.src && IMAGE_DECODE) {
            var promise = img.decode();
            var listening_1 = true;
            var unlisten = function () {
                listening_1 = false;
            };
            promise
                .then(function () {
                if (listening_1) {
                    loadHandler();
                }
            })
                .catch(function (error) {
                if (listening_1) {
                    // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:
                    //        https://bugs.webkit.org/show_bug.cgi?id=198527
                    if (error.name === 'EncodingError' &&
                        error.message === 'Invalid image type.') {
                        loadHandler();
                    }
                    else {
                        errorHandler();
                    }
                }
            });
            return unlisten;
        }
        var listenerKeys = [
            listenOnce(img, EventType.LOAD, loadHandler),
            listenOnce(img, EventType.ERROR, errorHandler),
        ];
        return function unlisten() {
            listenerKeys.forEach(unlistenByKey);
        };
    }

    var __extends$j = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that returns a string or an array of strings representing source
     * attributions.
     *
     * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
     */
    /**
     * A type that can be used to provide attribution information for data sources.
     *
     * It represents either
     * * a simple string (e.g. `'© Acme Inc.'`)
     * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
     * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
     *
     * @typedef {string|Array<string>|Attribution} AttributionLike
     */
    /**
     * @typedef {Object} Options
     * @property {AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
     * @property {import("./State.js").default} [state='ready']
     * @property {boolean} [wrapX=false]
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for {@link module:ol/layer/Layer~Layer} sources.
     *
     * A generic `change` event is triggered when the state of the source changes.
     * @abstract
     * @api
     */
    var Source = /** @class */ (function (_super) {
        __extends$j(Source, _super);
        /**
         * @param {Options} options Source options.
         */
        function Source(options) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {import("../proj/Projection.js").default}
             */
            _this.projection_ = get$2(options.projection);
            /**
             * @private
             * @type {?Attribution}
             */
            _this.attributions_ = adaptAttributions(options.attributions);
            /**
             * @private
             * @type {boolean}
             */
            _this.attributionsCollapsible_ =
                options.attributionsCollapsible !== undefined
                    ? options.attributionsCollapsible
                    : true;
            /**
             * This source is currently loading data. Sources that defer loading to the
             * map's tile queue never set this to `true`.
             * @type {boolean}
             */
            _this.loading = false;
            /**
             * @private
             * @type {import("./State.js").default}
             */
            _this.state_ =
                options.state !== undefined ? options.state : SourceState.READY;
            /**
             * @private
             * @type {boolean}
             */
            _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;
            return _this;
        }
        /**
         * Get the attribution function for the source.
         * @return {?Attribution} Attribution function.
         */
        Source.prototype.getAttributions = function () {
            return this.attributions_;
        };
        /**
         * @return {boolean} Attributions are collapsible.
         */
        Source.prototype.getAttributionsCollapsible = function () {
            return this.attributionsCollapsible_;
        };
        /**
         * Get the projection of the source.
         * @return {import("../proj/Projection.js").default} Projection.
         * @api
         */
        Source.prototype.getProjection = function () {
            return this.projection_;
        };
        /**
         * @abstract
         * @return {Array<number>|undefined} Resolutions.
         */
        Source.prototype.getResolutions = function () {
            return abstract();
        };
        /**
         * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
         * @return {import("./State.js").default} State.
         * @api
         */
        Source.prototype.getState = function () {
            return this.state_;
        };
        /**
         * @return {boolean|undefined} Wrap X.
         */
        Source.prototype.getWrapX = function () {
            return this.wrapX_;
        };
        /**
         * @return {Object|undefined} Context options.
         */
        Source.prototype.getContextOptions = function () {
            return undefined;
        };
        /**
         * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
         * @api
         */
        Source.prototype.refresh = function () {
            this.changed();
        };
        /**
         * Set the attributions of the source.
         * @param {AttributionLike|undefined} attributions Attributions.
         *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
         *     or `undefined`.
         * @api
         */
        Source.prototype.setAttributions = function (attributions) {
            this.attributions_ = adaptAttributions(attributions);
            this.changed();
        };
        /**
         * Set the state of the source.
         * @param {import("./State.js").default} state State.
         */
        Source.prototype.setState = function (state) {
            this.state_ = state;
            this.changed();
        };
        return Source;
    }(BaseObject));
    /**
     * Turns the attributions option into an attributions function.
     * @param {AttributionLike|undefined} attributionLike The attribution option.
     * @return {?Attribution} An attribution function (or null).
     */
    function adaptAttributions(attributionLike) {
        if (!attributionLike) {
            return null;
        }
        if (Array.isArray(attributionLike)) {
            return function (frameState) {
                return attributionLike;
            };
        }
        if (typeof attributionLike === 'function') {
            return attributionLike;
        }
        return function (frameState) {
            return [attributionLike];
        };
    }

    /**
     * @module ol/render
     */
    /**
     * @param {import("./PluggableMap.js").FrameState} frameState Frame state.
     * @param {?} declutterTree Declutter tree.
     * @returns {?} Declutter tree.
     */
    function renderDeclutterItems(frameState, declutterTree) {
        if (declutterTree) {
            declutterTree.clear();
        }
        var items = frameState.declutterItems;
        for (var z = items.length - 1; z >= 0; --z) {
            var item = items[z];
            var zIndexItems = item.items;
            for (var i = 0, ii = zIndexItems.length; i < ii; i += 3) {
                declutterTree = zIndexItems[i].renderDeclutter(zIndexItems[i + 1], zIndexItems[i + 2], item.opacity, declutterTree);
            }
        }
        items.length = 0;
        return declutterTree;
    }

    /**
     * @module ol/TileState
     */
    /**
     * @enum {number}
     */
    var TileState = {
        IDLE: 0,
        LOADING: 1,
        LOADED: 2,
        /**
         * Indicates that tile loading failed
         * @type {number}
         */
        ERROR: 3,
        EMPTY: 4,
    };

    /**
     * @module ol/easing
     */
    /**
     * Start slow and speed up.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function easeIn(t) {
        return Math.pow(t, 3);
    }
    /**
     * Start fast and slow down.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function easeOut(t) {
        return 1 - easeIn(1 - t);
    }
    /**
     * Start slow, speed up, and then slow down again.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function inAndOut(t) {
        return 3 * t * t - 2 * t * t * t;
    }
    /**
     * Maintain a constant speed over time.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function linear(t) {
        return t;
    }

    var __extends$k = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that takes an {@link module:ol/Tile} for the tile and a
     * `{string}` for the url as arguments. The default is
     * ```js
     * source.setTileLoadFunction(function(tile, src) {
     *   tile.getImage().src = src;
     * });
     * ```
     * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
     * error handling:
     *
     * ```js
     * import TileState from 'ol/TileState';
     *
     * source.setTileLoadFunction(function(tile, src) {
     *   var xhr = new XMLHttpRequest();
     *   xhr.responseType = 'blob';
     *   xhr.addEventListener('loadend', function (evt) {
     *     var data = this.response;
     *     if (data !== undefined) {
     *       tile.getImage().src = URL.createObjectURL(data);
     *     } else {
     *       tile.setState(TileState.ERROR);
     *     }
     *   });
     *   xhr.addEventListener('error', function () {
     *     tile.setState(TileState.ERROR);
     *   });
     *   xhr.open('GET', src);
     *   xhr.send();
     * });
     * ```
     *
     * @typedef {function(Tile, string): void} LoadFunction
     * @api
     */
    /**
     * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
     * the url that provides a tile for a given tile coordinate.
     *
     * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
     * coordinate, a `{number}` representing the pixel ratio and a
     * {@link module:ol/proj/Projection} for the projection  as arguments
     * and returns a `{string}` representing the tile URL, or undefined if no tile
     * should be requested for the passed tile coordinate.
     *
     * @typedef {function(import("./tilecoord.js").TileCoord, number,
     *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
     * @api
     */
    /**
     * @typedef {Object} Options
     * @property {number} [transition=250] A duration for tile opacity
     * transitions in milliseconds. A duration of 0 disables the opacity transition.
     * @api
     */
    /**
     * @classdesc
     * Base class for tiles.
     *
     * @abstract
     */
    var Tile = /** @class */ (function (_super) {
        __extends$k(Tile, _super);
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {Options=} opt_options Tile options.
         */
        function Tile(tileCoord, state, opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @type {import("./tilecoord.js").TileCoord}
             */
            _this.tileCoord = tileCoord;
            /**
             * @protected
             * @type {import("./TileState.js").default}
             */
            _this.state = state;
            /**
             * An "interim" tile for this tile. The interim tile may be used while this
             * one is loading, for "smooth" transitions when changing params/dimensions
             * on the source.
             * @type {Tile}
             */
            _this.interimTile = null;
            /**
             * The tile is available at the highest possible resolution. Subclasses can
             * set this to `false` initially. Tile load listeners will not be
             * unregistered before this is set to `true` and a `#changed()` is called.
             * @type {boolean}
             */
            _this.hifi = true;
            /**
             * A key assigned to the tile. This is used by the tile source to determine
             * if this tile can effectively be used, or if a new tile should be created
             * and this one be used as an interim tile for this new tile.
             * @type {string}
             */
            _this.key = '';
            /**
             * The duration for the opacity transition.
             * @type {number}
             */
            _this.transition_ =
                options.transition === undefined ? 250 : options.transition;
            /**
             * Lookup of start times for rendering transitions.  If the start time is
             * equal to -1, the transition is complete.
             * @type {Object<string, number>}
             */
            _this.transitionStarts_ = {};
            return _this;
        }
        /**
         * @protected
         */
        Tile.prototype.changed = function () {
            this.dispatchEvent(EventType.CHANGE);
        };
        /**
         * Called by the tile cache when the tile is removed from the cache due to expiry
         */
        Tile.prototype.release = function () { };
        /**
         * @return {string} Key.
         */
        Tile.prototype.getKey = function () {
            return this.key + '/' + this.tileCoord;
        };
        /**
         * Get the interim tile most suitable for rendering using the chain of interim
         * tiles. This corresponds to the  most recent tile that has been loaded, if no
         * such tile exists, the original tile is returned.
         * @return {!Tile} Best tile for rendering.
         */
        Tile.prototype.getInterimTile = function () {
            if (!this.interimTile) {
                //empty chain
                return this;
            }
            var tile = this.interimTile;
            // find the first loaded tile and return it. Since the chain is sorted in
            // decreasing order of creation time, there is no need to search the remainder
            // of the list (all those tiles correspond to older requests and will be
            // cleaned up by refreshInterimChain)
            do {
                if (tile.getState() == TileState.LOADED) {
                    // Show tile immediately instead of fading it in after loading, because
                    // the interim tile is in place already
                    this.transition_ = 0;
                    return tile;
                }
                tile = tile.interimTile;
            } while (tile);
            // we can not find a better tile
            return this;
        };
        /**
         * Goes through the chain of interim tiles and discards sections of the chain
         * that are no longer relevant.
         */
        Tile.prototype.refreshInterimChain = function () {
            if (!this.interimTile) {
                return;
            }
            var tile = this.interimTile;
            var prev = /** @type {Tile} */ (this);
            do {
                if (tile.getState() == TileState.LOADED) {
                    //we have a loaded tile, we can discard the rest of the list
                    //we would could abort any LOADING tile request
                    //older than this tile (i.e. any LOADING tile following this entry in the chain)
                    tile.interimTile = null;
                    break;
                }
                else if (tile.getState() == TileState.LOADING) {
                    //keep this LOADING tile any loaded tiles later in the chain are
                    //older than this tile, so we're still interested in the request
                    prev = tile;
                }
                else if (tile.getState() == TileState.IDLE) {
                    //the head of the list is the most current tile, we don't need
                    //to start any other requests for this chain
                    prev.interimTile = tile.interimTile;
                }
                else {
                    prev = tile;
                }
                tile = prev.interimTile;
            } while (tile);
        };
        /**
         * Get the tile coordinate for this tile.
         * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
         * @api
         */
        Tile.prototype.getTileCoord = function () {
            return this.tileCoord;
        };
        /**
         * @return {import("./TileState.js").default} State.
         */
        Tile.prototype.getState = function () {
            return this.state;
        };
        /**
         * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
         * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
         * when the tile cannot be loaded. Otherwise the tile cannot be removed from
         * the tile queue and will block other requests.
         * @param {import("./TileState.js").default} state State.
         * @api
         */
        Tile.prototype.setState = function (state) {
            if (this.state !== TileState.ERROR && this.state > state) {
                throw new Error('Tile load sequence violation');
            }
            this.state = state;
            this.changed();
        };
        /**
         * Load the image or retry if loading previously failed.
         * Loading is taken care of by the tile queue, and calling this method is
         * only needed for preloading or for reloading in case of an error.
         * @abstract
         * @api
         */
        Tile.prototype.load = function () {
            abstract();
        };
        /**
         * Get the alpha value for rendering.
         * @param {string} id An id for the renderer.
         * @param {number} time The render frame time.
         * @return {number} A number between 0 and 1.
         */
        Tile.prototype.getAlpha = function (id, time) {
            if (!this.transition_) {
                return 1;
            }
            var start = this.transitionStarts_[id];
            if (!start) {
                start = time;
                this.transitionStarts_[id] = start;
            }
            else if (start === -1) {
                return 1;
            }
            var delta = time - start + 1000 / 60; // avoid rendering at 0
            if (delta >= this.transition_) {
                return 1;
            }
            return easeIn(delta / this.transition_);
        };
        /**
         * Determine if a tile is in an alpha transition.  A tile is considered in
         * transition if tile.getAlpha() has not yet been called or has been called
         * and returned 1.
         * @param {string} id An id for the renderer.
         * @return {boolean} The tile is in transition.
         */
        Tile.prototype.inTransition = function (id) {
            if (!this.transition_) {
                return false;
            }
            return this.transitionStarts_[id] !== -1;
        };
        /**
         * Mark a transition as complete.
         * @param {string} id An id for the renderer.
         */
        Tile.prototype.endTransition = function (id) {
            if (this.transition_) {
                this.transitionStarts_[id] = -1;
            }
        };
        return Tile;
    }(Target));

    var __extends$l = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var ImageTile = /** @class */ (function (_super) {
        __extends$l(ImageTile, _super);
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {string} src Image source URI.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @param {import("./Tile.js").Options=} opt_options Tile options.
         */
        function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
            var _this = _super.call(this, tileCoord, state, opt_options) || this;
            /**
             * @private
             * @type {?string}
             */
            _this.crossOrigin_ = crossOrigin;
            /**
             * Image URI
             *
             * @private
             * @type {string}
             */
            _this.src_ = src;
            /**
             * @private
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            _this.image_ = new Image();
            if (crossOrigin !== null) {
                _this.image_.crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {?function():void}
             */
            _this.unlisten_ = null;
            /**
             * @private
             * @type {import("./Tile.js").LoadFunction}
             */
            _this.tileLoadFunction_ = tileLoadFunction;
            return _this;
        }
        /**
         * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @api
         */
        ImageTile.prototype.getImage = function () {
            return this.image_;
        };
        /**
         * @return {string} Key.
         */
        ImageTile.prototype.getKey = function () {
            return this.src_;
        };
        /**
         * Tracks loading or read errors.
         *
         * @private
         */
        ImageTile.prototype.handleImageError_ = function () {
            this.state = TileState.ERROR;
            this.unlistenImage_();
            this.image_ = getBlankImage();
            this.changed();
        };
        /**
         * Tracks successful image load.
         *
         * @private
         */
        ImageTile.prototype.handleImageLoad_ = function () {
            var image = /** @type {HTMLImageElement} */ (this.image_);
            if (image.naturalWidth && image.naturalHeight) {
                this.state = TileState.LOADED;
            }
            else {
                this.state = TileState.EMPTY;
            }
            this.unlistenImage_();
            this.changed();
        };
        /**
         * Load not yet loaded URI.
         * @api
         */
        ImageTile.prototype.load = function () {
            if (this.state == TileState.ERROR) {
                this.state = TileState.IDLE;
                this.image_ = new Image();
                if (this.crossOrigin_ !== null) {
                    this.image_.crossOrigin = this.crossOrigin_;
                }
            }
            if (this.state == TileState.IDLE) {
                this.state = TileState.LOADING;
                this.changed();
                this.tileLoadFunction_(this, this.src_);
                this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        };
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        ImageTile.prototype.unlistenImage_ = function () {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        };
        return ImageTile;
    }(Tile));
    /**
     * Get a 1-pixel blank image.
     * @return {HTMLCanvasElement} Blank image.
     */
    function getBlankImage() {
        var ctx = createCanvasContext2D(1, 1);
        ctx.fillStyle = 'rgba(0,0,0,0)';
        ctx.fillRect(0, 0, 1, 1);
        return ctx.canvas;
    }

    /**
     * @module ol/Kinetic
     */
    /**
     * @classdesc
     * Implementation of inertial deceleration for map movement.
     *
     * @api
     */
    var Kinetic = /** @class */ (function () {
        /**
         * @param {number} decay Rate of decay (must be negative).
         * @param {number} minVelocity Minimum velocity (pixels/millisecond).
         * @param {number} delay Delay to consider to calculate the kinetic
         *     initial values (milliseconds).
         */
        function Kinetic(decay, minVelocity, delay) {
            /**
             * @private
             * @type {number}
             */
            this.decay_ = decay;
            /**
             * @private
             * @type {number}
             */
            this.minVelocity_ = minVelocity;
            /**
             * @private
             * @type {number}
             */
            this.delay_ = delay;
            /**
             * @private
             * @type {Array<number>}
             */
            this.points_ = [];
            /**
             * @private
             * @type {number}
             */
            this.angle_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.initialVelocity_ = 0;
        }
        /**
         * FIXME empty description for jsdoc
         */
        Kinetic.prototype.begin = function () {
            this.points_.length = 0;
            this.angle_ = 0;
            this.initialVelocity_ = 0;
        };
        /**
         * @param {number} x X.
         * @param {number} y Y.
         */
        Kinetic.prototype.update = function (x, y) {
            this.points_.push(x, y, Date.now());
        };
        /**
         * @return {boolean} Whether we should do kinetic animation.
         */
        Kinetic.prototype.end = function () {
            if (this.points_.length < 6) {
                // at least 2 points are required (i.e. there must be at least 6 elements
                // in the array)
                return false;
            }
            var delay = Date.now() - this.delay_;
            var lastIndex = this.points_.length - 3;
            if (this.points_[lastIndex + 2] < delay) {
                // the last tracked point is too old, which means that the user stopped
                // panning before releasing the map
                return false;
            }
            // get the first point which still falls into the delay time
            var firstIndex = lastIndex - 3;
            while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
                firstIndex -= 3;
            }
            var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
            // we don't want a duration of 0 (divide by zero)
            // we also make sure the user panned for a duration of at least one frame
            // (1/60s) to compute sane displacement values
            if (duration < 1000 / 60) {
                return false;
            }
            var dx = this.points_[lastIndex] - this.points_[firstIndex];
            var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
            this.angle_ = Math.atan2(dy, dx);
            this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
            return this.initialVelocity_ > this.minVelocity_;
        };
        /**
         * @return {number} Total distance travelled (pixels).
         */
        Kinetic.prototype.getDistance = function () {
            return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
        };
        /**
         * @return {number} Angle of the kinetic panning animation (radians).
         */
        Kinetic.prototype.getAngle = function () {
            return this.angle_;
        };
        return Kinetic;
    }());

    var __extends$m = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @abstract
     */
    var MapRenderer = /** @class */ (function (_super) {
        __extends$m(MapRenderer, _super);
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        function MapRenderer(map) {
            var _this = _super.call(this) || this;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = map;
            /**
             * @private
             */
            _this.declutterTree_ = null;
            return _this;
        }
        /**
         * @abstract
         * @param {import("../render/EventType.js").default} type Event type.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        MapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
            abstract();
        };
        /**
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @protected
         */
        MapRenderer.prototype.calculateMatrices2D = function (frameState) {
            var viewState = frameState.viewState;
            var coordinateToPixelTransform = frameState.coordinateToPixelTransform;
            var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
            compose(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
            makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
        };
        /**
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {boolean} checkWrapped Check for wrapped geometries.
         * @param {function(this: S, import("../Feature.js").FeatureLike,
         *     import("../layer/Layer.js").default): T} callback Feature callback.
         * @param {S} thisArg Value to use as `this` when executing `callback`.
         * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
         * @return {T|undefined} Callback result.
         * @template S,T,U
         */
        MapRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
            var result;
            var viewState = frameState.viewState;
            /**
             * @param {boolean} managed Managed layer.
             * @param {import("../Feature.js").FeatureLike} feature Feature.
             * @param {import("../layer/Layer.js").default} layer Layer.
             * @return {?} Callback result.
             */
            function forEachFeatureAtCoordinate(managed, feature, layer) {
                return callback.call(thisArg, feature, managed ? layer : null);
            }
            var projection = viewState.projection;
            var translatedCoordinate = wrapX(coordinate.slice(), projection);
            var offsets = [[0, 0]];
            if (projection.canWrapX() && checkWrapped) {
                var projectionExtent = projection.getExtent();
                var worldWidth = getWidth(projectionExtent);
                offsets.push([-worldWidth, 0], [worldWidth, 0]);
            }
            var layerStates = frameState.layerStatesArray;
            var numLayers = layerStates.length;
            var declutteredFeatures;
            if (this.declutterTree_) {
                declutteredFeatures = this.declutterTree_.all().map(function (entry) {
                    return entry.value;
                });
            }
            var tmpCoord = [];
            for (var i = 0; i < offsets.length; i++) {
                for (var j = numLayers - 1; j >= 0; --j) {
                    var layerState = layerStates[j];
                    var layer = /** @type {import("../layer/Layer.js").default} */ (layerState.layer);
                    if (layer.hasRenderer() &&
                        inView(layerState, viewState) &&
                        layerFilter.call(thisArg2, layer)) {
                        var layerRenderer = layer.getRenderer();
                        var source = layer.getSource();
                        if (layerRenderer && source) {
                            var coordinates = source.getWrapX()
                                ? translatedCoordinate
                                : coordinate;
                            var callback_1 = forEachFeatureAtCoordinate.bind(null, layerState.managed);
                            tmpCoord[0] = coordinates[0] + offsets[i][0];
                            tmpCoord[1] = coordinates[1] + offsets[i][1];
                            result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback_1, declutteredFeatures);
                        }
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return undefined;
        };
        /**
         * @abstract
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
         *     callback.
         * @param {function(import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @return {T|undefined} Callback result.
         * @template T
         */
        MapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
            return abstract();
        };
        /**
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {boolean} checkWrapped Check for wrapped geometries.
         * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
         * @return {boolean} Is there a feature at the given coordinate?
         * @template U
         */
        MapRenderer.prototype.hasFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
            var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, TRUE, this, layerFilter, thisArg);
            return hasFeature !== undefined;
        };
        /**
         * @return {import("../PluggableMap.js").default} Map.
         */
        MapRenderer.prototype.getMap = function () {
            return this.map_;
        };
        /**
         * Render.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        MapRenderer.prototype.renderFrame = function (frameState) {
            this.declutterTree_ = renderDeclutterItems(frameState, this.declutterTree_);
        };
        /**
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        MapRenderer.prototype.scheduleExpireIconCache = function (frameState) {
            if (shared.canExpireCache()) {
                frameState.postRenderFunctions.push(expireIconCache);
            }
        };
        return MapRenderer;
    }(Disposable));
    /**
     * @param {import("../PluggableMap.js").default} map Map.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    function expireIconCache(map, frameState) {
        shared.expire();
    }

    var __extends$n = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Canvas map renderer.
     * @api
     */
    var CompositeMapRenderer = /** @class */ (function (_super) {
        __extends$n(CompositeMapRenderer, _super);
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        function CompositeMapRenderer(map) {
            var _this = _super.call(this, map) || this;
            /**
             * @type {import("../events.js").EventsKey}
             */
            _this.fontChangeListenerKey_ = listen(checkedFonts, ObjectEventType.PROPERTYCHANGE, map.redrawText.bind(map));
            /**
             * @private
             * @type {HTMLDivElement}
             */
            _this.element_ = document.createElement('div');
            var style = _this.element_.style;
            style.position = 'absolute';
            style.width = '100%';
            style.height = '100%';
            style.zIndex = '0';
            _this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';
            var container = map.getViewport();
            container.insertBefore(_this.element_, container.firstChild || null);
            /**
             * @private
             * @type {Array<HTMLElement>}
             */
            _this.children_ = [];
            /**
             * @private
             * @type {boolean}
             */
            _this.renderedVisible_ = true;
            return _this;
        }
        /**
         * @param {import("../render/EventType.js").default} type Event type.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        CompositeMapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
            var map = this.getMap();
            if (map.hasListener(type)) {
                var event_1 = new RenderEvent(type, undefined, frameState);
                map.dispatchEvent(event_1);
            }
        };
        CompositeMapRenderer.prototype.disposeInternal = function () {
            unlistenByKey(this.fontChangeListenerKey_);
            this.element_.parentNode.removeChild(this.element_);
            _super.prototype.disposeInternal.call(this);
        };
        /**
         * Render.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        CompositeMapRenderer.prototype.renderFrame = function (frameState) {
            if (!frameState) {
                if (this.renderedVisible_) {
                    this.element_.style.display = 'none';
                    this.renderedVisible_ = false;
                }
                return;
            }
            this.calculateMatrices2D(frameState);
            this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);
            var layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {
                return a.zIndex - b.zIndex;
            });
            var viewState = frameState.viewState;
            this.children_.length = 0;
            var previousElement = null;
            for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                var layerState = layerStatesArray[i];
                frameState.layerIndex = i;
                if (!inView(layerState, viewState) ||
                    (layerState.sourceState != SourceState.READY &&
                        layerState.sourceState != SourceState.UNDEFINED)) {
                    continue;
                }
                var layer = layerState.layer;
                var element = layer.render(frameState, previousElement);
                if (!element) {
                    continue;
                }
                if (element !== previousElement) {
                    this.children_.push(element);
                    previousElement = element;
                }
            }
            _super.prototype.renderFrame.call(this, frameState);
            replaceChildren(this.element_, this.children_);
            this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);
            if (!this.renderedVisible_) {
                this.element_.style.display = '';
                this.renderedVisible_ = true;
            }
            this.scheduleExpireIconCache(frameState);
        };
        /**
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
         *     callback.
         * @param {function(import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @return {T|undefined} Callback result.
         * @template T
         */
        CompositeMapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
            var viewState = frameState.viewState;
            var layerStates = frameState.layerStatesArray;
            var numLayers = layerStates.length;
            for (var i = numLayers - 1; i >= 0; --i) {
                var layerState = layerStates[i];
                var layer = layerState.layer;
                if (layer.hasRenderer() &&
                    inView(layerState, viewState) &&
                    layerFilter(layer)) {
                    var layerRenderer = layer.getRenderer();
                    var data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
                    if (data) {
                        var result = callback(layer, data);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return undefined;
        };
        return CompositeMapRenderer;
    }(MapRenderer));

    var __extends$o = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
     */
    /**
     * @enum {string}
     * @private
     */
    var Property$1 = {
        LAYERS: 'layers',
    };
    /**
     * @classdesc
     * A {@link module:ol/Collection~Collection} of layers that are handled together.
     *
     * A generic `change` event is triggered when the group/Collection changes.
     *
     * @api
     */
    var LayerGroup = /** @class */ (function (_super) {
        __extends$o(LayerGroup, _super);
        /**
         * @param {Options=} opt_options Layer options.
         */
        function LayerGroup(opt_options) {
            var _this = this;
            var options = opt_options || {};
            var baseOptions = /** @type {Options} */ (assign({}, options));
            delete baseOptions.layers;
            var layers = options.layers;
            _this = _super.call(this, baseOptions) || this;
            /**
             * @private
             * @type {Array<import("../events.js").EventsKey>}
             */
            _this.layersListenerKeys_ = [];
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").EventsKey>>}
             */
            _this.listenerKeys_ = {};
            _this.addEventListener(getChangeEventType(Property$1.LAYERS), _this.handleLayersChanged_);
            if (layers) {
                if (Array.isArray(layers)) {
                    layers = new Collection(layers.slice(), { unique: true });
                }
                else {
                    assert(typeof ( /** @type {?} */(layers).getArray) === 'function', 43); // Expected `layers` to be an array or a `Collection`
                }
            }
            else {
                layers = new Collection(undefined, { unique: true });
            }
            _this.setLayers(layers);
            return _this;
        }
        /**
         * @private
         */
        LayerGroup.prototype.handleLayerChange_ = function () {
            this.changed();
        };
        /**
         * @private
         */
        LayerGroup.prototype.handleLayersChanged_ = function () {
            this.layersListenerKeys_.forEach(unlistenByKey);
            this.layersListenerKeys_.length = 0;
            var layers = this.getLayers();
            this.layersListenerKeys_.push(listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this), listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this));
            for (var id in this.listenerKeys_) {
                this.listenerKeys_[id].forEach(unlistenByKey);
            }
            clear(this.listenerKeys_);
            var layersArray = layers.getArray();
            for (var i = 0, ii = layersArray.length; i < ii; i++) {
                var layer = layersArray[i];
                this.listenerKeys_[getUid(layer)] = [
                    listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
                    listen(layer, EventType.CHANGE, this.handleLayerChange_, this),
                ];
            }
            this.changed();
        };
        /**
         * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
         * @private
         */
        LayerGroup.prototype.handleLayersAdd_ = function (collectionEvent) {
            var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
            this.listenerKeys_[getUid(layer)] = [
                listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
                listen(layer, EventType.CHANGE, this.handleLayerChange_, this),
            ];
            this.changed();
        };
        /**
         * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
         * @private
         */
        LayerGroup.prototype.handleLayersRemove_ = function (collectionEvent) {
            var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
            var key = getUid(layer);
            this.listenerKeys_[key].forEach(unlistenByKey);
            delete this.listenerKeys_[key];
            this.changed();
        };
        /**
         * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
         * in this group.
         * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
         *   {@link module:ol/layer/Base layers} that are part of this group.
         * @observable
         * @api
         */
        LayerGroup.prototype.getLayers = function () {
            return /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property$1.LAYERS));
        };
        /**
         * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
         * in this group.
         * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
         *   {@link module:ol/layer/Base layers} that are part of this group.
         * @observable
         * @api
         */
        LayerGroup.prototype.setLayers = function (layers) {
            this.set(Property$1.LAYERS, layers);
        };
        /**
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        LayerGroup.prototype.getLayersArray = function (opt_array) {
            var array = opt_array !== undefined ? opt_array : [];
            this.getLayers().forEach(function (layer) {
                layer.getLayersArray(array);
            });
            return array;
        };
        /**
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        LayerGroup.prototype.getLayerStatesArray = function (opt_states) {
            var states = opt_states !== undefined ? opt_states : [];
            var pos = states.length;
            this.getLayers().forEach(function (layer) {
                layer.getLayerStatesArray(states);
            });
            var ownLayerState = this.getLayerState();
            for (var i = pos, ii = states.length; i < ii; i++) {
                var layerState = states[i];
                layerState.opacity *= ownLayerState.opacity;
                layerState.visible = layerState.visible && ownLayerState.visible;
                layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
                layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
                layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
                layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
                if (ownLayerState.extent !== undefined) {
                    if (layerState.extent !== undefined) {
                        layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
                    }
                    else {
                        layerState.extent = ownLayerState.extent;
                    }
                }
            }
            return states;
        };
        /**
         * @return {import("../source/State.js").default} Source state.
         */
        LayerGroup.prototype.getSourceState = function () {
            return SourceState.READY;
        };
        return LayerGroup;
    }(BaseLayer));

    var __extends$p = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Events emitted as map events are instances of this type.
     * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
     */
    var MapEvent = /** @class */ (function (_super) {
        __extends$p(MapEvent, _super);
        /**
         * @param {string} type Event type.
         * @param {import("./PluggableMap.js").default} map Map.
         * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
         */
        function MapEvent(type, map, opt_frameState) {
            var _this = _super.call(this, type) || this;
            /**
             * The map where the event occurred.
             * @type {import("./PluggableMap.js").default}
             * @api
             */
            _this.map = map;
            /**
             * The frame state at the time of the event.
             * @type {?import("./PluggableMap.js").FrameState}
             * @api
             */
            _this.frameState = opt_frameState !== undefined ? opt_frameState : null;
            return _this;
        }
        return MapEvent;
    }(BaseEvent));

    var __extends$q = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Events emitted as map browser events are instances of this type.
     * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
     * @template {UIEvent} EVENT
     */
    var MapBrowserEvent = /** @class */ (function (_super) {
        __extends$q(MapBrowserEvent, _super);
        /**
         * @param {string} type Event type.
         * @param {import("./PluggableMap.js").default} map Map.
         * @param {EVENT} originalEvent Original event.
         * @param {boolean=} opt_dragging Is the map currently being dragged?
         * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
         */
        function MapBrowserEvent(type, map, originalEvent, opt_dragging, opt_frameState) {
            var _this = _super.call(this, type, map, opt_frameState) || this;
            /**
             * The original browser event.
             * @const
             * @type {EVENT}
             * @api
             */
            _this.originalEvent = originalEvent;
            /**
             * The map pixel relative to the viewport corresponding to the original browser event.
             * @type {?import("./pixel.js").Pixel}
             */
            _this.pixel_ = null;
            /**
             * The coordinate in the user projection corresponding to the original browser event.
             * @type {?import("./coordinate.js").Coordinate}
             */
            _this.coordinate_ = null;
            /**
             * Indicates if the map is currently being dragged. Only set for
             * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
             *
             * @type {boolean}
             * @api
             */
            _this.dragging = opt_dragging !== undefined ? opt_dragging : false;
            return _this;
        }
        Object.defineProperty(MapBrowserEvent.prototype, "pixel", {
            /**
             * The map pixel relative to the viewport corresponding to the original event.
             * @type {import("./pixel.js").Pixel}
             * @api
             */
            get: function () {
                if (!this.pixel_) {
                    this.pixel_ = this.map.getEventPixel(this.originalEvent);
                }
                return this.pixel_;
            },
            set: function (pixel) {
                this.pixel_ = pixel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MapBrowserEvent.prototype, "coordinate", {
            /**
             * The coordinate corresponding to the original browser event.  This will be in the user
             * projection if one is set.  Otherwise it will be in the view projection.
             * @type {import("./coordinate.js").Coordinate}
             * @api
             */
            get: function () {
                if (!this.coordinate_) {
                    this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
                }
                return this.coordinate_;
            },
            set: function (coordinate) {
                this.coordinate_ = coordinate;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Prevents the default browser action.
         * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
         * @api
         */
        MapBrowserEvent.prototype.preventDefault = function () {
            _super.prototype.preventDefault.call(this);
            this.originalEvent.preventDefault();
        };
        /**
         * Prevents further propagation of the current event.
         * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
         * @api
         */
        MapBrowserEvent.prototype.stopPropagation = function () {
            _super.prototype.stopPropagation.call(this);
            this.originalEvent.stopPropagation();
        };
        return MapBrowserEvent;
    }(MapEvent));

    /**
     * @module ol/MapBrowserEventType
     */
    /**
     * Constants for event names.
     * @enum {string}
     */
    var MapBrowserEventType = {
        /**
         * A true single click with no dragging and no double click. Note that this
         * event is delayed by 250 ms to ensure that it is not a double click.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
         * @api
         */
        SINGLECLICK: 'singleclick',
        /**
         * A click with no dragging. A double click will fire two of this.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
         * @api
         */
        CLICK: EventType.CLICK,
        /**
         * A true double click, with no dragging.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
         * @api
         */
        DBLCLICK: EventType.DBLCLICK,
        /**
         * Triggered when a pointer is dragged.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
         * @api
         */
        POINTERDRAG: 'pointerdrag',
        /**
         * Triggered when a pointer is moved. Note that on touch devices this is
         * triggered when the map is panned, so is not the same as mousemove.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
         * @api
         */
        POINTERMOVE: 'pointermove',
        POINTERDOWN: 'pointerdown',
        POINTERUP: 'pointerup',
        POINTEROVER: 'pointerover',
        POINTEROUT: 'pointerout',
        POINTERENTER: 'pointerenter',
        POINTERLEAVE: 'pointerleave',
        POINTERCANCEL: 'pointercancel',
    };

    /**
     * @module ol/pointer/EventType
     */
    /**
     * Constants for event names.
     * @enum {string}
     */
    var PointerEventType = {
        POINTERMOVE: 'pointermove',
        POINTERDOWN: 'pointerdown',
        POINTERUP: 'pointerup',
        POINTEROVER: 'pointerover',
        POINTEROUT: 'pointerout',
        POINTERENTER: 'pointerenter',
        POINTERLEAVE: 'pointerleave',
        POINTERCANCEL: 'pointercancel',
    };

    /**
     * @module ol/MapBrowserEventHandler
     */
    var __extends$r = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var MapBrowserEventHandler = /** @class */ (function (_super) {
        __extends$r(MapBrowserEventHandler, _super);
        /**
         * @param {import("./PluggableMap.js").default} map The map with the viewport to listen to events on.
         * @param {number=} moveTolerance The minimal distance the pointer must travel to trigger a move.
         */
        function MapBrowserEventHandler(map, moveTolerance) {
            var _this = _super.call(this, map) || this;
            /**
             * This is the element that we will listen to the real events on.
             * @type {import("./PluggableMap.js").default}
             * @private
             */
            _this.map_ = map;
            /**
             * @type {any}
             * @private
             */
            _this.clickTimeoutId_;
            /**
             * @type {boolean}
             * @private
             */
            _this.dragging_ = false;
            /**
             * @type {!Array<import("./events.js").EventsKey>}
             * @private
             */
            _this.dragListenerKeys_ = [];
            /**
             * @type {number}
             * @private
             */
            _this.moveTolerance_ = moveTolerance
                ? moveTolerance * DEVICE_PIXEL_RATIO
                : DEVICE_PIXEL_RATIO;
            /**
             * The most recent "down" type event (or null if none have occurred).
             * Set on pointerdown.
             * @type {PointerEvent}
             * @private
             */
            _this.down_ = null;
            var element = _this.map_.getViewport();
            /**
             * @type {number}
             * @private
             */
            _this.activePointers_ = 0;
            /**
             * @type {!Object<number, boolean>}
             * @private
             */
            _this.trackedTouches_ = {};
            _this.element_ = element;
            /**
             * @type {?import("./events.js").EventsKey}
             * @private
             */
            _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);
            /**
             * @type {PointerEvent}
             * @private
             */
            _this.originalPointerMoveEvent_;
            /**
             * @type {?import("./events.js").EventsKey}
             * @private
             */
            _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);
            /**
             * @private
             */
            _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);
            _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
            return _this;
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {
            var newEvent = new MapBrowserEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            if (this.clickTimeoutId_ !== undefined) {
                // double-click
                clearTimeout(this.clickTimeoutId_);
                this.clickTimeoutId_ = undefined;
                newEvent = new MapBrowserEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);
                this.dispatchEvent(newEvent);
            }
            else {
                // click
                this.clickTimeoutId_ = setTimeout(function () {
                    this.clickTimeoutId_ = undefined;
                    var newEvent = new MapBrowserEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);
                    this.dispatchEvent(newEvent);
                }.bind(this), 250);
            }
        };
        /**
         * Keeps track on how many pointers are currently active.
         *
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {
            var event = pointerEvent;
            if (event.type == MapBrowserEventType.POINTERUP ||
                event.type == MapBrowserEventType.POINTERCANCEL) {
                delete this.trackedTouches_[event.pointerId];
            }
            else if (event.type == MapBrowserEventType.POINTERDOWN) {
                this.trackedTouches_[event.pointerId] = true;
            }
            this.activePointers_ = Object.keys(this.trackedTouches_).length;
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {
            this.updateActivePointers_(pointerEvent);
            var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            // We emulate click events on left mouse button click, touch contact, and pen
            // contact. isMouseActionButton returns true in these cases (evt.button is set
            // to 0).
            // See http://www.w3.org/TR/pointerevents/#button-states
            // We only fire click, singleclick, and doubleclick if nobody has called
            // event.stopPropagation() or event.preventDefault().
            if (!newEvent.propagationStopped &&
                !this.dragging_ &&
                this.isMouseActionButton_(pointerEvent)) {
                this.emulateClick_(this.down_);
            }
            if (this.activePointers_ === 0) {
                this.dragListenerKeys_.forEach(unlistenByKey);
                this.dragListenerKeys_.length = 0;
                this.dragging_ = false;
                this.down_ = null;
            }
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @return {boolean} If the left mouse button was pressed.
         * @private
         */
        MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {
            return pointerEvent.button === 0;
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {
            this.updateActivePointers_(pointerEvent);
            var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            this.down_ = pointerEvent;
            if (this.dragListenerKeys_.length === 0) {
                this.dragListenerKeys_.push(listen(document, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(document, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this), 
                /* Note that the listener for `pointercancel is set up on
                 * `pointerEventHandler_` and not `documentPointerEventHandler_` like
                 * the `pointerup` and `pointermove` listeners.
                 *
                 * The reason for this is the following: `TouchSource.vacuumTouches_()`
                 * issues `pointercancel` events, when there was no `touchend` for a
                 * `touchstart`. Now, let's say a first `touchstart` is registered on
                 * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
                 * But `documentPointerEventHandler_` doesn't know about the first
                 * `touchstart`. If there is no `touchend` for the `touchstart`, we can
                 * only receive a `touchcancel` from `pointerEventHandler_`, because it is
                 * only registered there.
                 */
                listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));
                if (this.element_.getRootNode &&
                    this.element_.getRootNode() !== document) {
                    this.dragListenerKeys_.push(listen(this.element_.getRootNode(), MapBrowserEventType.POINTERUP, this.handlePointerUp_, this));
                }
            }
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {
            // Between pointerdown and pointerup, pointermove events are triggered.
            // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
            // moved a significant distance.
            if (this.isMoving_(pointerEvent)) {
                this.dragging_ = true;
                var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);
                this.dispatchEvent(newEvent);
            }
        };
        /**
         * Wrap and relay a pointer event.  Note that this requires that the type
         * string for the MapBrowserEvent matches the PointerEvent type.
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {
            this.originalPointerMoveEvent_ = pointerEvent;
            var dragging = !!(this.down_ && this.isMoving_(pointerEvent));
            this.dispatchEvent(new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging));
        };
        /**
         * Flexible handling of a `touch-action: none` css equivalent: because calling
         * `preventDefault()` on a `pointermove` event does not stop native page scrolling
         * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
         * when an interaction (currently `DragPan` handles the event.
         * @param {TouchEvent} event Event.
         * @private
         */
        MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {
            // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
            // may not be initialized yet when we get here on a platform without native pointer events.
            if (!this.originalPointerMoveEvent_ ||
                this.originalPointerMoveEvent_.defaultPrevented) {
                event.preventDefault();
            }
        };
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @return {boolean} Is moving.
         * @private
         */
        MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {
            return (this.dragging_ ||
                Math.abs(pointerEvent.clientX - this.down_.clientX) >
                    this.moveTolerance_ ||
                Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_);
        };
        /**
         * Clean up.
         */
        MapBrowserEventHandler.prototype.disposeInternal = function () {
            if (this.relayedListenerKey_) {
                unlistenByKey(this.relayedListenerKey_);
                this.relayedListenerKey_ = null;
            }
            this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);
            if (this.pointerdownListenerKey_) {
                unlistenByKey(this.pointerdownListenerKey_);
                this.pointerdownListenerKey_ = null;
            }
            this.dragListenerKeys_.forEach(unlistenByKey);
            this.dragListenerKeys_.length = 0;
            this.element_ = null;
            _super.prototype.disposeInternal.call(this);
        };
        return MapBrowserEventHandler;
    }(Target));

    /**
     * @module ol/MapEventType
     */
    /**
     * @enum {string}
     */
    var MapEventType = {
        /**
         * Triggered after a map frame is rendered.
         * @event module:ol/MapEvent~MapEvent#postrender
         * @api
         */
        POSTRENDER: 'postrender',
        /**
         * Triggered when the map starts moving.
         * @event module:ol/MapEvent~MapEvent#movestart
         * @api
         */
        MOVESTART: 'movestart',
        /**
         * Triggered after the map is moved.
         * @event module:ol/MapEvent~MapEvent#moveend
         * @api
         */
        MOVEEND: 'moveend',
    };

    /**
     * @module ol/MapProperty
     */
    /**
     * @enum {string}
     */
    var MapProperty = {
        LAYERGROUP: 'layergroup',
        SIZE: 'size',
        TARGET: 'target',
        VIEW: 'view',
    };

    /**
     * @module ol/structs/PriorityQueue
     */
    /**
     * @type {number}
     */
    var DROP = Infinity;
    /**
     * @classdesc
     * Priority queue.
     *
     * The implementation is inspired from the Closure Library's Heap class and
     * Python's heapq module.
     *
     * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
     * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
     *
     * @template T
     */
    var PriorityQueue = /** @class */ (function () {
        /**
         * @param {function(T): number} priorityFunction Priority function.
         * @param {function(T): string} keyFunction Key function.
         */
        function PriorityQueue(priorityFunction, keyFunction) {
            /**
             * @type {function(T): number}
             * @private
             */
            this.priorityFunction_ = priorityFunction;
            /**
             * @type {function(T): string}
             * @private
             */
            this.keyFunction_ = keyFunction;
            /**
             * @type {Array<T>}
             * @private
             */
            this.elements_ = [];
            /**
             * @type {Array<number>}
             * @private
             */
            this.priorities_ = [];
            /**
             * @type {!Object<string, boolean>}
             * @private
             */
            this.queuedElements_ = {};
        }
        /**
         * FIXME empty description for jsdoc
         */
        PriorityQueue.prototype.clear = function () {
            this.elements_.length = 0;
            this.priorities_.length = 0;
            clear(this.queuedElements_);
        };
        /**
         * Remove and return the highest-priority element. O(log N).
         * @return {T} Element.
         */
        PriorityQueue.prototype.dequeue = function () {
            var elements = this.elements_;
            var priorities = this.priorities_;
            var element = elements[0];
            if (elements.length == 1) {
                elements.length = 0;
                priorities.length = 0;
            }
            else {
                elements[0] = elements.pop();
                priorities[0] = priorities.pop();
                this.siftUp_(0);
            }
            var elementKey = this.keyFunction_(element);
            delete this.queuedElements_[elementKey];
            return element;
        };
        /**
         * Enqueue an element. O(log N).
         * @param {T} element Element.
         * @return {boolean} The element was added to the queue.
         */
        PriorityQueue.prototype.enqueue = function (element) {
            assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
            var priority = this.priorityFunction_(element);
            if (priority != DROP) {
                this.elements_.push(element);
                this.priorities_.push(priority);
                this.queuedElements_[this.keyFunction_(element)] = true;
                this.siftDown_(0, this.elements_.length - 1);
                return true;
            }
            return false;
        };
        /**
         * @return {number} Count.
         */
        PriorityQueue.prototype.getCount = function () {
            return this.elements_.length;
        };
        /**
         * Gets the index of the left child of the node at the given index.
         * @param {number} index The index of the node to get the left child for.
         * @return {number} The index of the left child.
         * @private
         */
        PriorityQueue.prototype.getLeftChildIndex_ = function (index) {
            return index * 2 + 1;
        };
        /**
         * Gets the index of the right child of the node at the given index.
         * @param {number} index The index of the node to get the right child for.
         * @return {number} The index of the right child.
         * @private
         */
        PriorityQueue.prototype.getRightChildIndex_ = function (index) {
            return index * 2 + 2;
        };
        /**
         * Gets the index of the parent of the node at the given index.
         * @param {number} index The index of the node to get the parent for.
         * @return {number} The index of the parent.
         * @private
         */
        PriorityQueue.prototype.getParentIndex_ = function (index) {
            return (index - 1) >> 1;
        };
        /**
         * Make this a heap. O(N).
         * @private
         */
        PriorityQueue.prototype.heapify_ = function () {
            var i;
            for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
                this.siftUp_(i);
            }
        };
        /**
         * @return {boolean} Is empty.
         */
        PriorityQueue.prototype.isEmpty = function () {
            return this.elements_.length === 0;
        };
        /**
         * @param {string} key Key.
         * @return {boolean} Is key queued.
         */
        PriorityQueue.prototype.isKeyQueued = function (key) {
            return key in this.queuedElements_;
        };
        /**
         * @param {T} element Element.
         * @return {boolean} Is queued.
         */
        PriorityQueue.prototype.isQueued = function (element) {
            return this.isKeyQueued(this.keyFunction_(element));
        };
        /**
         * @param {number} index The index of the node to move down.
         * @private
         */
        PriorityQueue.prototype.siftUp_ = function (index) {
            var elements = this.elements_;
            var priorities = this.priorities_;
            var count = elements.length;
            var element = elements[index];
            var priority = priorities[index];
            var startIndex = index;
            while (index < count >> 1) {
                var lIndex = this.getLeftChildIndex_(index);
                var rIndex = this.getRightChildIndex_(index);
                var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex]
                    ? rIndex
                    : lIndex;
                elements[index] = elements[smallerChildIndex];
                priorities[index] = priorities[smallerChildIndex];
                index = smallerChildIndex;
            }
            elements[index] = element;
            priorities[index] = priority;
            this.siftDown_(startIndex, index);
        };
        /**
         * @param {number} startIndex The index of the root.
         * @param {number} index The index of the node to move up.
         * @private
         */
        PriorityQueue.prototype.siftDown_ = function (startIndex, index) {
            var elements = this.elements_;
            var priorities = this.priorities_;
            var element = elements[index];
            var priority = priorities[index];
            while (index > startIndex) {
                var parentIndex = this.getParentIndex_(index);
                if (priorities[parentIndex] > priority) {
                    elements[index] = elements[parentIndex];
                    priorities[index] = priorities[parentIndex];
                    index = parentIndex;
                }
                else {
                    break;
                }
            }
            elements[index] = element;
            priorities[index] = priority;
        };
        /**
         * FIXME empty description for jsdoc
         */
        PriorityQueue.prototype.reprioritize = function () {
            var priorityFunction = this.priorityFunction_;
            var elements = this.elements_;
            var priorities = this.priorities_;
            var index = 0;
            var n = elements.length;
            var element, i, priority;
            for (i = 0; i < n; ++i) {
                element = elements[i];
                priority = priorityFunction(element);
                if (priority == DROP) {
                    delete this.queuedElements_[this.keyFunction_(element)];
                }
                else {
                    priorities[index] = priority;
                    elements[index++] = element;
                }
            }
            elements.length = index;
            priorities.length = index;
            this.heapify_();
        };
        return PriorityQueue;
    }());

    var __extends$s = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
     */
    var TileQueue = /** @class */ (function (_super) {
        __extends$s(TileQueue, _super);
        /**
         * @param {PriorityFunction} tilePriorityFunction Tile priority function.
         * @param {function(): ?} tileChangeCallback Function called on each tile change event.
         */
        function TileQueue(tilePriorityFunction, tileChangeCallback) {
            var _this = _super.call(this, 
            /**
             * @param {Array} element Element.
             * @return {number} Priority.
             */
            function (element) {
                return tilePriorityFunction.apply(null, element);
            }, 
            /**
             * @param {Array} element Element.
             * @return {string} Key.
             */
            function (element) {
                return /** @type {import("./Tile.js").default} */ (element[0]).getKey();
            }) || this;
            /** @private */
            _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);
            /**
             * @private
             * @type {function(): ?}
             */
            _this.tileChangeCallback_ = tileChangeCallback;
            /**
             * @private
             * @type {number}
             */
            _this.tilesLoading_ = 0;
            /**
             * @private
             * @type {!Object<string,boolean>}
             */
            _this.tilesLoadingKeys_ = {};
            return _this;
        }
        /**
         * @param {Array} element Element.
         * @return {boolean} The element was added to the queue.
         */
        TileQueue.prototype.enqueue = function (element) {
            var added = _super.prototype.enqueue.call(this, element);
            if (added) {
                var tile = element[0];
                tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);
            }
            return added;
        };
        /**
         * @return {number} Number of tiles loading.
         */
        TileQueue.prototype.getTilesLoading = function () {
            return this.tilesLoading_;
        };
        /**
         * @param {import("./events/Event.js").default} event Event.
         * @protected
         */
        TileQueue.prototype.handleTileChange = function (event) {
            var tile = /** @type {import("./Tile.js").default} */ (event.target);
            var state = tile.getState();
            if ((tile.hifi && state === TileState.LOADED) ||
                state === TileState.ERROR ||
                state === TileState.EMPTY) {
                tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);
                var tileKey = tile.getKey();
                if (tileKey in this.tilesLoadingKeys_) {
                    delete this.tilesLoadingKeys_[tileKey];
                    --this.tilesLoading_;
                }
                this.tileChangeCallback_();
            }
        };
        /**
         * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
         * @param {number} maxNewLoads Maximum number of new tiles to load.
         */
        TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {
            var newLoads = 0;
            var state, tile, tileKey;
            while (this.tilesLoading_ < maxTotalLoading &&
                newLoads < maxNewLoads &&
                this.getCount() > 0) {
                tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
                tileKey = tile.getKey();
                state = tile.getState();
                if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
                    this.tilesLoadingKeys_[tileKey] = true;
                    ++this.tilesLoading_;
                    ++newLoads;
                    tile.load();
                }
            }
        };
        return TileQueue;
    }(PriorityQueue));
    /**
     * @param {import('./PluggableMap.js').FrameState} frameState Frame state.
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {
        // Filter out tiles at higher zoom levels than the current zoom level, or that
        // are outside the visible extent.
        if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
            return DROP;
        }
        if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
            return DROP;
        }
        // Prioritize the highest zoom level tiles closest to the focus.
        // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
        // Within a zoom level, tiles are prioritized by the distance in pixels between
        // the center of the tile and the center of the viewport.  The factor of 65536
        // means that the prioritization should behave as desired for tiles up to
        // 65536 * Math.log(2) = 45426 pixels from the focus.
        var center = frameState.viewState.center;
        var deltaX = tileCenter[0] - center[0];
        var deltaY = tileCenter[1] - center[1];
        return (65536 * Math.log(tileResolution) +
            Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution);
    }

    /**
     * @module ol/ViewProperty
     */
    /**
     * @enum {string}
     */
    var ViewProperty = {
        CENTER: 'center',
        RESOLUTION: 'resolution',
        ROTATION: 'rotation',
    };

    /**
     * @module ol/tilegrid/common
     */
    /**
     * Default maximum zoom for default tile grids.
     * @type {number}
     */
    var DEFAULT_MAX_ZOOM = 42;
    /**
     * Default tile size.
     * @type {number}
     */
    var DEFAULT_TILE_SIZE = 256;

    /**
     * @module ol/centerconstraint
     */
    /**
     * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=): (import("./coordinate.js").Coordinate|undefined)} Type
     */
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
     * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
     * (only during interaction and animation).
     * @return {Type} The constraint.
     */
    function createExtent(extent, onlyCenter, smooth) {
        return (
        /**
         * @param {import("./coordinate.js").Coordinate|undefined} center Center.
         * @param {number} resolution Resolution.
         * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {import("./coordinate.js").Coordinate|undefined} Center.
         */
        function (center, resolution, size, opt_isMoving) {
            if (center) {
                var viewWidth = onlyCenter ? 0 : size[0] * resolution;
                var viewHeight = onlyCenter ? 0 : size[1] * resolution;
                var minX = extent[0] + viewWidth / 2;
                var maxX = extent[2] - viewWidth / 2;
                var minY = extent[1] + viewHeight / 2;
                var maxY = extent[3] - viewHeight / 2;
                // note: when zooming out of bounds, min and max values for x and y may
                // end up inverted (min > max); this has to be accounted for
                if (minX > maxX) {
                    minX = (maxX + minX) / 2;
                    maxX = minX;
                }
                if (minY > maxY) {
                    minY = (maxY + minY) / 2;
                    maxY = minY;
                }
                var x = clamp(center[0], minX, maxX);
                var y = clamp(center[1], minY, maxY);
                var ratio = 30 * resolution;
                // during an interaction, allow some overscroll
                if (opt_isMoving && smooth) {
                    x +=
                        -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
                            ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
                    y +=
                        -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
                            ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
                }
                return [x, y];
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {import("./coordinate.js").Coordinate=} center Center.
     * @return {import("./coordinate.js").Coordinate|undefined} Center.
     */
    function none(center) {
        return center;
    }

    /**
     * @module ol/resolutionconstraint
     */
    /**
     * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
     */
    /**
     * Returns a modified resolution taking into account the viewport size and maximum
     * allowed extent.
     * @param {number} resolution Resolution
     * @param {import("./extent.js").Extent=} maxExtent Maximum allowed extent.
     * @param {import("./size.js").Size} viewportSize Viewport size.
     * @param {boolean} showFullExtent Whether to show the full extent.
     * @return {number} Capped resolution.
     */
    function getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {
        var xResolution = getWidth(maxExtent) / viewportSize[0];
        var yResolution = getHeight(maxExtent) / viewportSize[1];
        if (showFullExtent) {
            return Math.min(resolution, Math.max(xResolution, yResolution));
        }
        return Math.min(resolution, Math.min(xResolution, yResolution));
    }
    /**
     * Returns a modified resolution to be between maxResolution and minResolution while
     * still allowing the value to be slightly out of bounds.
     * Note: the computation is based on the logarithm function (ln):
     *  - at 1, ln(x) is 0
     *  - above 1, ln(x) keeps increasing but at a much slower pace than x
     * The final result is clamped to prevent getting too far away from bounds.
     * @param {number} resolution Resolution.
     * @param {number} maxResolution Max resolution.
     * @param {number} minResolution Min resolution.
     * @return {number} Smoothed resolution.
     */
    function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
        var result = Math.min(resolution, maxResolution);
        var ratio = 50;
        result *=
            Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +
                1;
        if (minResolution) {
            result = Math.max(result, minResolution);
            result /=
                Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /
                    ratio +
                    1;
        }
        return clamp(result, minResolution / 2, maxResolution * 2);
    }
    /**
     * @param {Array<number>} resolutions Resolutions.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                var maxResolution = resolutions[0];
                var minResolution = resolutions[resolutions.length - 1];
                var cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                // during interacting or animating, allow intermediary values
                if (opt_isMoving) {
                    var smooth = opt_smooth !== undefined ? opt_smooth : true;
                    if (!smooth) {
                        return clamp(resolution, minResolution, cappedMaxRes);
                    }
                    return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
                }
                var capped = Math.min(cappedMaxRes, resolution);
                var z = Math.floor(linearFindNearest(resolutions, capped, direction));
                if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {
                    return resolutions[z + 1];
                }
                return resolutions[z];
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {number} power Power.
     * @param {number} maxResolution Maximum resolution.
     * @param {number=} opt_minResolution Minimum resolution.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                var cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                var minResolution = opt_minResolution !== undefined ? opt_minResolution : 0;
                // during interacting or animating, allow intermediary values
                if (opt_isMoving) {
                    var smooth = opt_smooth !== undefined ? opt_smooth : true;
                    if (!smooth) {
                        return clamp(resolution, minResolution, cappedMaxRes);
                    }
                    return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
                }
                var tolerance = 1e-9;
                var minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);
                var offset = -direction * (0.5 - tolerance) + 0.5;
                var capped = Math.min(cappedMaxRes, resolution);
                var cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);
                var zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
                var newResolution = maxResolution / Math.pow(power, zoomLevel);
                return clamp(newResolution, minResolution, cappedMaxRes);
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {number} maxResolution Max resolution.
     * @param {number} minResolution Min resolution.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                var cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                var smooth = opt_smooth !== undefined ? opt_smooth : true;
                if (!smooth || !opt_isMoving) {
                    return clamp(resolution, minResolution, cappedMaxRes);
                }
                return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
            }
            else {
                return undefined;
            }
        });
    }

    /**
     * @module ol/rotationconstraint
     */
    /**
     * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
     */
    /**
     * @param {number|undefined} rotation Rotation.
     * @return {number|undefined} Rotation.
     */
    function disable(rotation) {
        if (rotation !== undefined) {
            return 0;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {number|undefined} rotation Rotation.
     * @return {number|undefined} Rotation.
     */
    function none$1(rotation) {
        if (rotation !== undefined) {
            return rotation;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {number} n N.
     * @return {Type} Rotation constraint.
     */
    function createSnapToN(n) {
        var theta = (2 * Math.PI) / n;
        return (
        /**
         * @param {number|undefined} rotation Rotation.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Rotation.
         */
        function (rotation, opt_isMoving) {
            if (opt_isMoving) {
                return rotation;
            }
            if (rotation !== undefined) {
                rotation = Math.floor(rotation / theta + 0.5) * theta;
                return rotation;
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * @param {number=} opt_tolerance Tolerance.
     * @return {Type} Rotation constraint.
     */
    function createSnapToZero(opt_tolerance) {
        var tolerance = opt_tolerance || toRadians(5);
        return (
        /**
         * @param {number|undefined} rotation Rotation.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Rotation.
         */
        function (rotation, opt_isMoving) {
            if (opt_isMoving) {
                return rotation;
            }
            if (rotation !== undefined) {
                if (Math.abs(rotation) <= tolerance) {
                    return 0;
                }
                else {
                    return rotation;
                }
            }
            else {
                return undefined;
            }
        });
    }

    var __extends$t = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * An animation configuration
     *
     * @typedef {Object} Animation
     * @property {import("./coordinate.js").Coordinate} [sourceCenter]
     * @property {import("./coordinate.js").Coordinate} [targetCenter]
     * @property {number} [sourceResolution]
     * @property {number} [targetResolution]
     * @property {number} [sourceRotation]
     * @property {number} [targetRotation]
     * @property {import("./coordinate.js").Coordinate} [anchor]
     * @property {number} start
     * @property {number} duration
     * @property {boolean} complete
     * @property {function(number):number} easing
     * @property {function(boolean):void} callback
     */
    /**
     * @typedef {Object} Constraints
     * @property {import("./centerconstraint.js").Type} center
     * @property {import("./resolutionconstraint.js").Type} resolution
     * @property {import("./rotationconstraint.js").Type} rotation
     */
    /**
     * @typedef {Object} FitOptions
     * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
     * the extent into. Default is the current size of the first map in the DOM that
     * uses this view, or `[100, 100]` if no such map is found.
     * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
     * cleared inside the view. Values in the array are top, right, bottom and left
     * padding.
     * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
     * get the nearest extent instead of the closest that actually fits the view.
     * @property {number} [minResolution=0] Minimum resolution that we zoom to.
     * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
     * `minResolution` is given, this property is ignored.
     * @property {number} [duration] The duration of the animation in milliseconds.
     * By default, there is no animation to the target extent.
     * @property {function(number):number} [easing] The easing function used during
     * the animation (defaults to {@link module:ol/easing~inAndOut}).
     * The function will be called for each frame with a number representing a
     * fraction of the animation's duration.  The function should return a number
     * between 0 and 1 representing the progress toward the destination state.
     * @property {function(boolean):void} [callback] Function called when the view is in
     * its final position. The callback will be called with `true` if the animation
     * series completed on its own or `false` if it was cancelled.
     */
    /**
     * @typedef {Object} ViewOptions
     * @property {import("./coordinate.js").Coordinate} [center] The initial center for
     * the view. If a user projection is not set, the coordinate system for the center is
     * specified with the `projection` option. Layer sources will not be fetched if this
     * is not set, but the center can be set later with {@link #setCenter}.
     * @property {boolean|number} [constrainRotation=true] Rotation constraint.
     * `false` means no constraint. `true` means no constraint, but snap to zero
     * near zero. A number constrains the rotation to that number of values. For
     * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
     * @property {boolean} [enableRotation=true] Enable rotation.
     * If `false`, a rotation constraint that always sets the rotation to zero is
     * used. The `constrainRotation` option has no effect if `enableRotation` is
     * `false`.
     * @property {import("./extent.js").Extent} [extent] The extent that constrains the
     * view, in other words, nothing outside of this extent can be visible on the map.
     * @property {boolean} [constrainOnlyCenter=false] If true, the extent
     * constraint will only apply to the view center and not the whole extent.
     * @property {boolean} [smoothExtentConstraint=true] If true, the extent
     * constraint will be applied smoothly, i.e. allow the view to go slightly outside
     * of the given `extent`.
     * @property {number} [maxResolution] The maximum resolution used to determine
     * the resolution constraint. It is used together with `minResolution` (or
     * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
     * that the projection's validity extent fits in a 256x256 px tile. If the
     * projection is Spherical Mercator (the default) then `maxResolution` defaults
     * to `40075016.68557849 / 256 = 156543.03392804097`.
     * @property {number} [minResolution] The minimum resolution used to determine
     * the resolution constraint.  It is used together with `maxResolution` (or
     * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
     * zoom levels (with a factor of 2). If the projection is Spherical Mercator
     * (the default) then `minResolution` defaults to
     * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
     * @property {number} [maxZoom=28] The maximum zoom level used to determine the
     * resolution constraint. It is used together with `minZoom` (or
     * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
     * provided, it is given precedence over `maxZoom`.
     * @property {number} [minZoom=0] The minimum zoom level used to determine the
     * resolution constraint. It is used together with `maxZoom` (or
     * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
     * provided, it is given precedence over `minZoom`.
     * @property {boolean} [multiWorld=false] If `false` the view is constrained so
     * only one world is visible, and you cannot pan off the edge.  If `true` the map
     * may show multiple worlds at low zoom levels.  Only used if the `projection` is
     * global.  Note that if `extent` is also provided it is given precedence.
     * @property {boolean} [constrainResolution=false] If true, the view will always
     * animate to the closest zoom level after an interaction; false means
     * intermediary zoom levels are allowed.
     * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
     * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
     * the given resolution or zoom bounds.
     * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
     * show the full configured extent. By default, when a view is configured with an
     * extent, users will not be able to zoom out so the viewport exceeds the extent in
     * either dimension. This means the full extent may not be visible if the viewport
     * is taller or wider than the aspect ratio of the configured extent. If
     * showFullExtent is true, the user will be able to zoom out so that the viewport
     * exceeds the height or width of the configured extent, but not both, allowing the
     * full extent to be shown.
     * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
     * projection. The default is Spherical Mercator.
     * @property {number} [resolution] The initial resolution for the view. The
     * units are `projection` units per pixel (e.g. meters per pixel). An
     * alternative to setting this is to set `zoom`. Layer sources will not be
     * fetched if neither this nor `zoom` are defined, but they can be set later
     * with {@link #setZoom} or {@link #setResolution}.
     * @property {Array<number>} [resolutions] Resolutions to determine the
     * resolution constraint. If set the `maxResolution`, `minResolution`,
     * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
     * @property {number} [rotation=0] The initial rotation for the view in radians
     * (positive rotation clockwise, 0 means North).
     * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
     * level used to calculate the initial resolution for the view.
     * @property {number} [zoomFactor=2] The zoom factor used to compute the
     * corresponding resolution.
     */
    /**
     * @typedef {Object} AnimationOptions
     * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
     * the animation.
     * @property {number} [zoom] The zoom level of the view at the end of the
     * animation. This takes precedence over `resolution`.
     * @property {number} [resolution] The resolution of the view at the end
     * of the animation.  If `zoom` is also provided, this option will be ignored.
     * @property {number} [rotation] The rotation of the view at the end of
     * the animation.
     * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
     * during a rotation or resolution animation.
     * @property {number} [duration=1000] The duration of the animation in milliseconds.
     * @property {function(number):number} [easing] The easing function used
     * during the animation (defaults to {@link module:ol/easing~inAndOut}).
     * The function will be called for each frame with a number representing a
     * fraction of the animation's duration.  The function should return a number
     * between 0 and 1 representing the progress toward the destination state.
     */
    /**
     * @typedef {Object} State
     * @property {import("./coordinate.js").Coordinate} center
     * @property {import("./proj/Projection.js").default} projection
     * @property {number} resolution
     * @property {number} rotation
     * @property {number} zoom
     */
    /**
     * Default min zoom level for the map view.
     * @type {number}
     */
    var DEFAULT_MIN_ZOOM = 0;
    /**
     * @classdesc
     * A View object represents a simple 2D view of the map.
     *
     * This is the object to act upon to change the center, resolution,
     * and rotation of the map.
     *
     * A View has a `projection`. The projection determines the
     * coordinate system of the center, and its units determine the units of the
     * resolution (projection units per pixel). The default projection is
     * Spherical Mercator (EPSG:3857).
     *
     * ### The view states
     *
     * A View is determined by three states: `center`, `resolution`,
     * and `rotation`. Each state has a corresponding getter and setter, e.g.
     * `getCenter` and `setCenter` for the `center` state.
     *
     * The `zoom` state is actually not saved on the view: all computations
     * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
     * methods are available, as well as `getResolutionForZoom` and
     * `getZoomForResolution` to switch from one system to the other.
     *
     * ### The constraints
     *
     * `setCenter`, `setResolution` and `setRotation` can be used to change the
     * states of the view, but any constraint defined in the constructor will
     * be applied along the way.
     *
     * A View object can have a *resolution constraint*, a *rotation constraint*
     * and a *center constraint*.
     *
     * The *resolution constraint* typically restricts min/max values and
     * snaps to specific resolutions. It is determined by the following
     * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
     * If `resolutions` is set, the other three options are ignored. See
     * documentation for each option for more information. By default, the view
     * only has a min/max restriction and allow intermediary zoom levels when
     * pinch-zooming for example.
     *
     * The *rotation constraint* snaps to specific angles. It is determined
     * by the following options: `enableRotation` and `constrainRotation`.
     * By default rotation is allowed and its value is snapped to zero when approaching the
     * horizontal.
     *
     * The *center constraint* is determined by the `extent` option. By
     * default the view center is not constrained at all.
     *
     * ### Changing the view state
     *
     * It is important to note that `setZoom`, `setResolution`, `setCenter` and
     * `setRotation` are subject to the above mentioned constraints. As such, it
     * may sometimes not be possible to know in advance the resulting state of the
     * View. For example, calling `setResolution(10)` does not guarantee that
     * `getResolution()` will return `10`.
     *
     * A consequence of this is that, when applying a delta on the view state, one
     * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
     * rather than the corresponding setters. This will let view do its internal
     * computations. Besides, the `adjust*` methods also take an `opt_anchor`
     * argument which allows specifying an origin for the transformation.
     *
     * ### Interacting with the view
     *
     * View constraints are usually only applied when the view is *at rest*, meaning that
     * no interaction or animation is ongoing. As such, if the user puts the view in a
     * state that is not equivalent to a constrained one (e.g. rotating the view when
     * the snap angle is 0), an animation will be triggered at the interaction end to
     * put back the view to a stable state;
     *
     * @api
     */
    var View = /** @class */ (function (_super) {
        __extends$t(View, _super);
        /**
         * @param {ViewOptions=} opt_options View options.
         */
        function View(opt_options) {
            var _this = _super.call(this) || this;
            var options = assign({}, opt_options);
            /**
             * @private
             * @type {Array<number>}
             */
            _this.hints_ = [0, 0];
            /**
             * @private
             * @type {Array<Array<Animation>>}
             */
            _this.animations_ = [];
            /**
             * @private
             * @type {number|undefined}
             */
            _this.updateAnimationKey_;
            /**
             * @private
             * @const
             * @type {import("./proj/Projection.js").default}
             */
            _this.projection_ = createProjection(options.projection, 'EPSG:3857');
            /**
             * @private
             * @type {import("./size.js").Size}
             */
            _this.viewportSize_ = [100, 100];
            /**
             * @private
             * @type {import("./coordinate.js").Coordinate|undefined}
             */
            _this.targetCenter_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.targetResolution_;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.targetRotation_;
            /**
             * @private
             * @type {import("./coordinate.js").Coordinate|undefined}
             */
            _this.cancelAnchor_ = undefined;
            if (options.center) {
                options.center = fromUserCoordinate(options.center, _this.projection_);
            }
            if (options.extent) {
                options.extent = fromUserExtent(options.extent, _this.projection_);
            }
            _this.applyOptions_(options);
            return _this;
        }
        /**
         * Set up the view with the given options.
         * @param {ViewOptions} options View options.
         */
        View.prototype.applyOptions_ = function (options) {
            /**
             * @type {Object<string, *>}
             */
            var properties = {};
            var resolutionConstraintInfo = createResolutionConstraint(options);
            /**
             * @private
             * @type {number}
             */
            this.maxResolution_ = resolutionConstraintInfo.maxResolution;
            /**
             * @private
             * @type {number}
             */
            this.minResolution_ = resolutionConstraintInfo.minResolution;
            /**
             * @private
             * @type {number}
             */
            this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;
            /**
             * @private
             * @type {Array<number>|undefined}
             */
            this.resolutions_ = options.resolutions;
            /**
             * @private
             * @type {number}
             */
            this.minZoom_ = resolutionConstraintInfo.minZoom;
            var centerConstraint = createCenterConstraint(options);
            var resolutionConstraint = resolutionConstraintInfo.constraint;
            var rotationConstraint = createRotationConstraint(options);
            /**
             * @private
             * @type {Constraints}
             */
            this.constraints_ = {
                center: centerConstraint,
                resolution: resolutionConstraint,
                rotation: rotationConstraint,
            };
            this.setRotation(options.rotation !== undefined ? options.rotation : 0);
            this.setCenterInternal(options.center !== undefined ? options.center : null);
            if (options.resolution !== undefined) {
                this.setResolution(options.resolution);
            }
            else if (options.zoom !== undefined) {
                this.setZoom(options.zoom);
            }
            this.setProperties(properties);
            /**
             * @private
             * @type {ViewOptions}
             */
            this.options_ = options;
        };
        /**
         * Get an updated version of the view options used to construct the view.  The
         * current resolution (or zoom), center, and rotation are applied to any stored
         * options.  The provided options can be used to apply new min/max zoom or
         * resolution limits.
         * @param {ViewOptions} newOptions New options to be applied.
         * @return {ViewOptions} New options updated with the current view state.
         */
        View.prototype.getUpdatedOptions_ = function (newOptions) {
            var options = assign({}, this.options_);
            // preserve resolution (or zoom)
            if (options.resolution !== undefined) {
                options.resolution = this.getResolution();
            }
            else {
                options.zoom = this.getZoom();
            }
            // preserve center
            options.center = this.getCenterInternal();
            // preserve rotation
            options.rotation = this.getRotation();
            return assign({}, options, newOptions);
        };
        /**
         * Animate the view.  The view's center, zoom (or resolution), and rotation
         * can be animated for smooth transitions between view states.  For example,
         * to animate the view to a new zoom level:
         *
         *     view.animate({zoom: view.getZoom() + 1});
         *
         * By default, the animation lasts one second and uses in-and-out easing.  You
         * can customize this behavior by including `duration` (in milliseconds) and
         * `easing` options (see {@link module:ol/easing}).
         *
         * To chain together multiple animations, call the method with multiple
         * animation objects.  For example, to first zoom and then pan:
         *
         *     view.animate({zoom: 10}, {center: [0, 0]});
         *
         * If you provide a function as the last argument to the animate method, it
         * will get called at the end of an animation series.  The callback will be
         * called with `true` if the animation series completed on its own or `false`
         * if it was cancelled.
         *
         * Animations are cancelled by user interactions (e.g. dragging the map) or by
         * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
         * (or another method that calls one of these).
         *
         * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
         *     options.  Multiple animations can be run in series by passing multiple
         *     options objects.  To run multiple animations in parallel, call the method
         *     multiple times.  An optional callback can be provided as a final
         *     argument.  The callback will be called with a boolean indicating whether
         *     the animation completed without being cancelled.
         * @api
         */
        View.prototype.animate = function (var_args) {
            if (this.isDef() && !this.getAnimating()) {
                this.resolveConstraints(0);
            }
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; ++i) {
                var options = arguments[i];
                if (options.center) {
                    options = assign({}, options);
                    options.center = fromUserCoordinate(options.center, this.getProjection());
                }
                if (options.anchor) {
                    options = assign({}, options);
                    options.anchor = fromUserCoordinate(options.anchor, this.getProjection());
                }
                args[i] = options;
            }
            this.animateInternal.apply(this, args);
        };
        /**
         * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
         */
        View.prototype.animateInternal = function (var_args) {
            var animationCount = arguments.length;
            var callback;
            if (animationCount > 1 &&
                typeof arguments[animationCount - 1] === 'function') {
                callback = arguments[animationCount - 1];
                --animationCount;
            }
            if (!this.isDef()) {
                // if view properties are not yet set, shortcut to the final state
                var state = arguments[animationCount - 1];
                if (state.center) {
                    this.setCenterInternal(state.center);
                }
                if (state.zoom !== undefined) {
                    this.setZoom(state.zoom);
                }
                if (state.rotation !== undefined) {
                    this.setRotation(state.rotation);
                }
                if (callback) {
                    animationCallback(callback, true);
                }
                return;
            }
            var start = Date.now();
            var center = this.targetCenter_.slice();
            var resolution = this.targetResolution_;
            var rotation = this.targetRotation_;
            var series = [];
            for (var i = 0; i < animationCount; ++i) {
                var options = /** @type {AnimationOptions} */ (arguments[i]);
                var animation = {
                    start: start,
                    complete: false,
                    anchor: options.anchor,
                    duration: options.duration !== undefined ? options.duration : 1000,
                    easing: options.easing || inAndOut,
                    callback: callback,
                };
                if (options.center) {
                    animation.sourceCenter = center;
                    animation.targetCenter = options.center.slice();
                    center = animation.targetCenter;
                }
                if (options.zoom !== undefined) {
                    animation.sourceResolution = resolution;
                    animation.targetResolution = this.getResolutionForZoom(options.zoom);
                    resolution = animation.targetResolution;
                }
                else if (options.resolution) {
                    animation.sourceResolution = resolution;
                    animation.targetResolution = options.resolution;
                    resolution = animation.targetResolution;
                }
                if (options.rotation !== undefined) {
                    animation.sourceRotation = rotation;
                    var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
                    animation.targetRotation = rotation + delta;
                    rotation = animation.targetRotation;
                }
                // check if animation is a no-op
                if (isNoopAnimation(animation)) {
                    animation.complete = true;
                    // we still push it onto the series for callback handling
                }
                else {
                    start += animation.duration;
                }
                series.push(animation);
            }
            this.animations_.push(series);
            this.setHint(ViewHint.ANIMATING, 1);
            this.updateAnimations_();
        };
        /**
         * Determine if the view is being animated.
         * @return {boolean} The view is being animated.
         * @api
         */
        View.prototype.getAnimating = function () {
            return this.hints_[ViewHint.ANIMATING] > 0;
        };
        /**
         * Determine if the user is interacting with the view, such as panning or zooming.
         * @return {boolean} The view is being interacted with.
         * @api
         */
        View.prototype.getInteracting = function () {
            return this.hints_[ViewHint.INTERACTING] > 0;
        };
        /**
         * Cancel any ongoing animations.
         * @api
         */
        View.prototype.cancelAnimations = function () {
            this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
            var anchor;
            for (var i = 0, ii = this.animations_.length; i < ii; ++i) {
                var series = this.animations_[i];
                if (series[0].callback) {
                    animationCallback(series[0].callback, false);
                }
                if (!anchor) {
                    for (var j = 0, jj = series.length; j < jj; ++j) {
                        var animation = series[j];
                        if (!animation.complete) {
                            anchor = animation.anchor;
                            break;
                        }
                    }
                }
            }
            this.animations_.length = 0;
            this.cancelAnchor_ = anchor;
        };
        /**
         * Update all animations.
         */
        View.prototype.updateAnimations_ = function () {
            if (this.updateAnimationKey_ !== undefined) {
                cancelAnimationFrame(this.updateAnimationKey_);
                this.updateAnimationKey_ = undefined;
            }
            if (!this.getAnimating()) {
                return;
            }
            var now = Date.now();
            var more = false;
            for (var i = this.animations_.length - 1; i >= 0; --i) {
                var series = this.animations_[i];
                var seriesComplete = true;
                for (var j = 0, jj = series.length; j < jj; ++j) {
                    var animation = series[j];
                    if (animation.complete) {
                        continue;
                    }
                    var elapsed = now - animation.start;
                    var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
                    if (fraction >= 1) {
                        animation.complete = true;
                        fraction = 1;
                    }
                    else {
                        seriesComplete = false;
                    }
                    var progress = animation.easing(fraction);
                    if (animation.sourceCenter) {
                        var x0 = animation.sourceCenter[0];
                        var y0 = animation.sourceCenter[1];
                        var x1 = animation.targetCenter[0];
                        var y1 = animation.targetCenter[1];
                        var x = x0 + progress * (x1 - x0);
                        var y = y0 + progress * (y1 - y0);
                        this.targetCenter_ = [x, y];
                    }
                    if (animation.sourceResolution && animation.targetResolution) {
                        var resolution = progress === 1
                            ? animation.targetResolution
                            : animation.sourceResolution +
                                progress *
                                    (animation.targetResolution - animation.sourceResolution);
                        if (animation.anchor) {
                            var size = this.getViewportSize_(this.getRotation());
                            var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
                            this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
                        }
                        this.targetResolution_ = resolution;
                        this.applyTargetState_(true);
                    }
                    if (animation.sourceRotation !== undefined &&
                        animation.targetRotation !== undefined) {
                        var rotation = progress === 1
                            ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -
                                Math.PI
                            : animation.sourceRotation +
                                progress *
                                    (animation.targetRotation - animation.sourceRotation);
                        if (animation.anchor) {
                            var constrainedRotation = this.constraints_.rotation(rotation, true);
                            this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
                        }
                        this.targetRotation_ = rotation;
                    }
                    this.applyTargetState_(true);
                    more = true;
                    if (!animation.complete) {
                        break;
                    }
                }
                if (seriesComplete) {
                    this.animations_[i] = null;
                    this.setHint(ViewHint.ANIMATING, -1);
                    var callback = series[0].callback;
                    if (callback) {
                        animationCallback(callback, true);
                    }
                }
            }
            // prune completed series
            this.animations_ = this.animations_.filter(Boolean);
            if (more && this.updateAnimationKey_ === undefined) {
                this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
            }
        };
        /**
         * @param {number} rotation Target rotation.
         * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
         * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
         */
        View.prototype.calculateCenterRotate = function (rotation, anchor) {
            var center;
            var currentCenter = this.getCenterInternal();
            if (currentCenter !== undefined) {
                center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
                rotate(center, rotation - this.getRotation());
                add$2(center, anchor);
            }
            return center;
        };
        /**
         * @param {number} resolution Target resolution.
         * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
         * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
         */
        View.prototype.calculateCenterZoom = function (resolution, anchor) {
            var center;
            var currentCenter = this.getCenterInternal();
            var currentResolution = this.getResolution();
            if (currentCenter !== undefined && currentResolution !== undefined) {
                var x = anchor[0] -
                    (resolution * (anchor[0] - currentCenter[0])) / currentResolution;
                var y = anchor[1] -
                    (resolution * (anchor[1] - currentCenter[1])) / currentResolution;
                center = [x, y];
            }
            return center;
        };
        /**
         * Returns the current viewport size.
         * @private
         * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size
         * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
         */
        View.prototype.getViewportSize_ = function (opt_rotation) {
            var size = this.viewportSize_;
            if (opt_rotation) {
                var w = size[0];
                var h = size[1];
                return [
                    Math.abs(w * Math.cos(opt_rotation)) +
                        Math.abs(h * Math.sin(opt_rotation)),
                    Math.abs(w * Math.sin(opt_rotation)) +
                        Math.abs(h * Math.cos(opt_rotation)),
                ];
            }
            else {
                return size;
            }
        };
        /**
         * Stores the viewport size on the view. The viewport size is not read every time from the DOM
         * to avoid performance hit and layout reflow.
         * This should be done on map size change.
         * Note: the constraints are not resolved during an animation to avoid stopping it
         * @param {import("./size.js").Size=} opt_size Viewport size; if undefined, [100, 100] is assumed
         */
        View.prototype.setViewportSize = function (opt_size) {
            this.viewportSize_ = Array.isArray(opt_size)
                ? opt_size.slice()
                : [100, 100];
            if (!this.getAnimating()) {
                this.resolveConstraints(0);
            }
        };
        /**
         * Get the view center.
         * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
         * @observable
         * @api
         */
        View.prototype.getCenter = function () {
            var center = this.getCenterInternal();
            if (!center) {
                return center;
            }
            return toUserCoordinate(center, this.getProjection());
        };
        /**
         * Get the view center without transforming to user projection.
         * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
         */
        View.prototype.getCenterInternal = function () {
            return /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty.CENTER));
        };
        /**
         * @return {Constraints} Constraints.
         */
        View.prototype.getConstraints = function () {
            return this.constraints_;
        };
        /**
         * @return {boolean} Resolution constraint is set
         */
        View.prototype.getConstrainResolution = function () {
            return this.options_.constrainResolution;
        };
        /**
         * @param {Array<number>=} opt_hints Destination array.
         * @return {Array<number>} Hint.
         */
        View.prototype.getHints = function (opt_hints) {
            if (opt_hints !== undefined) {
                opt_hints[0] = this.hints_[0];
                opt_hints[1] = this.hints_[1];
                return opt_hints;
            }
            else {
                return this.hints_.slice();
            }
        };
        /**
         * Calculate the extent for the current view state and the passed size.
         * The size is the pixel dimensions of the box into which the calculated extent
         * should fit. In most cases you want to get the extent of the entire map,
         * that is `map.getSize()`.
         * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size
         * of the map that uses this view will be used.
         * @return {import("./extent.js").Extent} Extent.
         * @api
         */
        View.prototype.calculateExtent = function (opt_size) {
            var extent = this.calculateExtentInternal(opt_size);
            return toUserExtent(extent, this.getProjection());
        };
        /**
         * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
         * first map that uses this view will be used.
         * @return {import("./extent.js").Extent} Extent.
         */
        View.prototype.calculateExtentInternal = function (opt_size) {
            var size = opt_size || this.getViewportSize_();
            var center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
            assert(center, 1); // The view center is not defined
            var resolution = /** @type {!number} */ (this.getResolution());
            assert(resolution !== undefined, 2); // The view resolution is not defined
            var rotation = /** @type {!number} */ (this.getRotation());
            assert(rotation !== undefined, 3); // The view rotation is not defined
            return getForViewAndSize(center, resolution, rotation, size);
        };
        /**
         * Get the maximum resolution of the view.
         * @return {number} The maximum resolution of the view.
         * @api
         */
        View.prototype.getMaxResolution = function () {
            return this.maxResolution_;
        };
        /**
         * Get the minimum resolution of the view.
         * @return {number} The minimum resolution of the view.
         * @api
         */
        View.prototype.getMinResolution = function () {
            return this.minResolution_;
        };
        /**
         * Get the maximum zoom level for the view.
         * @return {number} The maximum zoom level.
         * @api
         */
        View.prototype.getMaxZoom = function () {
            return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
        };
        /**
         * Set a new maximum zoom level for the view.
         * @param {number} zoom The maximum zoom level.
         * @api
         */
        View.prototype.setMaxZoom = function (zoom) {
            this.applyOptions_(this.getUpdatedOptions_({ maxZoom: zoom }));
        };
        /**
         * Get the minimum zoom level for the view.
         * @return {number} The minimum zoom level.
         * @api
         */
        View.prototype.getMinZoom = function () {
            return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
        };
        /**
         * Set a new minimum zoom level for the view.
         * @param {number} zoom The minimum zoom level.
         * @api
         */
        View.prototype.setMinZoom = function (zoom) {
            this.applyOptions_(this.getUpdatedOptions_({ minZoom: zoom }));
        };
        /**
         * Set whether the view shoud allow intermediary zoom levels.
         * @param {boolean} enabled Whether the resolution is constrained.
         * @api
         */
        View.prototype.setConstrainResolution = function (enabled) {
            this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: enabled }));
        };
        /**
         * Get the view projection.
         * @return {import("./proj/Projection.js").default} The projection of the view.
         * @api
         */
        View.prototype.getProjection = function () {
            return this.projection_;
        };
        /**
         * Get the view resolution.
         * @return {number|undefined} The resolution of the view.
         * @observable
         * @api
         */
        View.prototype.getResolution = function () {
            return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
        };
        /**
         * Get the resolutions for the view. This returns the array of resolutions
         * passed to the constructor of the View, or undefined if none were given.
         * @return {Array<number>|undefined} The resolutions of the view.
         * @api
         */
        View.prototype.getResolutions = function () {
            return this.resolutions_;
        };
        /**
         * Get the resolution for a provided extent (in map units) and size (in pixels).
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {import("./size.js").Size=} opt_size Box pixel size.
         * @return {number} The resolution at which the provided extent will render at
         *     the given size.
         * @api
         */
        View.prototype.getResolutionForExtent = function (extent, opt_size) {
            return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);
        };
        /**
         * Get the resolution for a provided extent (in map units) and size (in pixels).
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {import("./size.js").Size=} opt_size Box pixel size.
         * @return {number} The resolution at which the provided extent will render at
         *     the given size.
         */
        View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {
            var size = opt_size || this.getViewportSize_();
            var xResolution = getWidth(extent) / size[0];
            var yResolution = getHeight(extent) / size[1];
            return Math.max(xResolution, yResolution);
        };
        /**
         * Return a function that returns a value between 0 and 1 for a
         * resolution. Exponential scaling is assumed.
         * @param {number=} opt_power Power.
         * @return {function(number): number} Resolution for value function.
         */
        View.prototype.getResolutionForValueFunction = function (opt_power) {
            var power = opt_power || 2;
            var maxResolution = this.getConstrainedResolution(this.maxResolution_);
            var minResolution = this.minResolution_;
            var max = Math.log(maxResolution / minResolution) / Math.log(power);
            return (
            /**
             * @param {number} value Value.
             * @return {number} Resolution.
             */
            function (value) {
                var resolution = maxResolution / Math.pow(power, value * max);
                return resolution;
            });
        };
        /**
         * Get the view rotation.
         * @return {number} The rotation of the view in radians.
         * @observable
         * @api
         */
        View.prototype.getRotation = function () {
            return /** @type {number} */ (this.get(ViewProperty.ROTATION));
        };
        /**
         * Return a function that returns a resolution for a value between
         * 0 and 1. Exponential scaling is assumed.
         * @param {number=} opt_power Power.
         * @return {function(number): number} Value for resolution function.
         */
        View.prototype.getValueForResolutionFunction = function (opt_power) {
            var logPower = Math.log(opt_power || 2);
            var maxResolution = this.getConstrainedResolution(this.maxResolution_);
            var minResolution = this.minResolution_;
            var max = Math.log(maxResolution / minResolution) / logPower;
            return (
            /**
             * @param {number} resolution Resolution.
             * @return {number} Value.
             */
            function (resolution) {
                var value = Math.log(maxResolution / resolution) / logPower / max;
                return value;
            });
        };
        /**
         * @return {State} View state.
         */
        View.prototype.getState = function () {
            var center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
            var projection = this.getProjection();
            var resolution = /** @type {number} */ (this.getResolution());
            var rotation = this.getRotation();
            return {
                center: center.slice(0),
                projection: projection !== undefined ? projection : null,
                resolution: resolution,
                rotation: rotation,
                zoom: this.getZoom(),
            };
        };
        /**
         * Get the current zoom level. This method may return non-integer zoom levels
         * if the view does not constrain the resolution, or if an interaction or
         * animation is underway.
         * @return {number|undefined} Zoom.
         * @api
         */
        View.prototype.getZoom = function () {
            var zoom;
            var resolution = this.getResolution();
            if (resolution !== undefined) {
                zoom = this.getZoomForResolution(resolution);
            }
            return zoom;
        };
        /**
         * Get the zoom level for a resolution.
         * @param {number} resolution The resolution.
         * @return {number|undefined} The zoom level for the provided resolution.
         * @api
         */
        View.prototype.getZoomForResolution = function (resolution) {
            var offset = this.minZoom_ || 0;
            var max, zoomFactor;
            if (this.resolutions_) {
                var nearest = linearFindNearest(this.resolutions_, resolution, 1);
                offset = nearest;
                max = this.resolutions_[nearest];
                if (nearest == this.resolutions_.length - 1) {
                    zoomFactor = 2;
                }
                else {
                    zoomFactor = max / this.resolutions_[nearest + 1];
                }
            }
            else {
                max = this.maxResolution_;
                zoomFactor = this.zoomFactor_;
            }
            return offset + Math.log(max / resolution) / Math.log(zoomFactor);
        };
        /**
         * Get the resolution for a zoom level.
         * @param {number} zoom Zoom level.
         * @return {number} The view resolution for the provided zoom level.
         * @api
         */
        View.prototype.getResolutionForZoom = function (zoom) {
            if (this.resolutions_) {
                if (this.resolutions_.length <= 1) {
                    return 0;
                }
                var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);
                var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
                return (this.resolutions_[baseLevel] /
                    Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1)));
            }
            else {
                return (this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_));
            }
        };
        /**
         * Fit the given geometry or extent based on the given map size and border.
         * The size is pixel dimensions of the box to fit the extent into.
         * In most cases you will want to use the map size, that is `map.getSize()`.
         * Takes care of the map angle.
         * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
         *     extent to fit the view to.
         * @param {FitOptions=} opt_options Options.
         * @api
         */
        View.prototype.fit = function (geometryOrExtent, opt_options) {
            var options = assign({ size: this.getViewportSize_() }, opt_options || {});
            /** @type {import("./geom/SimpleGeometry.js").default} */
            var geometry;
            assert(Array.isArray(geometryOrExtent) ||
                typeof ( /** @type {?} */(geometryOrExtent).getSimplifiedGeometry) ===
                    'function', 24); // Invalid extent or geometry provided as `geometry`
            if (Array.isArray(geometryOrExtent)) {
                assert(!isEmpty$1(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
                var extent = fromUserExtent(geometryOrExtent, this.getProjection());
                geometry = fromExtent(extent);
            }
            else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {
                var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());
                geometry = fromExtent(extent);
                geometry.rotate(this.getRotation(), getCenter(extent));
            }
            else {
                var userProjection = getUserProjection();
                if (userProjection) {
                    geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometryOrExtent
                        .clone()
                        .transform(userProjection, this.getProjection()));
                }
                else {
                    geometry = geometryOrExtent;
                }
            }
            this.fitInternal(geometry, options);
        };
        /**
         * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
         * @param {FitOptions=} opt_options Options.
         */
        View.prototype.fitInternal = function (geometry, opt_options) {
            var options = opt_options || {};
            var size = options.size;
            if (!size) {
                size = this.getViewportSize_();
            }
            var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
            var nearest = options.nearest !== undefined ? options.nearest : false;
            var minResolution;
            if (options.minResolution !== undefined) {
                minResolution = options.minResolution;
            }
            else if (options.maxZoom !== undefined) {
                minResolution = this.getResolutionForZoom(options.maxZoom);
            }
            else {
                minResolution = 0;
            }
            var coords = geometry.getFlatCoordinates();
            // calculate rotated extent
            var rotation = this.getRotation();
            var cosAngle = Math.cos(-rotation);
            var sinAngle = Math.sin(-rotation);
            var minRotX = +Infinity;
            var minRotY = +Infinity;
            var maxRotX = -Infinity;
            var maxRotY = -Infinity;
            var stride = geometry.getStride();
            for (var i = 0, ii = coords.length; i < ii; i += stride) {
                var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
                var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
                minRotX = Math.min(minRotX, rotX);
                minRotY = Math.min(minRotY, rotY);
                maxRotX = Math.max(maxRotX, rotX);
                maxRotY = Math.max(maxRotY, rotY);
            }
            // calculate resolution
            var resolution = this.getResolutionForExtentInternal([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
            resolution = isNaN(resolution)
                ? minResolution
                : Math.max(resolution, minResolution);
            resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);
            // calculate center
            sinAngle = -sinAngle; // go back to original rotation
            var centerRotX = (minRotX + maxRotX) / 2;
            var centerRotY = (minRotY + maxRotY) / 2;
            centerRotX += ((padding[1] - padding[3]) / 2) * resolution;
            centerRotY += ((padding[0] - padding[2]) / 2) * resolution;
            var centerX = centerRotX * cosAngle - centerRotY * sinAngle;
            var centerY = centerRotY * cosAngle + centerRotX * sinAngle;
            var center = [centerX, centerY];
            var callback = options.callback ? options.callback : VOID;
            if (options.duration !== undefined) {
                this.animateInternal({
                    resolution: resolution,
                    center: this.getConstrainedCenter(center, resolution),
                    duration: options.duration,
                    easing: options.easing,
                }, callback);
            }
            else {
                this.targetResolution_ = resolution;
                this.targetCenter_ = center;
                this.applyTargetState_(false, true);
                animationCallback(callback, true);
            }
        };
        /**
         * Center on coordinate and view position.
         * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("./size.js").Size} size Box pixel size.
         * @param {import("./pixel.js").Pixel} position Position on the view to center on.
         * @api
         */
        View.prototype.centerOn = function (coordinate, size, position) {
            this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);
        };
        /**
         * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("./size.js").Size} size Box pixel size.
         * @param {import("./pixel.js").Pixel} position Position on the view to center on.
         */
        View.prototype.centerOnInternal = function (coordinate, size, position) {
            // calculate rotated position
            var rotation = this.getRotation();
            var cosAngle = Math.cos(-rotation);
            var sinAngle = Math.sin(-rotation);
            var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
            var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
            var resolution = this.getResolution();
            rotX += (size[0] / 2 - position[0]) * resolution;
            rotY += (position[1] - size[1] / 2) * resolution;
            // go back to original angle
            sinAngle = -sinAngle; // go back to original rotation
            var centerX = rotX * cosAngle - rotY * sinAngle;
            var centerY = rotY * cosAngle + rotX * sinAngle;
            this.setCenterInternal([centerX, centerY]);
        };
        /**
         * @return {boolean} Is defined.
         */
        View.prototype.isDef = function () {
            return !!this.getCenterInternal() && this.getResolution() !== undefined;
        };
        /**
         * Adds relative coordinates to the center of the view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
         * @api
         */
        View.prototype.adjustCenter = function (deltaCoordinates) {
            var center = toUserCoordinate(this.targetCenter_, this.getProjection());
            this.setCenter([
                center[0] + deltaCoordinates[0],
                center[1] + deltaCoordinates[1],
            ]);
        };
        /**
         * Adds relative coordinates to the center of the view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
         */
        View.prototype.adjustCenterInternal = function (deltaCoordinates) {
            var center = this.targetCenter_;
            this.setCenterInternal([
                center[0] + deltaCoordinates[0],
                center[1] + deltaCoordinates[1],
            ]);
        };
        /**
         * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} ratio The ratio to apply on the view resolution.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        View.prototype.adjustResolution = function (ratio, opt_anchor) {
            var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
            this.adjustResolutionInternal(ratio, anchor);
        };
        /**
         * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} ratio The ratio to apply on the view resolution.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {
            var isMoving = this.getAnimating() || this.getInteracting();
            var size = this.getViewportSize_(this.getRotation());
            var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);
            if (opt_anchor) {
                this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);
            }
            this.targetResolution_ *= ratio;
            this.applyTargetState_();
        };
        /**
         * Adds a value to the view zoom level, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} delta Relative value to add to the zoom level.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        View.prototype.adjustZoom = function (delta, opt_anchor) {
            this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);
        };
        /**
         * Adds a value to the view rotation, optionally using an anchor. Any rotation
         * constraint will apply.
         * @param {number} delta Relative value to add to the zoom rotation, in radians.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
         * @api
         */
        View.prototype.adjustRotation = function (delta, opt_anchor) {
            if (opt_anchor) {
                opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());
            }
            this.adjustRotationInternal(delta, opt_anchor);
        };
        /**
         * @param {number} delta Relative value to add to the zoom rotation, in radians.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
         */
        View.prototype.adjustRotationInternal = function (delta, opt_anchor) {
            var isMoving = this.getAnimating() || this.getInteracting();
            var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
            if (opt_anchor) {
                this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);
            }
            this.targetRotation_ += delta;
            this.applyTargetState_();
        };
        /**
         * Set the center of the current view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
         * @observable
         * @api
         */
        View.prototype.setCenter = function (center) {
            this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));
        };
        /**
         * Set the center using the view projection (not the user projection).
         * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
         */
        View.prototype.setCenterInternal = function (center) {
            this.targetCenter_ = center;
            this.applyTargetState_();
        };
        /**
         * @param {import("./ViewHint.js").default} hint Hint.
         * @param {number} delta Delta.
         * @return {number} New value.
         */
        View.prototype.setHint = function (hint, delta) {
            this.hints_[hint] += delta;
            this.changed();
            return this.hints_[hint];
        };
        /**
         * Set the resolution for this view. Any resolution constraint will apply.
         * @param {number|undefined} resolution The resolution of the view.
         * @observable
         * @api
         */
        View.prototype.setResolution = function (resolution) {
            this.targetResolution_ = resolution;
            this.applyTargetState_();
        };
        /**
         * Set the rotation for this view. Any rotation constraint will apply.
         * @param {number} rotation The rotation of the view in radians.
         * @observable
         * @api
         */
        View.prototype.setRotation = function (rotation) {
            this.targetRotation_ = rotation;
            this.applyTargetState_();
        };
        /**
         * Zoom to a specific zoom level. Any resolution constrain will apply.
         * @param {number} zoom Zoom level.
         * @api
         */
        View.prototype.setZoom = function (zoom) {
            this.setResolution(this.getResolutionForZoom(zoom));
        };
        /**
         * Recompute rotation/resolution/center based on target values.
         * Note: we have to compute rotation first, then resolution and center considering that
         * parameters can influence one another in case a view extent constraint is present.
         * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.
         * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.
         * @private
         */
        View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {
            var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;
            // compute rotation
            var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
            var size = this.getViewportSize_(newRotation);
            var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
            var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving);
            if (this.get(ViewProperty.ROTATION) !== newRotation) {
                this.set(ViewProperty.ROTATION, newRotation);
            }
            if (this.get(ViewProperty.RESOLUTION) !== newResolution) {
                this.set(ViewProperty.RESOLUTION, newResolution);
            }
            if (!this.get(ViewProperty.CENTER) ||
                !equals$2(this.get(ViewProperty.CENTER), newCenter)) {
                this.set(ViewProperty.CENTER, newCenter);
            }
            if (this.getAnimating() && !opt_doNotCancelAnims) {
                this.cancelAnimations();
            }
            this.cancelAnchor_ = undefined;
        };
        /**
         * If any constraints need to be applied, an animation will be triggered.
         * This is typically done on interaction end.
         * Note: calling this with a duration of 0 will apply the constrained values straight away,
         * without animation.
         * @param {number=} opt_duration The animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {
            var duration = opt_duration !== undefined ? opt_duration : 200;
            var direction = opt_resolutionDirection || 0;
            var newRotation = this.constraints_.rotation(this.targetRotation_);
            var size = this.getViewportSize_(newRotation);
            var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
            var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size);
            if (duration === 0 && !this.cancelAnchor_) {
                this.targetResolution_ = newResolution;
                this.targetRotation_ = newRotation;
                this.targetCenter_ = newCenter;
                this.applyTargetState_();
                return;
            }
            var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
            this.cancelAnchor_ = undefined;
            if (this.getResolution() !== newResolution ||
                this.getRotation() !== newRotation ||
                !this.getCenterInternal() ||
                !equals$2(this.getCenterInternal(), newCenter)) {
                if (this.getAnimating()) {
                    this.cancelAnimations();
                }
                this.animateInternal({
                    rotation: newRotation,
                    center: newCenter,
                    resolution: newResolution,
                    duration: duration,
                    easing: easeOut,
                    anchor: anchor,
                });
            }
        };
        /**
         * Notify the View that an interaction has started.
         * The view state will be resolved to a stable one if needed
         * (depending on its constraints).
         * @api
         */
        View.prototype.beginInteraction = function () {
            this.resolveConstraints(0);
            this.setHint(ViewHint.INTERACTING, 1);
        };
        /**
         * Notify the View that an interaction has ended. The view state will be resolved
         * to a stable one if needed (depending on its constraints).
         * @param {number=} opt_duration Animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {
            var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
            this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);
        };
        /**
         * Notify the View that an interaction has ended. The view state will be resolved
         * to a stable one if needed (depending on its constraints).
         * @param {number=} opt_duration Animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {
            this.setHint(ViewHint.INTERACTING, -1);
            this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);
        };
        /**
         * Get a valid position for the view center according to the current constraints.
         * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
         * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.
         * This is useful to guess a valid center position at a different zoom level.
         * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
         */
        View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {
            var size = this.getViewportSize_(this.getRotation());
            return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);
        };
        /**
         * Get a valid zoom level according to the current view constraints.
         * @param {number|undefined} targetZoom Target zoom.
         * @param {number=} [opt_direction=0] Indicate which resolution should be used
         * by a renderer if the view resolution does not match any resolution of the tile source.
         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
         * will be used. If -1, the nearest higher resolution will be used.
         * @return {number|undefined} Valid zoom level.
         */
        View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {
            var targetRes = this.getResolutionForZoom(targetZoom);
            return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));
        };
        /**
         * Get a valid resolution according to the current view constraints.
         * @param {number|undefined} targetResolution Target resolution.
         * @param {number=} [opt_direction=0] Indicate which resolution should be used
         * by a renderer if the view resolution does not match any resolution of the tile source.
         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
         * will be used. If -1, the nearest higher resolution will be used.
         * @return {number|undefined} Valid resolution.
         */
        View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {
            var direction = opt_direction || 0;
            var size = this.getViewportSize_(this.getRotation());
            return this.constraints_.resolution(targetResolution, direction, size);
        };
        return View;
    }(BaseObject));
    /**
     * @param {Function} callback Callback.
     * @param {*} returnValue Return value.
     */
    function animationCallback(callback, returnValue) {
        setTimeout(function () {
            callback(returnValue);
        }, 0);
    }
    /**
     * @param {ViewOptions} options View options.
     * @return {import("./centerconstraint.js").Type} The constraint.
     */
    function createCenterConstraint(options) {
        if (options.extent !== undefined) {
            var smooth = options.smoothExtentConstraint !== undefined
                ? options.smoothExtentConstraint
                : true;
            return createExtent(options.extent, options.constrainOnlyCenter, smooth);
        }
        var projection = createProjection(options.projection, 'EPSG:3857');
        if (options.multiWorld !== true && projection.isGlobal()) {
            var extent = projection.getExtent().slice();
            extent[0] = -Infinity;
            extent[2] = Infinity;
            return createExtent(extent, false, false);
        }
        return none;
    }
    /**
     * @param {ViewOptions} options View options.
     * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
     *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
     */
    function createResolutionConstraint(options) {
        var resolutionConstraint;
        var maxResolution;
        var minResolution;
        // TODO: move these to be ol constants
        // see https://github.com/openlayers/openlayers/issues/2076
        var defaultMaxZoom = 28;
        var defaultZoomFactor = 2;
        var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;
        var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;
        var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;
        var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;
        var smooth = options.smoothResolutionConstraint !== undefined
            ? options.smoothResolutionConstraint
            : true;
        var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;
        var projection = createProjection(options.projection, 'EPSG:3857');
        var projExtent = projection.getExtent();
        var constrainOnlyCenter = options.constrainOnlyCenter;
        var extent = options.extent;
        if (!multiWorld && !extent && projection.isGlobal()) {
            constrainOnlyCenter = false;
            extent = projExtent;
        }
        if (options.resolutions !== undefined) {
            var resolutions = options.resolutions;
            maxResolution = resolutions[minZoom];
            minResolution =
                resolutions[maxZoom] !== undefined
                    ? resolutions[maxZoom]
                    : resolutions[resolutions.length - 1];
            if (options.constrainResolution) {
                resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
            else {
                resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
        }
        else {
            // calculate the default min and max resolution
            var size = !projExtent
                ? // use an extent that can fit the whole world if need be
                    (360 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit()
                : Math.max(getWidth(projExtent), getHeight(projExtent));
            var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);
            var defaultMinResolution = defaultMaxResolution /
                Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);
            // user provided maxResolution takes precedence
            maxResolution = options.maxResolution;
            if (maxResolution !== undefined) {
                minZoom = 0;
            }
            else {
                maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
            }
            // user provided minResolution takes precedence
            minResolution = options.minResolution;
            if (minResolution === undefined) {
                if (options.maxZoom !== undefined) {
                    if (options.maxResolution !== undefined) {
                        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
                    }
                    else {
                        minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
                    }
                }
                else {
                    minResolution = defaultMinResolution;
                }
            }
            // given discrete zoom levels, minResolution may be different than provided
            maxZoom =
                minZoom +
                    Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);
            if (options.constrainResolution) {
                resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
            else {
                resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
        }
        return {
            constraint: resolutionConstraint,
            maxResolution: maxResolution,
            minResolution: minResolution,
            minZoom: minZoom,
            zoomFactor: zoomFactor,
        };
    }
    /**
     * @param {ViewOptions} options View options.
     * @return {import("./rotationconstraint.js").Type} Rotation constraint.
     */
    function createRotationConstraint(options) {
        var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;
        if (enableRotation) {
            var constrainRotation = options.constrainRotation;
            if (constrainRotation === undefined || constrainRotation === true) {
                return createSnapToZero();
            }
            else if (constrainRotation === false) {
                return none$1;
            }
            else if (typeof constrainRotation === 'number') {
                return createSnapToN(constrainRotation);
            }
            else {
                return none$1;
            }
        }
        else {
            return disable;
        }
    }
    /**
     * Determine if an animation involves no view change.
     * @param {Animation} animation The animation.
     * @return {boolean} The animation involves no view change.
     */
    function isNoopAnimation(animation) {
        if (animation.sourceCenter && animation.targetCenter) {
            if (!equals$2(animation.sourceCenter, animation.targetCenter)) {
                return false;
            }
        }
        if (animation.sourceResolution !== animation.targetResolution) {
            return false;
        }
        if (animation.sourceRotation !== animation.targetRotation) {
            return false;
        }
        return true;
    }

    var __extends$u = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
     * be used in applications.
     * @typedef {Object} FrameState
     * @property {number} pixelRatio The pixel ratio of the frame.
     * @property {number} time The time when rendering of the frame was requested.
     * @property {import("./View.js").State} viewState The state of the current view.
     * @property {boolean} animate
     * @property {import("./transform.js").Transform} coordinateToPixelTransform
     * @property {null|import("./extent.js").Extent} extent
     * @property {Array<DeclutterItems>} declutterItems
     * @property {number} index
     * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
     * @property {number} layerIndex
     * @property {import("./transform.js").Transform} pixelToCoordinateTransform
     * @property {Array<PostRenderFunction>} postRenderFunctions
     * @property {import("./size.js").Size} size
     * @property {TileQueue} tileQueue
     * @property {!Object<string, Object<string, boolean>>} usedTiles
     * @property {Array<number>} viewHints
     * @property {!Object<string, Object<string, boolean>>} wantedTiles
     */
    /**
     * @typedef {Object} DeclutterItems
     * @property {Array<*>} items Declutter items of an executor.
     * @property {number} opacity Layer opacity.
     */
    /**
     * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction
     */
    /**
     * @typedef {Object} AtPixelOptions
     * @property {undefined|function(import("./layer/Layer.js").default): boolean} [layerFilter] Layer filter
     * function. The filter function will receive one argument, the
     * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
     * Only layers which are visible and for which this function returns `true`
     * will be tested for features. By default, all visible layers will be tested.
     * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
     * inside the radius around the given position will be checked for features.
     * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of
     *   +/- 1 world width. Works only if a projection is used that can be wrapped.
     */
    /**
     * @typedef {Object} MapOptionsInternal
     * @property {Collection<import("./control/Control.js").default>} [controls]
     * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
     * @property {HTMLElement|Document} keyboardEventTarget
     * @property {Collection<import("./Overlay.js").default>} overlays
     * @property {Object<string, *>} values
     */
    /**
     * Object literal with config options for the map.
     * @typedef {Object} MapOptions
     * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
     * Controls initially added to the map. If not specified,
     * {@link module:ol/control~defaults} is used.
     * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
     * physical pixels and device-independent pixels (dips) on the device.
     * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
     * Interactions that are initially added to the map. If not specified,
     * {@link module:ol/interaction~defaults} is used.
     * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
     * listen to keyboard events on. This determines when the `KeyboardPan` and
     * `KeyboardZoom` interactions trigger. For example, if this option is set to
     * `document` the keyboard interactions will always trigger. If this option is
     * not specified, the element the library listens to keyboard events on is the
     * map target (i.e. the user-provided div for the map). If this is not
     * `document`, the target element needs to be focused for key events to be
     * emitted, requiring that the target element has a `tabindex` attribute.
     * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
     * Layers. If this is not defined, a map with no layers will be rendered. Note
     * that layers are rendered in the order supplied, so if you want, for example,
     * a vector layer to appear on top of a tile layer, it must come after the tile
     * layer.
     * @property {number} [maxTilesLoading=16] Maximum number tiles to load
     * simultaneously.
     * @property {number} [moveTolerance=1] The minimum distance in pixels the
     * cursor must move to be detected as a map move event instead of a click.
     * Increasing this value can make it easier to click on the map.
     * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
     * Overlays initially added to the map. By default, no overlays are added.
     * @property {HTMLElement|string} [target] The container for the map, either the
     * element itself or the `id` of the element. If not specified at construction
     * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
     * rendered.
     * @property {View} [view] The map's view.  No layer sources will be
     * fetched unless this is specified at construction time or through
     * {@link module:ol/Map~Map#setView}.
     */
    /**
     * @fires import("./MapBrowserEvent.js").MapBrowserEvent
     * @fires import("./MapEvent.js").MapEvent
     * @fires import("./render/Event.js").default#precompose
     * @fires import("./render/Event.js").default#postcompose
     * @fires import("./render/Event.js").default#rendercomplete
     * @api
     */
    var PluggableMap = /** @class */ (function (_super) {
        __extends$u(PluggableMap, _super);
        /**
         * @param {MapOptions} options Map options.
         */
        function PluggableMap(options) {
            var _this = _super.call(this) || this;
            var optionsInternal = createOptionsInternal(options);
            /** @private */
            _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);
            /**
             * @type {number}
             * @private
             */
            _this.maxTilesLoading_ =
                options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;
            /**
             * @private
             * @type {number}
             */
            _this.pixelRatio_ =
                options.pixelRatio !== undefined
                    ? options.pixelRatio
                    : DEVICE_PIXEL_RATIO;
            /**
             * @private
             * @type {*}
             */
            _this.postRenderTimeoutHandle_;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.animationDelayKey_;
            /**
             * @private
             */
            _this.animationDelay_ = function () {
                this.animationDelayKey_ = undefined;
                this.renderFrame_(Date.now());
            }.bind(_this);
            /**
             * @private
             * @type {import("./transform.js").Transform}
             */
            _this.coordinateToPixelTransform_ = create();
            /**
             * @private
             * @type {import("./transform.js").Transform}
             */
            _this.pixelToCoordinateTransform_ = create();
            /**
             * @private
             * @type {number}
             */
            _this.frameIndex_ = 0;
            /**
             * @private
             * @type {?FrameState}
             */
            _this.frameState_ = null;
            /**
             * The extent at the previous 'moveend' event.
             * @private
             * @type {import("./extent.js").Extent}
             */
            _this.previousExtent_ = null;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            _this.viewPropertyListenerKey_ = null;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            _this.viewChangeListenerKey_ = null;
            /**
             * @private
             * @type {?Array<import("./events.js").EventsKey>}
             */
            _this.layerGroupPropertyListenerKeys_ = null;
            /**
             * @private
             * @type {!HTMLElement}
             */
            _this.viewport_ = document.createElement('div');
            _this.viewport_.className =
                'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
            _this.viewport_.style.position = 'relative';
            _this.viewport_.style.overflow = 'hidden';
            _this.viewport_.style.width = '100%';
            _this.viewport_.style.height = '100%';
            /**
             * @private
             * @type {!HTMLElement}
             */
            _this.overlayContainer_ = document.createElement('div');
            _this.overlayContainer_.style.position = 'absolute';
            _this.overlayContainer_.style.zIndex = '0';
            _this.overlayContainer_.style.width = '100%';
            _this.overlayContainer_.style.height = '100%';
            _this.overlayContainer_.style.pointerEvents = 'none';
            _this.overlayContainer_.className = 'ol-overlaycontainer';
            _this.viewport_.appendChild(_this.overlayContainer_);
            /**
             * @private
             * @type {!HTMLElement}
             */
            _this.overlayContainerStopEvent_ = document.createElement('div');
            _this.overlayContainerStopEvent_.style.position = 'absolute';
            _this.overlayContainerStopEvent_.style.zIndex = '0';
            _this.overlayContainerStopEvent_.style.width = '100%';
            _this.overlayContainerStopEvent_.style.height = '100%';
            _this.overlayContainerStopEvent_.style.pointerEvents = 'none';
            _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
            _this.viewport_.appendChild(_this.overlayContainerStopEvent_);
            /**
             * @private
             * @type {MapBrowserEventHandler}
             */
            _this.mapBrowserEventHandler_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.moveTolerance_ = options.moveTolerance;
            /**
             * @private
             * @type {HTMLElement|Document}
             */
            _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
            /**
             * @private
             * @type {?Array<import("./events.js").EventsKey>}
             */
            _this.keyHandlerKeys_ = null;
            /**
             * @type {Collection<import("./control/Control.js").default>}
             * @protected
             */
            _this.controls = optionsInternal.controls || new Collection();
            /**
             * @type {Collection<import("./interaction/Interaction.js").default>}
             * @protected
             */
            _this.interactions = optionsInternal.interactions || new Collection();
            /**
             * @type {Collection<import("./Overlay.js").default>}
             * @private
             */
            _this.overlays_ = optionsInternal.overlays;
            /**
             * A lookup of overlays by id.
             * @private
             * @type {Object<string, import("./Overlay.js").default>}
             */
            _this.overlayIdIndex_ = {};
            /**
             * @type {import("./renderer/Map.js").default}
             * @private
             */
            _this.renderer_ = null;
            /**
             * @type {undefined|function(Event): void}
             * @private
             */
            _this.handleResize_;
            /**
             * @private
             * @type {!Array<PostRenderFunction>}
             */
            _this.postRenderFunctions_ = [];
            /**
             * @private
             * @type {TileQueue}
             */
            _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));
            _this.addEventListener(getChangeEventType(MapProperty.LAYERGROUP), _this.handleLayerGroupChanged_);
            _this.addEventListener(getChangeEventType(MapProperty.VIEW), _this.handleViewChanged_);
            _this.addEventListener(getChangeEventType(MapProperty.SIZE), _this.handleSizeChanged_);
            _this.addEventListener(getChangeEventType(MapProperty.TARGET), _this.handleTargetChanged_);
            // setProperties will trigger the rendering of the map if the map
            // is "defined" already.
            _this.setProperties(optionsInternal.values);
            _this.controls.forEach(
            /**
             * @param {import("./control/Control.js").default} control Control.
             * @this {PluggableMap}
             */
            function (control) {
                control.setMap(this);
            }.bind(_this));
            _this.controls.addEventListener(CollectionEventType.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(this);
            }.bind(_this));
            _this.controls.addEventListener(CollectionEventType.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(null);
            }.bind(_this));
            _this.interactions.forEach(
            /**
             * @param {import("./interaction/Interaction.js").default} interaction Interaction.
             * @this {PluggableMap}
             */
            function (interaction) {
                interaction.setMap(this);
            }.bind(_this));
            _this.interactions.addEventListener(CollectionEventType.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(this);
            }.bind(_this));
            _this.interactions.addEventListener(CollectionEventType.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(null);
            }.bind(_this));
            _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));
            _this.overlays_.addEventListener(CollectionEventType.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                this.addOverlayInternal_(
                /** @type {import("./Overlay.js").default} */ (event.element));
            }.bind(_this));
            _this.overlays_.addEventListener(CollectionEventType.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                var overlay = /** @type {import("./Overlay.js").default} */ (event.element);
                var id = overlay.getId();
                if (id !== undefined) {
                    delete this.overlayIdIndex_[id.toString()];
                }
                event.element.setMap(null);
            }.bind(_this));
            return _this;
        }
        /**
         * @abstract
         * @return {import("./renderer/Map.js").default} The map renderer
         */
        PluggableMap.prototype.createRenderer = function () {
            throw new Error('Use a map type that has a createRenderer method');
        };
        /**
         * Add the given control to the map.
         * @param {import("./control/Control.js").default} control Control.
         * @api
         */
        PluggableMap.prototype.addControl = function (control) {
            this.getControls().push(control);
        };
        /**
         * Add the given interaction to the map. If you want to add an interaction
         * at another point of the collection use `getInteraction()` and the methods
         * available on {@link module:ol/Collection~Collection}. This can be used to
         * stop the event propagation from the handleEvent function. The interactions
         * get to handle the events in the reverse order of this collection.
         * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
         * @api
         */
        PluggableMap.prototype.addInteraction = function (interaction) {
            this.getInteractions().push(interaction);
        };
        /**
         * Adds the given layer to the top of this map. If you want to add a layer
         * elsewhere in the stack, use `getLayers()` and the methods available on
         * {@link module:ol/Collection~Collection}.
         * @param {import("./layer/Base.js").default} layer Layer.
         * @api
         */
        PluggableMap.prototype.addLayer = function (layer) {
            var layers = this.getLayerGroup().getLayers();
            layers.push(layer);
        };
        /**
         * Add the given overlay to the map.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @api
         */
        PluggableMap.prototype.addOverlay = function (overlay) {
            this.getOverlays().push(overlay);
        };
        /**
         * This deals with map's overlay collection changes.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @private
         */
        PluggableMap.prototype.addOverlayInternal_ = function (overlay) {
            var id = overlay.getId();
            if (id !== undefined) {
                this.overlayIdIndex_[id.toString()] = overlay;
            }
            overlay.setMap(this);
        };
        /**
         *
         * Clean up.
         */
        PluggableMap.prototype.disposeInternal = function () {
            this.setTarget(null);
            _super.prototype.disposeInternal.call(this);
        };
        /**
         * Detect features that intersect a pixel on the viewport, and execute a
         * callback with each intersecting feature. Layers included in the detection can
         * be configured through the `layerFilter` option in `opt_options`.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {function(this: S, import("./Feature.js").FeatureLike,
         *     import("./layer/Layer.js").default): T} callback Feature callback. The callback will be
         *     called with two arguments. The first argument is one
         *     {@link module:ol/Feature feature} or
         *     {@link module:ol/render/Feature render feature} at the pixel, the second is
         *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
         *     unmanaged layers. To stop detection, callback functions can return a
         *     truthy value.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {T|undefined} Callback result, i.e. the return value of last
         * callback execution, or the first truthy callback return value.
         * @template S,T
         * @api
         */
        PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {
            if (!this.frameState_) {
                return;
            }
            var coordinate = this.getCoordinateFromPixelInternal(pixel);
            opt_options = opt_options !== undefined ? opt_options : {};
            var hitTolerance = opt_options.hitTolerance !== undefined
                ? opt_options.hitTolerance * this.frameState_.pixelRatio
                : 0;
            var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
            var checkWrapped = opt_options.checkWrapped !== false;
            return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);
        };
        /**
         * Get all features that intersect a pixel on the viewport.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
         * an empty array if none were found.
         * @api
         */
        PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {
            var features = [];
            this.forEachFeatureAtPixel(pixel, function (feature) {
                features.push(feature);
            }, opt_options);
            return features;
        };
        /**
         * Detect layers that have a color value at a pixel on the viewport, and
         * execute a callback with each matching layer. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         *
         * Note: this may give false positives unless the map layers have had different `className`
         * properties assigned to them.
         *
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
         *     Layer callback. This callback will receive two arguments: first is the
         *     {@link module:ol/layer/Layer layer}, second argument is an array representing
         *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
         *     that do not currently support this argument. To stop detection, callback
         *     functions can return a truthy value.
         * @param {AtPixelOptions=} opt_options Configuration options.
         * @return {T|undefined} Callback result, i.e. the return value of last
         * callback execution, or the first truthy callback return value.
         * @template S,T
         * @api
         */
        PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {
            if (!this.frameState_) {
                return;
            }
            var options = opt_options || {};
            var hitTolerance = options.hitTolerance !== undefined
                ? options.hitTolerance * this.frameState_.pixelRatio
                : 0;
            var layerFilter = options.layerFilter || TRUE;
            return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);
        };
        /**
         * Detect if features intersect a pixel on the viewport. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {boolean} Is there a feature at the given pixel?
         * @api
         */
        PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {
            if (!this.frameState_) {
                return false;
            }
            var coordinate = this.getCoordinateFromPixelInternal(pixel);
            opt_options = opt_options !== undefined ? opt_options : {};
            var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
            var hitTolerance = opt_options.hitTolerance !== undefined
                ? opt_options.hitTolerance * this.frameState_.pixelRatio
                : 0;
            var checkWrapped = opt_options.checkWrapped !== false;
            return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);
        };
        /**
         * Returns the coordinate in user projection for a browser event.
         * @param {MouseEvent} event Event.
         * @return {import("./coordinate.js").Coordinate} Coordinate.
         * @api
         */
        PluggableMap.prototype.getEventCoordinate = function (event) {
            return this.getCoordinateFromPixel(this.getEventPixel(event));
        };
        /**
         * Returns the coordinate in view projection for a browser event.
         * @param {MouseEvent} event Event.
         * @return {import("./coordinate.js").Coordinate} Coordinate.
         */
        PluggableMap.prototype.getEventCoordinateInternal = function (event) {
            return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
        };
        /**
         * Returns the map pixel position for a browser event relative to the viewport.
         * @param {UIEvent} event Event.
         * @return {import("./pixel.js").Pixel} Pixel.
         * @api
         */
        PluggableMap.prototype.getEventPixel = function (event) {
            var viewportPosition = this.viewport_.getBoundingClientRect();
            var eventPosition = 
            //FIXME Are we really calling this with a TouchEvent anywhere?
            'changedTouches' in event
                ? /** @type {TouchEvent} */ (event).changedTouches[0]
                : /** @type {MouseEvent} */ (event);
            return [
                eventPosition.clientX - viewportPosition.left,
                eventPosition.clientY - viewportPosition.top,
            ];
        };
        /**
         * Get the target in which this map is rendered.
         * Note that this returns what is entered as an option or in setTarget:
         * if that was an element, it returns an element; if a string, it returns that.
         * @return {HTMLElement|string|undefined} The Element or id of the Element that the
         *     map is rendered in.
         * @observable
         * @api
         */
        PluggableMap.prototype.getTarget = function () {
            return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));
        };
        /**
         * Get the DOM element into which this map is rendered. In contrast to
         * `getTarget` this method always return an `Element`, or `null` if the
         * map has no target.
         * @return {HTMLElement} The element that the map is rendered in.
         * @api
         */
        PluggableMap.prototype.getTargetElement = function () {
            var target = this.getTarget();
            if (target !== undefined) {
                return typeof target === 'string'
                    ? document.getElementById(target)
                    : target;
            }
            else {
                return null;
            }
        };
        /**
         * Get the coordinate for a given pixel.  This returns a coordinate in the
         * user projection.
         * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
         * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
         * @api
         */
        PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {
            return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
        };
        /**
         * Get the coordinate for a given pixel.  This returns a coordinate in the
         * map view projection.
         * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
         * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
         */
        PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {
            var frameState = this.frameState_;
            if (!frameState) {
                return null;
            }
            else {
                return apply(frameState.pixelToCoordinateTransform, pixel.slice());
            }
        };
        /**
         * Get the map controls. Modifying this collection changes the controls
         * associated with the map.
         * @return {Collection<import("./control/Control.js").default>} Controls.
         * @api
         */
        PluggableMap.prototype.getControls = function () {
            return this.controls;
        };
        /**
         * Get the map overlays. Modifying this collection changes the overlays
         * associated with the map.
         * @return {Collection<import("./Overlay.js").default>} Overlays.
         * @api
         */
        PluggableMap.prototype.getOverlays = function () {
            return this.overlays_;
        };
        /**
         * Get an overlay by its identifier (the value returned by overlay.getId()).
         * Note that the index treats string and numeric identifiers as the same. So
         * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
         * @param {string|number} id Overlay identifier.
         * @return {import("./Overlay.js").default} Overlay.
         * @api
         */
        PluggableMap.prototype.getOverlayById = function (id) {
            var overlay = this.overlayIdIndex_[id.toString()];
            return overlay !== undefined ? overlay : null;
        };
        /**
         * Get the map interactions. Modifying this collection changes the interactions
         * associated with the map.
         *
         * Interactions are used for e.g. pan, zoom and rotate.
         * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
         * @api
         */
        PluggableMap.prototype.getInteractions = function () {
            return this.interactions;
        };
        /**
         * Get the layergroup associated with this map.
         * @return {LayerGroup} A layer group containing the layers in this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.getLayerGroup = function () {
            return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));
        };
        /**
         * Get the collection of layers associated with this map.
         * @return {!Collection<import("./layer/Base.js").default>} Layers.
         * @api
         */
        PluggableMap.prototype.getLayers = function () {
            var layers = this.getLayerGroup().getLayers();
            return layers;
        };
        /**
         * @return {boolean} Layers have sources that are still loading.
         */
        PluggableMap.prototype.getLoading = function () {
            var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
            for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                var layer = layerStatesArray[i].layer;
                var source = /** @type {import("./layer/Layer.js").default} */ (layer).getSource();
                if (source && source.loading) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Get the pixel for a coordinate.  This takes a coordinate in the user
         * projection and returns the corresponding pixel.
         * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
         * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
         * @api
         */
        PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {
            var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());
            return this.getPixelFromCoordinateInternal(viewCoordinate);
        };
        /**
         * Get the pixel for a coordinate.  This takes a coordinate in the map view
         * projection and returns the corresponding pixel.
         * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
         * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
         */
        PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {
            var frameState = this.frameState_;
            if (!frameState) {
                return null;
            }
            else {
                return apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
            }
        };
        /**
         * Get the map renderer.
         * @return {import("./renderer/Map.js").default} Renderer
         */
        PluggableMap.prototype.getRenderer = function () {
            return this.renderer_;
        };
        /**
         * Get the size of this map.
         * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
         * @observable
         * @api
         */
        PluggableMap.prototype.getSize = function () {
            return /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty.SIZE));
        };
        /**
         * Get the view associated with this map. A view manages properties such as
         * center and resolution.
         * @return {View} The view that controls this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.getView = function () {
            return /** @type {View} */ (this.get(MapProperty.VIEW));
        };
        /**
         * Get the element that serves as the map viewport.
         * @return {HTMLElement} Viewport.
         * @api
         */
        PluggableMap.prototype.getViewport = function () {
            return this.viewport_;
        };
        /**
         * Get the element that serves as the container for overlays.  Elements added to
         * this container will let mousedown and touchstart events through to the map,
         * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
         * events.
         * @return {!HTMLElement} The map's overlay container.
         */
        PluggableMap.prototype.getOverlayContainer = function () {
            return this.overlayContainer_;
        };
        /**
         * Get the element that serves as a container for overlays that don't allow
         * event propagation. Elements added to this container won't let mousedown and
         * touchstart events through to the map, so clicks and gestures on an overlay
         * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
         * @return {!HTMLElement} The map's overlay container that stops events.
         */
        PluggableMap.prototype.getOverlayContainerStopEvent = function () {
            return this.overlayContainerStopEvent_;
        };
        /**
         * @param {import("./Tile.js").default} tile Tile.
         * @param {string} tileSourceKey Tile source key.
         * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
         * @param {number} tileResolution Tile resolution.
         * @return {number} Tile priority.
         */
        PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {
            return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);
        };
        /**
         * @param {UIEvent} browserEvent Browser event.
         * @param {string=} opt_type Type.
         */
        PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {
            var type = opt_type || browserEvent.type;
            var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
            this.handleMapBrowserEvent(mapBrowserEvent);
        };
        /**
         * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
         */
        PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {
            if (!this.frameState_) {
                // With no view defined, we cannot translate pixels into geographical
                // coordinates so interactions cannot be used.
                return;
            }
            var originalEvent = /** @type {PointerEvent} */ (mapBrowserEvent.originalEvent);
            var eventType = originalEvent.type;
            if (eventType === PointerEventType.POINTERDOWN ||
                eventType === EventType.WHEEL ||
                eventType === EventType.KEYDOWN) {
                var rootNode = this.viewport_.getRootNode
                    ? this.viewport_.getRootNode()
                    : document;
                var target = rootNode === document
                    ? /** @type {Node} */ (originalEvent.target)
                    : /** @type {ShadowRoot} */ (rootNode).elementFromPoint(originalEvent.clientX, originalEvent.clientY);
                if (
                // Abort if the target is a child of the container for elements whose events are not meant
                // to be handled by map interactions.
                this.overlayContainerStopEvent_.contains(target) ||
                    // Abort if the event target is a child of the container that is no longer in the page.
                    // It's possible for the target to no longer be in the page if it has been removed in an
                    // event listener, this might happen in a Control that recreates it's content based on
                    // user interaction either manually or via a render in something like https://reactjs.org/
                    !(rootNode === document ? document.documentElement : rootNode).contains(target)) {
                    return;
                }
            }
            mapBrowserEvent.frameState = this.frameState_;
            var interactionsArray = this.getInteractions().getArray();
            if (this.dispatchEvent(mapBrowserEvent) !== false) {
                for (var i = interactionsArray.length - 1; i >= 0; i--) {
                    var interaction = interactionsArray[i];
                    if (!interaction.getActive()) {
                        continue;
                    }
                    var cont = interaction.handleEvent(mapBrowserEvent);
                    if (!cont) {
                        break;
                    }
                }
            }
        };
        /**
         * @protected
         */
        PluggableMap.prototype.handlePostRender = function () {
            var frameState = this.frameState_;
            // Manage the tile queue
            // Image loads are expensive and a limited resource, so try to use them
            // efficiently:
            // * When the view is static we allow a large number of parallel tile loads
            //   to complete the frame as quickly as possible.
            // * When animating or interacting, image loads can cause janks, so we reduce
            //   the maximum number of loads per frame and limit the number of parallel
            //   tile loads to remain reactive to view changes and to reduce the chance of
            //   loading tiles that will quickly disappear from view.
            var tileQueue = this.tileQueue_;
            if (!tileQueue.isEmpty()) {
                var maxTotalLoading = this.maxTilesLoading_;
                var maxNewLoads = maxTotalLoading;
                if (frameState) {
                    var hints = frameState.viewHints;
                    if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {
                        var lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;
                        maxTotalLoading = lowOnFrameBudget ? 0 : 8;
                        maxNewLoads = lowOnFrameBudget ? 0 : 2;
                    }
                }
                if (tileQueue.getTilesLoading() < maxTotalLoading) {
                    tileQueue.reprioritize(); // FIXME only call if view has changed
                    tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
                }
            }
            if (frameState &&
                this.hasListener(RenderEventType.RENDERCOMPLETE) &&
                !frameState.animate &&
                !this.tileQueue_.getTilesLoading() &&
                !this.getLoading()) {
                this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);
            }
            var postRenderFunctions = this.postRenderFunctions_;
            for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
                postRenderFunctions[i](this, frameState);
            }
            postRenderFunctions.length = 0;
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleSizeChanged_ = function () {
            if (this.getView() && !this.getView().getAnimating()) {
                this.getView().resolveConstraints(0);
            }
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleTargetChanged_ = function () {
            // target may be undefined, null, a string or an Element.
            // If it's a string we convert it to an Element before proceeding.
            // If it's not now an Element we remove the viewport from the DOM.
            // If it's an Element we append the viewport element to it.
            var targetElement;
            if (this.getTarget()) {
                targetElement = this.getTargetElement();
            }
            if (this.mapBrowserEventHandler_) {
                for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
                    unlistenByKey(this.keyHandlerKeys_[i]);
                }
                this.keyHandlerKeys_ = null;
                this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);
                this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);
                if (this.handleResize_ !== undefined) {
                    removeEventListener(EventType.RESIZE, this.handleResize_, false);
                    this.handleResize_ = undefined;
                }
                this.mapBrowserEventHandler_.dispose();
                this.mapBrowserEventHandler_ = null;
                removeNode(this.viewport_);
            }
            if (!targetElement) {
                if (this.renderer_) {
                    clearTimeout(this.postRenderTimeoutHandle_);
                    this.postRenderFunctions_.length = 0;
                    this.renderer_.dispose();
                    this.renderer_ = null;
                }
                if (this.animationDelayKey_) {
                    cancelAnimationFrame(this.animationDelayKey_);
                    this.animationDelayKey_ = undefined;
                }
            }
            else {
                targetElement.appendChild(this.viewport_);
                if (!this.renderer_) {
                    this.renderer_ = this.createRenderer();
                }
                this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);
                for (var key in MapBrowserEventType) {
                    this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));
                }
                this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);
                this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
                var keyboardEventTarget = !this.keyboardEventTarget_
                    ? targetElement
                    : this.keyboardEventTarget_;
                this.keyHandlerKeys_ = [
                    listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),
                    listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this),
                ];
                if (!this.handleResize_) {
                    this.handleResize_ = this.updateSize.bind(this);
                    window.addEventListener(EventType.RESIZE, this.handleResize_, false);
                }
            }
            this.updateSize();
            // updateSize calls setSize, so no need to call this.render
            // ourselves here.
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleTileChange_ = function () {
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleViewPropertyChanged_ = function () {
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleViewChanged_ = function () {
            if (this.viewPropertyListenerKey_) {
                unlistenByKey(this.viewPropertyListenerKey_);
                this.viewPropertyListenerKey_ = null;
            }
            if (this.viewChangeListenerKey_) {
                unlistenByKey(this.viewChangeListenerKey_);
                this.viewChangeListenerKey_ = null;
            }
            var view = this.getView();
            if (view) {
                this.updateViewportSize_();
                this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);
                this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);
                view.resolveConstraints(0);
            }
            this.render();
        };
        /**
         * @private
         */
        PluggableMap.prototype.handleLayerGroupChanged_ = function () {
            if (this.layerGroupPropertyListenerKeys_) {
                this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
                this.layerGroupPropertyListenerKeys_ = null;
            }
            var layerGroup = this.getLayerGroup();
            if (layerGroup) {
                this.layerGroupPropertyListenerKeys_ = [
                    listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),
                    listen(layerGroup, EventType.CHANGE, this.render, this),
                ];
            }
            this.render();
        };
        /**
         * @return {boolean} Is rendered.
         */
        PluggableMap.prototype.isRendered = function () {
            return !!this.frameState_;
        };
        /**
         * Requests an immediate render in a synchronous manner.
         * @api
         */
        PluggableMap.prototype.renderSync = function () {
            if (this.animationDelayKey_) {
                cancelAnimationFrame(this.animationDelayKey_);
            }
            this.animationDelay_();
        };
        /**
         * Redraws all text after new fonts have loaded
         */
        PluggableMap.prototype.redrawText = function () {
            var layerStates = this.getLayerGroup().getLayerStatesArray();
            for (var i = 0, ii = layerStates.length; i < ii; ++i) {
                var layer = layerStates[i].layer;
                if (layer.hasRenderer()) {
                    layer.getRenderer().handleFontsChanged();
                }
            }
        };
        /**
         * Request a map rendering (at the next animation frame).
         * @api
         */
        PluggableMap.prototype.render = function () {
            if (this.renderer_ && this.animationDelayKey_ === undefined) {
                this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
            }
        };
        /**
         * Remove the given control from the map.
         * @param {import("./control/Control.js").default} control Control.
         * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
         *     if the control was not found).
         * @api
         */
        PluggableMap.prototype.removeControl = function (control) {
            return this.getControls().remove(control);
        };
        /**
         * Remove the given interaction from the map.
         * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
         * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
         *     undefined if the interaction was not found).
         * @api
         */
        PluggableMap.prototype.removeInteraction = function (interaction) {
            return this.getInteractions().remove(interaction);
        };
        /**
         * Removes the given layer from the map.
         * @param {import("./layer/Base.js").default} layer Layer.
         * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
         *     layer was not found).
         * @api
         */
        PluggableMap.prototype.removeLayer = function (layer) {
            var layers = this.getLayerGroup().getLayers();
            return layers.remove(layer);
        };
        /**
         * Remove the given overlay from the map.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
         *     if the overlay was not found).
         * @api
         */
        PluggableMap.prototype.removeOverlay = function (overlay) {
            return this.getOverlays().remove(overlay);
        };
        /**
         * @param {number} time Time.
         * @private
         */
        PluggableMap.prototype.renderFrame_ = function (time) {
            var size = this.getSize();
            var view = this.getView();
            var previousFrameState = this.frameState_;
            /** @type {?FrameState} */
            var frameState = null;
            if (size !== undefined && hasArea(size) && view && view.isDef()) {
                var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
                var viewState = view.getState();
                frameState = {
                    animate: false,
                    coordinateToPixelTransform: this.coordinateToPixelTransform_,
                    declutterItems: previousFrameState
                        ? previousFrameState.declutterItems
                        : [],
                    extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),
                    index: this.frameIndex_++,
                    layerIndex: 0,
                    layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
                    pixelRatio: this.pixelRatio_,
                    pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                    postRenderFunctions: [],
                    size: size,
                    tileQueue: this.tileQueue_,
                    time: time,
                    usedTiles: {},
                    viewState: viewState,
                    viewHints: viewHints,
                    wantedTiles: {},
                };
            }
            this.frameState_ = frameState;
            this.renderer_.renderFrame(frameState);
            if (frameState) {
                if (frameState.animate) {
                    this.render();
                }
                Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
                if (previousFrameState) {
                    var moveStart = !this.previousExtent_ ||
                        (!isEmpty$1(this.previousExtent_) &&
                            !equals$1(frameState.extent, this.previousExtent_));
                    if (moveStart) {
                        this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));
                        this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
                    }
                }
                var idle = this.previousExtent_ &&
                    !frameState.viewHints[ViewHint.ANIMATING] &&
                    !frameState.viewHints[ViewHint.INTERACTING] &&
                    !equals$1(frameState.extent, this.previousExtent_);
                if (idle) {
                    this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));
                    clone(frameState.extent, this.previousExtent_);
                }
            }
            this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));
            this.postRenderTimeoutHandle_ = setTimeout(this.handlePostRender.bind(this), 0);
        };
        /**
         * Sets the layergroup of this map.
         * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.setLayerGroup = function (layerGroup) {
            this.set(MapProperty.LAYERGROUP, layerGroup);
        };
        /**
         * Set the size of this map.
         * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
         * @observable
         * @api
         */
        PluggableMap.prototype.setSize = function (size) {
            this.set(MapProperty.SIZE, size);
        };
        /**
         * Set the target element to render this map into.
         * @param {HTMLElement|string|undefined} target The Element or id of the Element
         *     that the map is rendered in.
         * @observable
         * @api
         */
        PluggableMap.prototype.setTarget = function (target) {
            this.set(MapProperty.TARGET, target);
        };
        /**
         * Set the view for this map.
         * @param {View} view The view that controls this map.
         * @observable
         * @api
         */
        PluggableMap.prototype.setView = function (view) {
            this.set(MapProperty.VIEW, view);
        };
        /**
         * Force a recalculation of the map viewport size.  This should be called when
         * third-party code changes the size of the map viewport.
         * @api
         */
        PluggableMap.prototype.updateSize = function () {
            var targetElement = this.getTargetElement();
            if (!targetElement) {
                this.setSize(undefined);
            }
            else {
                var computedStyle = getComputedStyle(targetElement);
                this.setSize([
                    targetElement.offsetWidth -
                        parseFloat(computedStyle['borderLeftWidth']) -
                        parseFloat(computedStyle['paddingLeft']) -
                        parseFloat(computedStyle['paddingRight']) -
                        parseFloat(computedStyle['borderRightWidth']),
                    targetElement.offsetHeight -
                        parseFloat(computedStyle['borderTopWidth']) -
                        parseFloat(computedStyle['paddingTop']) -
                        parseFloat(computedStyle['paddingBottom']) -
                        parseFloat(computedStyle['borderBottomWidth']),
                ]);
            }
            this.updateViewportSize_();
        };
        /**
         * Recomputes the viewport size and save it on the view object (if any)
         * @private
         */
        PluggableMap.prototype.updateViewportSize_ = function () {
            var view = this.getView();
            if (view) {
                var size = undefined;
                var computedStyle = getComputedStyle(this.viewport_);
                if (computedStyle.width && computedStyle.height) {
                    size = [
                        parseInt(computedStyle.width, 10),
                        parseInt(computedStyle.height, 10),
                    ];
                }
                view.setViewportSize(size);
            }
        };
        return PluggableMap;
    }(BaseObject));
    /**
     * @param {MapOptions} options Map options.
     * @return {MapOptionsInternal} Internal map options.
     */
    function createOptionsInternal(options) {
        /**
         * @type {HTMLElement|Document}
         */
        var keyboardEventTarget = null;
        if (options.keyboardEventTarget !== undefined) {
            keyboardEventTarget =
                typeof options.keyboardEventTarget === 'string'
                    ? document.getElementById(options.keyboardEventTarget)
                    : options.keyboardEventTarget;
        }
        /**
         * @type {Object<string, *>}
         */
        var values = {};
        var layerGroup = options.layers &&
            typeof ( /** @type {?} */(options.layers).getLayers) === 'function'
            ? /** @type {LayerGroup} */ (options.layers)
            : new LayerGroup({ layers: /** @type {Collection} */ (options.layers) });
        values[MapProperty.LAYERGROUP] = layerGroup;
        values[MapProperty.TARGET] = options.target;
        values[MapProperty.VIEW] =
            options.view !== undefined ? options.view : new View();
        var controls;
        if (options.controls !== undefined) {
            if (Array.isArray(options.controls)) {
                controls = new Collection(options.controls.slice());
            }
            else {
                assert(typeof ( /** @type {?} */(options.controls).getArray) === 'function', 47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
                controls = /** @type {Collection} */ (options.controls);
            }
        }
        var interactions;
        if (options.interactions !== undefined) {
            if (Array.isArray(options.interactions)) {
                interactions = new Collection(options.interactions.slice());
            }
            else {
                assert(typeof ( /** @type {?} */(options.interactions).getArray) ===
                    'function', 48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
                interactions = /** @type {Collection} */ (options.interactions);
            }
        }
        var overlays;
        if (options.overlays !== undefined) {
            if (Array.isArray(options.overlays)) {
                overlays = new Collection(options.overlays.slice());
            }
            else {
                assert(typeof ( /** @type {?} */(options.overlays).getArray) === 'function', 49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
                overlays = options.overlays;
            }
        }
        else {
            overlays = new Collection();
        }
        return {
            controls: controls,
            interactions: interactions,
            keyboardEventTarget: keyboardEventTarget,
            overlays: overlays,
            values: values,
        };
    }

    var __extends$v = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {HTMLElement} [element] The element is the control's
     * container element. This only needs to be specified if you're developing
     * a custom control.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when
     * the control should be re-rendered. This is called in a `requestAnimationFrame`
     * callback.
     * @property {HTMLElement|string} [target] Specify a target if you want
     * the control to be rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A control is a visible widget with a DOM element in a fixed position on the
     * screen. They can involve user input (buttons), or be informational only;
     * the position is determined using CSS. By default these are placed in the
     * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
     * any outside DOM element.
     *
     * This is the base class for controls. You can use it for simple custom
     * controls by creating the element with listeners, creating an instance:
     * ```js
     * var myControl = new Control({element: myElement});
     * ```
     * and then adding this to the map.
     *
     * The main advantage of having this as a control rather than a simple separate
     * DOM element is that preventing propagation is handled for you. Controls
     * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
     *
     * You can also extend this base for your own control class. See
     * examples/custom-controls for an example of how to do this.
     *
     * @api
     */
    var Control = /** @class */ (function (_super) {
        __extends$v(Control, _super);
        /**
         * @param {Options} options Control options.
         */
        function Control(options) {
            var _this = _super.call(this) || this;
            var element = options.element;
            if (element && !options.target && !element.style.pointerEvents) {
                element.style.pointerEvents = 'auto';
            }
            /**
             * @protected
             * @type {HTMLElement}
             */
            _this.element = element ? element : null;
            /**
             * @private
             * @type {HTMLElement}
             */
            _this.target_ = null;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = null;
            /**
             * @protected
             * @type {!Array<import("../events.js").EventsKey>}
             */
            _this.listenerKeys = [];
            if (options.render) {
                _this.render = options.render;
            }
            if (options.target) {
                _this.setTarget(options.target);
            }
            return _this;
        }
        /**
         * Clean up.
         */
        Control.prototype.disposeInternal = function () {
            removeNode(this.element);
            _super.prototype.disposeInternal.call(this);
        };
        /**
         * Get the map associated with this control.
         * @return {import("../PluggableMap.js").default} Map.
         * @api
         */
        Control.prototype.getMap = function () {
            return this.map_;
        };
        /**
         * Remove the control from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        Control.prototype.setMap = function (map) {
            if (this.map_) {
                removeNode(this.element);
            }
            for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
                unlistenByKey(this.listenerKeys[i]);
            }
            this.listenerKeys.length = 0;
            this.map_ = map;
            if (this.map_) {
                var target = this.target_
                    ? this.target_
                    : map.getOverlayContainerStopEvent();
                target.appendChild(this.element);
                if (this.render !== VOID) {
                    this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));
                }
                map.render();
            }
        };
        /**
         * Renders the control.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @api
         */
        Control.prototype.render = function (mapEvent) { };
        /**
         * This function is used to set a target element for the control. It has no
         * effect if it is called after the control has been added to the map (i.e.
         * after `setMap` is called on the control). If no `target` is set in the
         * options passed to the control constructor and if `setTarget` is not called
         * then the control is added to the map's overlay container.
         * @param {HTMLElement|string} target Target.
         * @api
         */
        Control.prototype.setTarget = function (target) {
            this.target_ =
                typeof target === 'string' ? document.getElementById(target) : target;
        };
        return Control;
    }(BaseObject));

    var __extends$w = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-attribution'] CSS class name.
     * @property {HTMLElement|string} [target] Specify a target if you
     * want the control to be rendered outside of the map's
     * viewport.
     * @property {boolean} [collapsible] Specify if attributions can
     * be collapsed. If not specified, sources control this behavior with their
     * `attributionsCollapsible` setting.
     * @property {boolean} [collapsed=true] Specify if attributions should
     * be collapsed at startup.
     * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
     * @property {string} [label='i'] Text label to use for the
     * collapsed attributions button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string|HTMLElement} [collapseLabel='»'] Text label to use
     * for the expanded attributions button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when
     * the control should be re-rendered. This is called in a `requestAnimationFrame`
     * callback.
     */
    /**
     * @classdesc
     * Control to show all the attributions associated with the layer sources
     * in the map. This control is one of the default controls included in maps.
     * By default it will show in the bottom right portion of the map, but this can
     * be changed by using a css selector for `.ol-attribution`.
     *
     * @api
     */
    var Attribution = /** @class */ (function (_super) {
        __extends$w(Attribution, _super);
        /**
         * @param {Options=} opt_options Attribution options.
         */
        function Attribution(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            }) || this;
            /**
             * @private
             * @type {HTMLElement}
             */
            _this.ulElement_ = document.createElement('ul');
            /**
             * @private
             * @type {boolean}
             */
            _this.collapsed_ =
                options.collapsed !== undefined ? options.collapsed : true;
            /**
             * @private
             * @type {boolean}
             */
            _this.overrideCollapsible_ = options.collapsible !== undefined;
            /**
             * @private
             * @type {boolean}
             */
            _this.collapsible_ =
                options.collapsible !== undefined ? options.collapsible : true;
            if (!_this.collapsible_) {
                _this.collapsed_ = false;
            }
            var className = options.className !== undefined ? options.className : 'ol-attribution';
            var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';
            var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';
            if (typeof collapseLabel === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                _this.collapseLabel_ = document.createElement('span');
                _this.collapseLabel_.textContent = collapseLabel;
            }
            else {
                _this.collapseLabel_ = collapseLabel;
            }
            var label = options.label !== undefined ? options.label : 'i';
            if (typeof label === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                _this.label_ = document.createElement('span');
                _this.label_.textContent = label;
            }
            else {
                _this.label_ = label;
            }
            var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;
            var button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(activeLabel);
            button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
            var cssClasses = className +
                ' ' +
                CLASS_UNSELECTABLE +
                ' ' +
                CLASS_CONTROL +
                (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
                (_this.collapsible_ ? '' : ' ol-uncollapsible');
            var element = _this.element;
            element.className = cssClasses;
            element.appendChild(_this.ulElement_);
            element.appendChild(button);
            /**
             * A list of currently rendered resolutions.
             * @type {Array<string>}
             * @private
             */
            _this.renderedAttributions_ = [];
            /**
             * @private
             * @type {boolean}
             */
            _this.renderedVisible_ = true;
            return _this;
        }
        /**
         * Collect a list of visible attributions and set the collapsible state.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @return {Array<string>} Attributions.
         * @private
         */
        Attribution.prototype.collectSourceAttributions_ = function (frameState) {
            /**
             * Used to determine if an attribution already exists.
             * @type {!Object<string, boolean>}
             */
            var lookup = {};
            /**
             * A list of visible attributions.
             * @type {Array<string>}
             */
            var visibleAttributions = [];
            var layerStatesArray = frameState.layerStatesArray;
            for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                var layerState = layerStatesArray[i];
                if (!inView(layerState, frameState.viewState)) {
                    continue;
                }
                var source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
                if (!source) {
                    continue;
                }
                var attributionGetter = source.getAttributions();
                if (!attributionGetter) {
                    continue;
                }
                var attributions = attributionGetter(frameState);
                if (!attributions) {
                    continue;
                }
                if (!this.overrideCollapsible_ &&
                    source.getAttributionsCollapsible() === false) {
                    this.setCollapsible(false);
                }
                if (Array.isArray(attributions)) {
                    for (var j = 0, jj = attributions.length; j < jj; ++j) {
                        if (!(attributions[j] in lookup)) {
                            visibleAttributions.push(attributions[j]);
                            lookup[attributions[j]] = true;
                        }
                    }
                }
                else {
                    if (!(attributions in lookup)) {
                        visibleAttributions.push(attributions);
                        lookup[attributions] = true;
                    }
                }
            }
            return visibleAttributions;
        };
        /**
         * @private
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        Attribution.prototype.updateElement_ = function (frameState) {
            if (!frameState) {
                if (this.renderedVisible_) {
                    this.element.style.display = 'none';
                    this.renderedVisible_ = false;
                }
                return;
            }
            var attributions = this.collectSourceAttributions_(frameState);
            var visible = attributions.length > 0;
            if (this.renderedVisible_ != visible) {
                this.element.style.display = visible ? '' : 'none';
                this.renderedVisible_ = visible;
            }
            if (equals(attributions, this.renderedAttributions_)) {
                return;
            }
            removeChildren(this.ulElement_);
            // append the attributions
            for (var i = 0, ii = attributions.length; i < ii; ++i) {
                var element = document.createElement('li');
                element.innerHTML = attributions[i];
                this.ulElement_.appendChild(element);
            }
            this.renderedAttributions_ = attributions;
        };
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        Attribution.prototype.handleClick_ = function (event) {
            event.preventDefault();
            this.handleToggle_();
        };
        /**
         * @private
         */
        Attribution.prototype.handleToggle_ = function () {
            this.element.classList.toggle(CLASS_COLLAPSED);
            if (this.collapsed_) {
                replaceNode(this.collapseLabel_, this.label_);
            }
            else {
                replaceNode(this.label_, this.collapseLabel_);
            }
            this.collapsed_ = !this.collapsed_;
        };
        /**
         * Return `true` if the attribution is collapsible, `false` otherwise.
         * @return {boolean} True if the widget is collapsible.
         * @api
         */
        Attribution.prototype.getCollapsible = function () {
            return this.collapsible_;
        };
        /**
         * Set whether the attribution should be collapsible.
         * @param {boolean} collapsible True if the widget is collapsible.
         * @api
         */
        Attribution.prototype.setCollapsible = function (collapsible) {
            if (this.collapsible_ === collapsible) {
                return;
            }
            this.collapsible_ = collapsible;
            this.element.classList.toggle('ol-uncollapsible');
            if (!collapsible && this.collapsed_) {
                this.handleToggle_();
            }
        };
        /**
         * Collapse or expand the attribution according to the passed parameter. Will
         * not do anything if the attribution isn't collapsible or if the current
         * collapsed state is already the one requested.
         * @param {boolean} collapsed True if the widget is collapsed.
         * @api
         */
        Attribution.prototype.setCollapsed = function (collapsed) {
            if (!this.collapsible_ || this.collapsed_ === collapsed) {
                return;
            }
            this.handleToggle_();
        };
        /**
         * Return `true` when the attribution is currently collapsed or `false`
         * otherwise.
         * @return {boolean} True if the widget is collapsed.
         * @api
         */
        Attribution.prototype.getCollapsed = function () {
            return this.collapsed_;
        };
        /**
         * Update the attribution element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        Attribution.prototype.render = function (mapEvent) {
            this.updateElement_(mapEvent.frameState);
        };
        return Attribution;
    }(Control));

    var __extends$x = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-rotate'] CSS class name.
     * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control should
     * be re-rendered. This is called in a `requestAnimationFrame` callback.
     * @property {function():void} [resetNorth] Function called when the control is clicked.
     * This will override the default `resetNorth`.
     * @property {HTMLElement|string} [target] Specify a target if you want the control to be
     * rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A button control to reset rotation to 0.
     * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
     * selector is added to the button when the rotation is 0.
     *
     * @api
     */
    var Rotate = /** @class */ (function (_super) {
        __extends$x(Rotate, _super);
        /**
         * @param {Options=} opt_options Rotate options.
         */
        function Rotate(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            }) || this;
            var className = options.className !== undefined ? options.className : 'ol-rotate';
            var label = options.label !== undefined ? options.label : '\u21E7';
            /**
             * @type {HTMLElement}
             * @private
             */
            _this.label_ = null;
            if (typeof label === 'string') {
                _this.label_ = document.createElement('span');
                _this.label_.className = 'ol-compass';
                _this.label_.textContent = label;
            }
            else {
                _this.label_ = label;
                _this.label_.classList.add('ol-compass');
            }
            var tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';
            var button = document.createElement('button');
            button.className = className + '-reset';
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(_this.label_);
            button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
            var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
            var element = _this.element;
            element.className = cssClasses;
            element.appendChild(button);
            _this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;
            /**
             * @type {number}
             * @private
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            /**
             * @type {boolean}
             * @private
             */
            _this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.rotation_ = undefined;
            if (_this.autoHide_) {
                _this.element.classList.add(CLASS_HIDDEN);
            }
            return _this;
        }
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        Rotate.prototype.handleClick_ = function (event) {
            event.preventDefault();
            if (this.callResetNorth_ !== undefined) {
                this.callResetNorth_();
            }
            else {
                this.resetNorth_();
            }
        };
        /**
         * @private
         */
        Rotate.prototype.resetNorth_ = function () {
            var map = this.getMap();
            var view = map.getView();
            if (!view) {
                // the map does not have a view, so we can't act
                // upon it
                return;
            }
            var rotation = view.getRotation();
            if (rotation !== undefined) {
                if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {
                    view.animate({
                        rotation: 0,
                        duration: this.duration_,
                        easing: easeOut,
                    });
                }
                else {
                    view.setRotation(0);
                }
            }
        };
        /**
         * Update the rotate control element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        Rotate.prototype.render = function (mapEvent) {
            var frameState = mapEvent.frameState;
            if (!frameState) {
                return;
            }
            var rotation = frameState.viewState.rotation;
            if (rotation != this.rotation_) {
                var transform = 'rotate(' + rotation + 'rad)';
                if (this.autoHide_) {
                    var contains = this.element.classList.contains(CLASS_HIDDEN);
                    if (!contains && rotation === 0) {
                        this.element.classList.add(CLASS_HIDDEN);
                    }
                    else if (contains && rotation !== 0) {
                        this.element.classList.remove(CLASS_HIDDEN);
                    }
                }
                this.label_.style.transform = transform;
            }
            this.rotation_ = rotation;
        };
        return Rotate;
    }(Control));

    var __extends$y = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {string} [className='ol-zoom'] CSS class name.
     * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
     * button. Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
     * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
     * @property {number} [delta=1] The zoom delta applied on each click.
     * @property {HTMLElement|string} [target] Specify a target if you want the control to be
     * rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A control with 2 buttons, one for zoom in and one for zoom out.
     * This control is one of the default controls of a map. To style this control
     * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
     *
     * @api
     */
    var Zoom = /** @class */ (function (_super) {
        __extends$y(Zoom, _super);
        /**
         * @param {Options=} opt_options Zoom options.
         */
        function Zoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                element: document.createElement('div'),
                target: options.target,
            }) || this;
            var className = options.className !== undefined ? options.className : 'ol-zoom';
            var delta = options.delta !== undefined ? options.delta : 1;
            var zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
            var zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';
            var zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';
            var zoomOutTipLabel = options.zoomOutTipLabel !== undefined
                ? options.zoomOutTipLabel
                : 'Zoom out';
            var inElement = document.createElement('button');
            inElement.className = className + '-in';
            inElement.setAttribute('type', 'button');
            inElement.title = zoomInTipLabel;
            inElement.appendChild(typeof zoomInLabel === 'string'
                ? document.createTextNode(zoomInLabel)
                : zoomInLabel);
            inElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, delta), false);
            var outElement = document.createElement('button');
            outElement.className = className + '-out';
            outElement.setAttribute('type', 'button');
            outElement.title = zoomOutTipLabel;
            outElement.appendChild(typeof zoomOutLabel === 'string'
                ? document.createTextNode(zoomOutLabel)
                : zoomOutLabel);
            outElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, -delta), false);
            var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
            var element = _this.element;
            element.className = cssClasses;
            element.appendChild(inElement);
            element.appendChild(outElement);
            /**
             * @type {number}
             * @private
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * @param {number} delta Zoom delta.
         * @param {MouseEvent} event The event to handle
         * @private
         */
        Zoom.prototype.handleClick_ = function (delta, event) {
            event.preventDefault();
            this.zoomByDelta_(delta);
        };
        /**
         * @param {number} delta Zoom delta.
         * @private
         */
        Zoom.prototype.zoomByDelta_ = function (delta) {
            var map = this.getMap();
            var view = map.getView();
            if (!view) {
                // the map does not have a view, so we can't act
                // upon it
                return;
            }
            var currentZoom = view.getZoom();
            if (currentZoom !== undefined) {
                var newZoom = view.getConstrainedZoom(currentZoom + delta);
                if (this.duration_ > 0) {
                    if (view.getAnimating()) {
                        view.cancelAnimations();
                    }
                    view.animate({
                        zoom: newZoom,
                        duration: this.duration_,
                        easing: easeOut,
                    });
                }
                else {
                    view.setZoom(newZoom);
                }
            }
        };
        return Zoom;
    }(Control));

    /**
     * @module ol/control
     */
    /**
     * @typedef {Object} DefaultsOptions
     * @property {boolean} [attribution=true] Include
     * {@link module:ol/control/Attribution~Attribution}.
     * @property {import("./control/Attribution.js").Options} [attributionOptions]
     * Options for {@link module:ol/control/Attribution~Attribution}.
     * @property {boolean} [rotate=true] Include
     * {@link module:ol/control/Rotate~Rotate}.
     * @property {import("./control/Rotate.js").Options} [rotateOptions] Options
     * for {@link module:ol/control/Rotate~Rotate}.
     * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
     * @property {import("./control/Zoom.js").Options} [zoomOptions] Options for
     * {@link module:ol/control/Zoom~Zoom}.
     * @api
     */
    /**
     * Set of controls included in maps by default. Unless configured otherwise,
     * this returns a collection containing an instance of each of the following
     * controls:
     * * {@link module:ol/control/Zoom~Zoom}
     * * {@link module:ol/control/Rotate~Rotate}
     * * {@link module:ol/control/Attribution~Attribution}
     *
     * @param {DefaultsOptions=} opt_options
     * Defaults options.
     * @return {Collection<import("./control/Control.js").default>}
     * Controls.
     * @api
     */
    function defaults(opt_options) {
        var options = opt_options ? opt_options : {};
        var controls = new Collection();
        var zoomControl = options.zoom !== undefined ? options.zoom : true;
        if (zoomControl) {
            controls.push(new Zoom(options.zoomOptions));
        }
        var rotateControl = options.rotate !== undefined ? options.rotate : true;
        if (rotateControl) {
            controls.push(new Rotate(options.rotateOptions));
        }
        var attributionControl = options.attribution !== undefined ? options.attribution : true;
        if (attributionControl) {
            controls.push(new Attribution(options.attributionOptions));
        }
        return controls;
    }

    /**
     * @module ol/interaction/Property
     */
    /**
     * @enum {string}
     */
    var InteractionProperty = {
        ACTIVE: 'active',
    };

    var __extends$z = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * Object literal with config options for interactions.
     * @typedef {Object} InteractionOptions
     * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
     * Method called by the map to notify the interaction that a browser event was
     * dispatched to the map. If the function returns a falsy value, propagation of
     * the event to other interactions in the map's interactions chain will be
     * prevented (this includes functions with no explicit return). The interactions
     * are traversed in reverse order of the interactions collection of the map.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * User actions that change the state of the map. Some are similar to controls,
     * but are not associated with a DOM element.
     * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
     * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
     * by a keyboard event not a button element event.
     * Although interactions do not have a DOM element, some of them do render
     * vectors and so are visible on the screen.
     * @api
     */
    var Interaction = /** @class */ (function (_super) {
        __extends$z(Interaction, _super);
        /**
         * @param {InteractionOptions=} opt_options Options.
         */
        function Interaction(opt_options) {
            var _this = _super.call(this) || this;
            if (opt_options && opt_options.handleEvent) {
                _this.handleEvent = opt_options.handleEvent;
            }
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = null;
            _this.setActive(true);
            return _this;
        }
        /**
         * Return whether the interaction is currently active.
         * @return {boolean} `true` if the interaction is active, `false` otherwise.
         * @observable
         * @api
         */
        Interaction.prototype.getActive = function () {
            return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
        };
        /**
         * Get the map associated with this interaction.
         * @return {import("../PluggableMap.js").default} Map.
         * @api
         */
        Interaction.prototype.getMap = function () {
            return this.map_;
        };
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event}.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @api
         */
        Interaction.prototype.handleEvent = function (mapBrowserEvent) {
            return true;
        };
        /**
         * Activate or deactivate the interaction.
         * @param {boolean} active Active.
         * @observable
         * @api
         */
        Interaction.prototype.setActive = function (active) {
            this.set(InteractionProperty.ACTIVE, active);
        };
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        Interaction.prototype.setMap = function (map) {
            this.map_ = map;
        };
        return Interaction;
    }(BaseObject));
    /**
     * @param {import("../View.js").default} view View.
     * @param {import("../coordinate.js").Coordinate} delta Delta.
     * @param {number=} opt_duration Duration.
     */
    function pan(view, delta, opt_duration) {
        var currentCenter = view.getCenterInternal();
        if (currentCenter) {
            var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
            view.animateInternal({
                duration: opt_duration !== undefined ? opt_duration : 250,
                easing: linear,
                center: view.getConstrainedCenter(center),
            });
        }
    }
    /**
     * @param {import("../View.js").default} view View.
     * @param {number} delta Delta from previous zoom level.
     * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate in the user projection.
     * @param {number=} opt_duration Duration.
     */
    function zoomByDelta(view, delta, opt_anchor, opt_duration) {
        var currentZoom = view.getZoom();
        if (currentZoom === undefined) {
            return;
        }
        var newZoom = view.getConstrainedZoom(currentZoom + delta);
        var newResolution = view.getResolutionForZoom(newZoom);
        if (view.getAnimating()) {
            view.cancelAnimations();
        }
        view.animate({
            resolution: newResolution,
            anchor: opt_anchor,
            duration: opt_duration !== undefined ? opt_duration : 250,
            easing: easeOut,
        });
    }

    var __extends$A = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {number} [delta=1] The zoom delta applied on each double click.
     */
    /**
     * @classdesc
     * Allows the user to zoom by double-clicking on the map.
     * @api
     */
    var DoubleClickZoom = /** @class */ (function (_super) {
        __extends$A(DoubleClickZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DoubleClickZoom(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {number}
             */
            _this.delta_ = options.delta ? options.delta : 1;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
         * doubleclick) and eventually zooms the map.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        DoubleClickZoom.prototype.handleEvent = function (mapBrowserEvent) {
            var stopEvent = false;
            if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
                var browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
                var map = mapBrowserEvent.map;
                var anchor = mapBrowserEvent.coordinate;
                var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
                var view = map.getView();
                zoomByDelta(view, delta, anchor, this.duration_);
                mapBrowserEvent.preventDefault();
                stopEvent = true;
            }
            return !stopEvent;
        };
        return DoubleClickZoom;
    }(Interaction));

    var __extends$B = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleDownEvent]
     * Function handling "down" events. If the function returns `true` then a drag
     * sequence is started.
     * @property {function(import("../MapBrowserEvent.js").default):void} [handleDragEvent]
     * Function handling "drag" events. This function is called on "move" events
     * during a drag sequence.
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
     * Method called by the map to notify the interaction that a browser event was
     * dispatched to the map. The function may return `false` to prevent the
     * propagation of the event to other interactions in the map's interactions
     * chain.
     * @property {function(import("../MapBrowserEvent.js").default):void} [handleMoveEvent]
     * Function handling "move" events. This function is called on "move" events.
     * This functions is also called during a drag sequence, so during a drag
     * sequence both the `handleDragEvent` function and this function are called.
     * If `handleDownEvent` is defined and it returns true this function will not
     * be called during a drag sequence.
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleUpEvent]
     *  Function handling "up" events. If the function returns `false` then the
     * current drag sequence is stopped.
     * @property {function(boolean):boolean} [stopDown]
     * Should the down event be propagated to other interactions, or should be
     * stopped?
     */
    /**
     * @classdesc
     * Base class that calls user-defined functions on `down`, `move` and `up`
     * events. This class also manages "drag sequences".
     *
     * When the `handleDownEvent` user function returns `true` a drag sequence is
     * started. During a drag sequence the `handleDragEvent` user function is
     * called on `move` events. The drag sequence ends when the `handleUpEvent`
     * user function is called and returns `false`.
     * @api
     */
    var PointerInteraction = /** @class */ (function (_super) {
        __extends$B(PointerInteraction, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function PointerInteraction(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, 
            /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
            if (options.handleDownEvent) {
                _this.handleDownEvent = options.handleDownEvent;
            }
            if (options.handleDragEvent) {
                _this.handleDragEvent = options.handleDragEvent;
            }
            if (options.handleMoveEvent) {
                _this.handleMoveEvent = options.handleMoveEvent;
            }
            if (options.handleUpEvent) {
                _this.handleUpEvent = options.handleUpEvent;
            }
            if (options.stopDown) {
                _this.stopDown = options.stopDown;
            }
            /**
             * @type {boolean}
             * @protected
             */
            _this.handlingDownUpSequence = false;
            /**
             * @type {!Object<string, PointerEvent>}
             * @private
             */
            _this.trackedPointers_ = {};
            /**
             * @type {Array<PointerEvent>}
             * @protected
             */
            _this.targetPointers = [];
            return _this;
        }
        /**
         * Returns the current number of pointers involved in the interaction,
         * e.g. `2` when two fingers are used.
         * @return {number} The number of pointers.
         * @api
         */
        PointerInteraction.prototype.getPointerCount = function () {
            return this.targetPointers.length;
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         * @protected
         */
        PointerInteraction.prototype.handleDownEvent = function (mapBrowserEvent) {
            return false;
        };
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @protected
         */
        PointerInteraction.prototype.handleDragEvent = function (mapBrowserEvent) { };
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
         * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
         * detected.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @api
         */
        PointerInteraction.prototype.handleEvent = function (mapBrowserEvent) {
            if (!mapBrowserEvent.originalEvent) {
                return true;
            }
            var stopEvent = false;
            this.updateTrackedPointers_(mapBrowserEvent);
            if (this.handlingDownUpSequence) {
                if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
                    this.handleDragEvent(mapBrowserEvent);
                    // prevent page scrolling during dragging
                    mapBrowserEvent.preventDefault();
                }
                else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
                    var handledUp = this.handleUpEvent(mapBrowserEvent);
                    this.handlingDownUpSequence =
                        handledUp && this.targetPointers.length > 0;
                }
            }
            else {
                if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
                    var handled = this.handleDownEvent(mapBrowserEvent);
                    this.handlingDownUpSequence = handled;
                    stopEvent = this.stopDown(handled);
                }
                else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
                    this.handleMoveEvent(mapBrowserEvent);
                }
            }
            return !stopEvent;
        };
        /**
         * Handle pointer move events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @protected
         */
        PointerInteraction.prototype.handleMoveEvent = function (mapBrowserEvent) { };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         * @protected
         */
        PointerInteraction.prototype.handleUpEvent = function (mapBrowserEvent) {
            return false;
        };
        /**
         * This function is used to determine if "down" events should be propagated
         * to other interactions or should be stopped.
         * @param {boolean} handled Was the event handled by the interaction?
         * @return {boolean} Should the `down` event be stopped?
         */
        PointerInteraction.prototype.stopDown = function (handled) {
            return handled;
        };
        /**
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @private
         */
        PointerInteraction.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {
            if (isPointerDraggingEvent(mapBrowserEvent)) {
                var event_1 = mapBrowserEvent.originalEvent;
                var id = event_1.pointerId.toString();
                if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
                    delete this.trackedPointers_[id];
                }
                else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
                    this.trackedPointers_[id] = event_1;
                }
                else if (id in this.trackedPointers_) {
                    // update only when there was a pointerdown event for this pointer
                    this.trackedPointers_[id] = event_1;
                }
                this.targetPointers = getValues(this.trackedPointers_);
            }
        };
        return PointerInteraction;
    }(Interaction));
    /**
     * @param {Array<PointerEvent>} pointerEvents List of events.
     * @return {import("../pixel.js").Pixel} Centroid pixel.
     */
    function centroid(pointerEvents) {
        var length = pointerEvents.length;
        var clientX = 0;
        var clientY = 0;
        for (var i = 0; i < length; i++) {
            clientX += pointerEvents[i].clientX;
            clientY += pointerEvents[i].clientY;
        }
        return [clientX / length, clientY / length];
    }
    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} Whether the event is a pointerdown, pointerdrag
     *     or pointerup event.
     */
    function isPointerDraggingEvent(mapBrowserEvent) {
        var type = mapBrowserEvent.type;
        return (type === MapBrowserEventType.POINTERDOWN ||
            type === MapBrowserEventType.POINTERDRAG ||
            type === MapBrowserEventType.POINTERUP);
    }

    /**
     * @module ol/events/condition
     */
    /**
     * A function that takes an {@link module:ol/MapBrowserEvent} and returns a
     * `{boolean}`. If the condition is met, true should be returned.
     *
     * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
     */
    /**
     * Creates a condition function that passes when all provided conditions pass.
     * @param {...Condition} var_args Conditions to check.
     * @return {Condition} Condition function.
     */
    function all(var_args) {
        var conditions = arguments;
        /**
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} All conditions passed.
         */
        return function (event) {
            var pass = true;
            for (var i = 0, ii = conditions.length; i < ii; ++i) {
                pass = pass && conditions[i](event);
                if (!pass) {
                    break;
                }
            }
            return pass;
        };
    }
    /**
     * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
     * (e.g. when additionally the platform-modifier-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the alt and shift keys are pressed.
     * @api
     */
    var altShiftKeysOnly = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            originalEvent.shiftKey);
    };
    /**
     * Return `true` if the map has the focus. This condition requires a map target
     * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
     *
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} The map has the focus.
     * @api
     */
    var focus = function (event) {
        return event.target.getTargetElement().contains(document.activeElement);
    };
    /**
     * Return `true` if the map has the focus or no 'tabindex' attribute set.
     *
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} The map container has the focus or no 'tabindex' attribute.
     */
    var focusWithTabindex = function (event) {
        return event.map.getTargetElement().hasAttribute('tabindex')
            ? focus(event)
            : true;
    };
    /**
     * Return always true.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True.
     * @api
     */
    var always = TRUE;
    /**
     * Return `true` if the event has an "action"-producing mouse button.
     *
     * By definition, this includes left-click on windows/linux, and left-click
     * without the ctrl key on Macs.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} The result.
     */
    var mouseActionButton = function (mapBrowserEvent) {
        var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
        return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);
    };
    /**
     * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
     * pressed.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True only if there no modifier keys are pressed.
     * @api
     */
    var noModifierKeys = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (!originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            !originalEvent.shiftKey);
    };
    /**
     * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
     * additionally the alt-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the shift key is pressed.
     * @api
     */
    var shiftKeyOnly = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (!originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            originalEvent.shiftKey);
    };
    /**
     * Return `true` if the target element is not editable, i.e. not a `<input>`-,
     * `<select>`- or `<textarea>`-element, `false` otherwise.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True only if the target element is not editable.
     * @api
     */
    var targetNotEditable = function (mapBrowserEvent) {
        var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        var tagName = /** @type {Element} */ (originalEvent.target).tagName;
        return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';
    };
    /**
     * Return `true` if the event originates from a mouse device.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a mouse device.
     * @api
     */
    var mouseOnly = function (mapBrowserEvent) {
        var pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
        return pointerEvent.pointerType == 'mouse';
    };
    /**
     * Return `true` if the event originates from a primary pointer in
     * contact with the surface or if the left mouse button is pressed.
     * See http://www.w3.org/TR/pointerevents/#button-states.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a primary pointer.
     * @api
     */
    var primaryAction = function (mapBrowserEvent) {
        var pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        return pointerEvent.isPrimary && pointerEvent.button === 0;
    };

    var __extends$C = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~noModifierKeys} and {@link module:ol/events/condition~primaryAction}.
     * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
     * the interaction will only handle events when the map has the focus.
     * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
     */
    /**
     * @classdesc
     * Allows the user to pan the map by dragging the map.
     * @api
     */
    var DragPan = /** @class */ (function (_super) {
        __extends$C(DragPan, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragPan(opt_options) {
            var _this = _super.call(this, {
                stopDown: FALSE,
            }) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {import("../Kinetic.js").default|undefined}
             */
            _this.kinetic_ = options.kinetic;
            /**
             * @type {import("../pixel.js").Pixel}
             */
            _this.lastCentroid = null;
            /**
             * @type {number}
             */
            _this.lastPointersCount_;
            /**
             * @type {boolean}
             */
            _this.panning_ = false;
            var condition = options.condition
                ? options.condition
                : all(noModifierKeys, primaryAction);
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.onFocusOnly
                ? all(focusWithTabindex, condition)
                : condition;
            /**
             * @private
             * @type {boolean}
             */
            _this.noKinetic_ = false;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {
            if (!this.panning_) {
                this.panning_ = true;
                this.getMap().getView().beginInteraction();
            }
            var targetPointers = this.targetPointers;
            var centroid$1 = centroid(targetPointers);
            if (targetPointers.length == this.lastPointersCount_) {
                if (this.kinetic_) {
                    this.kinetic_.update(centroid$1[0], centroid$1[1]);
                }
                if (this.lastCentroid) {
                    var delta = [
                        this.lastCentroid[0] - centroid$1[0],
                        centroid$1[1] - this.lastCentroid[1],
                    ];
                    var map = mapBrowserEvent.map;
                    var view = map.getView();
                    scale(delta, view.getResolution());
                    rotate(delta, view.getRotation());
                    view.adjustCenterInternal(delta);
                }
            }
            else if (this.kinetic_) {
                // reset so we don't overestimate the kinetic energy after
                // after one finger down, tiny drag, second finger down
                this.kinetic_.begin();
            }
            this.lastCentroid = centroid$1;
            this.lastPointersCount_ = targetPointers.length;
            mapBrowserEvent.originalEvent.preventDefault();
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (this.targetPointers.length === 0) {
                if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
                    var distance = this.kinetic_.getDistance();
                    var angle = this.kinetic_.getAngle();
                    var center = view.getCenterInternal();
                    var centerpx = map.getPixelFromCoordinateInternal(center);
                    var dest = map.getCoordinateFromPixelInternal([
                        centerpx[0] - distance * Math.cos(angle),
                        centerpx[1] - distance * Math.sin(angle),
                    ]);
                    view.animateInternal({
                        center: view.getConstrainedCenter(dest),
                        duration: 500,
                        easing: easeOut,
                    });
                }
                if (this.panning_) {
                    this.panning_ = false;
                    view.endInteraction();
                }
                return false;
            }
            else {
                if (this.kinetic_) {
                    // reset so we don't overestimate the kinetic energy after
                    // after one finger up, tiny drag, second finger up
                    this.kinetic_.begin();
                }
                this.lastCentroid = null;
                return true;
            }
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
                var map = mapBrowserEvent.map;
                var view = map.getView();
                this.lastCentroid = null;
                // stop any current animation
                if (view.getAnimating()) {
                    view.cancelAnimations();
                }
                if (this.kinetic_) {
                    this.kinetic_.begin();
                }
                // No kinetic as soon as more than one pointer on the screen is
                // detected. This is to prevent nasty pans after pinch.
                this.noKinetic_ = this.targetPointers.length > 1;
                return true;
            }
            else {
                return false;
            }
        };
        return DragPan;
    }(PointerInteraction));

    var __extends$D = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an
     * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
     * @property {number} [duration=250] Animation duration in milliseconds.
     */
    /**
     * @classdesc
     * Allows the user to rotate the map by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when the alt and shift keys are held down.
     *
     * This interaction is only supported for mouse devices.
     * @api
     */
    var DragRotate = /** @class */ (function (_super) {
        __extends$D(DragRotate, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragRotate(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, {
                stopDown: FALSE,
            }) || this;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.lastAngle_ = undefined;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
            if (!mouseOnly(mapBrowserEvent)) {
                return;
            }
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (view.getConstraints().rotation === disable) {
                return;
            }
            var size = map.getSize();
            var offset = mapBrowserEvent.pixel;
            var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
            if (this.lastAngle_ !== undefined) {
                var delta = theta - this.lastAngle_;
                view.adjustRotationInternal(-delta);
            }
            this.lastAngle_ = theta;
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
            if (!mouseOnly(mapBrowserEvent)) {
                return true;
            }
            var map = mapBrowserEvent.map;
            var view = map.getView();
            view.endInteraction(this.duration_);
            return false;
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (!mouseOnly(mapBrowserEvent)) {
                return false;
            }
            if (mouseActionButton(mapBrowserEvent) &&
                this.condition_(mapBrowserEvent)) {
                var map = mapBrowserEvent.map;
                map.getView().beginInteraction();
                this.lastAngle_ = undefined;
                return true;
            }
            else {
                return false;
            }
        };
        return DragRotate;
    }(PointerInteraction));

    /**
     * @module ol/render/Box
     */
    var __extends$E = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var RenderBox = /** @class */ (function (_super) {
        __extends$E(RenderBox, _super);
        /**
         * @param {string} className CSS class name.
         */
        function RenderBox(className) {
            var _this = _super.call(this) || this;
            /**
             * @type {import("../geom/Polygon.js").default}
             * @private
             */
            _this.geometry_ = null;
            /**
             * @type {HTMLDivElement}
             * @private
             */
            _this.element_ = document.createElement('div');
            _this.element_.style.position = 'absolute';
            _this.element_.style.pointerEvents = 'auto';
            _this.element_.className = 'ol-box ' + className;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            _this.map_ = null;
            /**
             * @private
             * @type {import("../pixel.js").Pixel}
             */
            _this.startPixel_ = null;
            /**
             * @private
             * @type {import("../pixel.js").Pixel}
             */
            _this.endPixel_ = null;
            return _this;
        }
        /**
         * Clean up.
         */
        RenderBox.prototype.disposeInternal = function () {
            this.setMap(null);
        };
        /**
         * @private
         */
        RenderBox.prototype.render_ = function () {
            var startPixel = this.startPixel_;
            var endPixel = this.endPixel_;
            var px = 'px';
            var style = this.element_.style;
            style.left = Math.min(startPixel[0], endPixel[0]) + px;
            style.top = Math.min(startPixel[1], endPixel[1]) + px;
            style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
            style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
        };
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        RenderBox.prototype.setMap = function (map) {
            if (this.map_) {
                this.map_.getOverlayContainer().removeChild(this.element_);
                var style = this.element_.style;
                style.left = 'inherit';
                style.top = 'inherit';
                style.width = 'inherit';
                style.height = 'inherit';
            }
            this.map_ = map;
            if (this.map_) {
                this.map_.getOverlayContainer().appendChild(this.element_);
            }
        };
        /**
         * @param {import("../pixel.js").Pixel} startPixel Start pixel.
         * @param {import("../pixel.js").Pixel} endPixel End pixel.
         */
        RenderBox.prototype.setPixels = function (startPixel, endPixel) {
            this.startPixel_ = startPixel;
            this.endPixel_ = endPixel;
            this.createOrUpdateGeometry();
            this.render_();
        };
        /**
         * Creates or updates the cached geometry.
         */
        RenderBox.prototype.createOrUpdateGeometry = function () {
            var startPixel = this.startPixel_;
            var endPixel = this.endPixel_;
            var pixels = [
                startPixel,
                [startPixel[0], endPixel[1]],
                endPixel,
                [endPixel[0], startPixel[1]],
            ];
            var coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
            // close the polygon
            coordinates[4] = coordinates[0].slice();
            if (!this.geometry_) {
                this.geometry_ = new Polygon([coordinates]);
            }
            else {
                this.geometry_.setCoordinates([coordinates]);
            }
        };
        /**
         * @return {import("../geom/Polygon.js").default} Geometry.
         */
        RenderBox.prototype.getGeometry = function () {
            return this.geometry_;
        };
        return RenderBox;
    }(Disposable));

    var __extends$F = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * A function that takes a {@link module:ol/MapBrowserEvent} and two
     * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
     * true should be returned.
     * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
     */
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link ol/events/condition~mouseActionButton}.
     * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
     * `boxEndCondition` function.
     * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
     * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
     * Default is `true` if the area of the box is bigger than the `minArea` option.
     * @property {function(this:DragBox, import("../MapBrowserEvent.js").default):void} [onBoxEnd] Code to execute just
     * before `boxend` is fired.
     */
    /**
     * @enum {string}
     */
    var DragBoxEventType = {
        /**
         * Triggered upon drag box start.
         * @event DragBoxEvent#boxstart
         * @api
         */
        BOXSTART: 'boxstart',
        /**
         * Triggered on drag when box is active.
         * @event DragBoxEvent#boxdrag
         * @api
         */
        BOXDRAG: 'boxdrag',
        /**
         * Triggered upon drag box end.
         * @event DragBoxEvent#boxend
         * @api
         */
        BOXEND: 'boxend',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
     * this type.
     */
    var DragBoxEvent = /** @class */ (function (_super) {
        __extends$F(DragBoxEvent, _super);
        /**
         * @param {string} type The event type.
         * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
         */
        function DragBoxEvent(type, coordinate, mapBrowserEvent) {
            var _this = _super.call(this, type) || this;
            /**
             * The coordinate of the drag event.
             * @const
             * @type {import("../coordinate.js").Coordinate}
             * @api
             */
            _this.coordinate = coordinate;
            /**
             * @const
             * @type {import("../MapBrowserEvent.js").default}
             * @api
             */
            _this.mapBrowserEvent = mapBrowserEvent;
            return _this;
        }
        return DragBoxEvent;
    }(BaseEvent));
    /**
     * @classdesc
     * Allows the user to draw a vector box by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when the shift or other key is held down. This is used, for example,
     * for zooming to a specific area of the map
     * (see {@link module:ol/interaction/DragZoom~DragZoom} and
     * {@link module:ol/interaction/DragRotateAndZoom}).
     *
     * @fires DragBoxEvent
     * @api
     */
    var DragBox = /** @class */ (function (_super) {
        __extends$F(DragBox, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragBox(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @type {import("../render/Box.js").default}
             * @private
             */
            _this.box_ = new RenderBox(options.className || 'ol-dragbox');
            /**
             * @type {number}
             * @private
             */
            _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;
            if (options.onBoxEnd) {
                _this.onBoxEnd = options.onBoxEnd;
            }
            /**
             * @type {import("../pixel.js").Pixel}
             * @private
             */
            _this.startPixel_ = null;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.condition ? options.condition : mouseActionButton;
            /**
             * @private
             * @type {EndCondition}
             */
            _this.boxEndCondition_ = options.boxEndCondition
                ? options.boxEndCondition
                : _this.defaultBoxEndCondition;
            return _this;
        }
        /**
         * The default condition for determining whether the boxend event
         * should fire.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
         *     leading to the box end.
         * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
         * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
         * @return {boolean} Whether or not the boxend condition should be fired.
         */
        DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {
            var width = endPixel[0] - startPixel[0];
            var height = endPixel[1] - startPixel[1];
            return width * width + height * height >= this.minArea_;
        };
        /**
         * Returns geometry of last drawn box.
         * @return {import("../geom/Polygon.js").default} Geometry.
         * @api
         */
        DragBox.prototype.getGeometry = function () {
            return this.box_.getGeometry();
        };
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {
            this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);
            this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {
            this.box_.setMap(null);
            if (this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel)) {
                this.onBoxEnd(mapBrowserEvent);
                this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND, mapBrowserEvent.coordinate, mapBrowserEvent));
            }
            return false;
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.condition_(mapBrowserEvent)) {
                this.startPixel_ = mapBrowserEvent.pixel;
                this.box_.setMap(mapBrowserEvent.map);
                this.box_.setPixels(this.startPixel_, this.startPixel_);
                this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * Function to execute just before `onboxend` is fired
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        DragBox.prototype.onBoxEnd = function (event) { };
        return DragBox;
    }(PointerInteraction));

    var __extends$G = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-dragzoom'] CSS class name for styling the
     * box.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~shiftKeyOnly}.
     * @property {number} [duration=200] Animation duration in milliseconds.
     * @property {boolean} [out=false] Use interaction for zooming out.
     * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
     * `boxEndCondition` function.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when a key, shift by default, is held down.
     *
     * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
     * your custom one configured with `className`.
     * @api
     */
    var DragZoom = /** @class */ (function (_super) {
        __extends$G(DragZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function DragZoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var condition = options.condition ? options.condition : shiftKeyOnly;
            _this = _super.call(this, {
                condition: condition,
                className: options.className || 'ol-dragzoom',
                minArea: options.minArea,
            }) || this;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 200;
            /**
             * @private
             * @type {boolean}
             */
            _this.out_ = options.out !== undefined ? options.out : false;
            return _this;
        }
        /**
         * Function to execute just before `onboxend` is fired
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        DragZoom.prototype.onBoxEnd = function (event) {
            var map = this.getMap();
            var view = /** @type {!import("../View.js").default} */ (map.getView());
            var size = /** @type {!import("../size.js").Size} */ (map.getSize());
            var extent = this.getGeometry().getExtent();
            if (this.out_) {
                var mapExtent = view.calculateExtentInternal(size);
                var boxPixelExtent = createOrUpdateFromCoordinates([
                    map.getPixelFromCoordinateInternal(getBottomLeft(extent)),
                    map.getPixelFromCoordinateInternal(getTopRight(extent)),
                ]);
                var factor = view.getResolutionForExtentInternal(boxPixelExtent, size);
                scaleFromCenter(mapExtent, 1 / factor);
                extent = mapExtent;
            }
            var resolution = view.getConstrainedResolution(view.getResolutionForExtentInternal(extent, size));
            var center = view.getConstrainedCenter(getCenter(extent), resolution);
            view.animateInternal({
                resolution: resolution,
                center: center,
                duration: this.duration_,
                easing: easeOut,
            });
        };
        return DragZoom;
    }(DragBox));

    /**
     * @module ol/events/KeyCode
     */
    /**
     * @enum {number}
     * @const
     */
    var KeyCode = {
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
    };

    var __extends$H = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~noModifierKeys} and
     * {@link module:ol/events/condition~targetNotEditable}.
     * @property {number} [duration=100] Animation duration in milliseconds.
     * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
     * press.
     */
    /**
     * @classdesc
     * Allows the user to pan the map using keyboard arrows.
     * Note that, although this interaction is by default included in maps,
     * the keys can only be used when browser focus is on the element to which
     * the keyboard events are attached. By default, this is the map div,
     * though you can change this with the `keyboardEventTarget` in
     * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
     * element, focus will have to be on, and returned to, this element if the keys
     * are to function.
     * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
     * @api
     */
    var KeyboardPan = /** @class */ (function (_super) {
        __extends$H(KeyboardPan, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function KeyboardPan(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options || {};
            /**
             * @private
             * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
             * @return {boolean} Combined condition result.
             */
            _this.defaultCondition_ = function (mapBrowserEvent) {
                return (noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent));
            };
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ =
                options.condition !== undefined
                    ? options.condition
                    : _this.defaultCondition_;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 100;
            /**
             * @private
             * @type {number}
             */
            _this.pixelDelta_ =
                options.pixelDelta !== undefined ? options.pixelDelta : 128;
            return _this;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
         * `KeyEvent`, and decides the direction to pan to (if an arrow key was
         * pressed).
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @this {KeyboardPan}
         */
        KeyboardPan.prototype.handleEvent = function (mapBrowserEvent) {
            var stopEvent = false;
            if (mapBrowserEvent.type == EventType.KEYDOWN) {
                var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
                var keyCode = keyEvent.keyCode;
                if (this.condition_(mapBrowserEvent) &&
                    (keyCode == KeyCode.DOWN ||
                        keyCode == KeyCode.LEFT ||
                        keyCode == KeyCode.RIGHT ||
                        keyCode == KeyCode.UP)) {
                    var map = mapBrowserEvent.map;
                    var view = map.getView();
                    var mapUnitsDelta = view.getResolution() * this.pixelDelta_;
                    var deltaX = 0, deltaY = 0;
                    if (keyCode == KeyCode.DOWN) {
                        deltaY = -mapUnitsDelta;
                    }
                    else if (keyCode == KeyCode.LEFT) {
                        deltaX = -mapUnitsDelta;
                    }
                    else if (keyCode == KeyCode.RIGHT) {
                        deltaX = mapUnitsDelta;
                    }
                    else {
                        deltaY = mapUnitsDelta;
                    }
                    var delta = [deltaX, deltaY];
                    rotate(delta, view.getRotation());
                    pan(view, delta, this.duration_);
                    mapBrowserEvent.preventDefault();
                    stopEvent = true;
                }
            }
            return !stopEvent;
        };
        return KeyboardPan;
    }(Interaction));

    var __extends$I = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=100] Animation duration in milliseconds.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~targetNotEditable}.
     * @property {number} [delta=1] The zoom level delta on each key press.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map using keyboard + and -.
     * Note that, although this interaction is by default included in maps,
     * the keys can only be used when browser focus is on the element to which
     * the keyboard events are attached. By default, this is the map div,
     * though you can change this with the `keyboardEventTarget` in
     * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
     * element, focus will have to be on, and returned to, this element if the keys
     * are to function.
     * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
     * @api
     */
    var KeyboardZoom = /** @class */ (function (_super) {
        __extends$I(KeyboardZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function KeyboardZoom(opt_options) {
            var _this = _super.call(this) || this;
            var options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.condition ? options.condition : targetNotEditable;
            /**
             * @private
             * @type {number}
             */
            _this.delta_ = options.delta ? options.delta : 1;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 100;
            return _this;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
         * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
         * key pressed was '+' or '-').
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @this {KeyboardZoom}
         */
        KeyboardZoom.prototype.handleEvent = function (mapBrowserEvent) {
            var stopEvent = false;
            if (mapBrowserEvent.type == EventType.KEYDOWN ||
                mapBrowserEvent.type == EventType.KEYPRESS) {
                var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
                var charCode = keyEvent.charCode;
                if (this.condition_(mapBrowserEvent) &&
                    (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
                    var map = mapBrowserEvent.map;
                    var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;
                    var view = map.getView();
                    zoomByDelta(view, delta, undefined, this.duration_);
                    mapBrowserEvent.preventDefault();
                    stopEvent = true;
                }
            }
            return !stopEvent;
        };
        return KeyboardZoom;
    }(Interaction));

    var __extends$J = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @enum {string}
     */
    var Mode = {
        TRACKPAD: 'trackpad',
        WHEEL: 'wheel',
    };
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~always}.
     * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
     * the interaction will only handle events when the map has the focus.
     * @property {number} [maxDelta=1] Maximum mouse wheel delta.
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
     * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
     * location as the anchor. When set to `false`, zooming in and out will zoom to
     * the center of the screen instead of zooming on the mouse's location.
     * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom
     * event will always animate to the closest zoom level after an interaction;
     * false means intermediary zoom levels are allowed.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by scrolling the mouse wheel.
     * @api
     */
    var MouseWheelZoom = /** @class */ (function (_super) {
        __extends$J(MouseWheelZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function MouseWheelZoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            _this = _super.call(this, 
            /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
            /**
             * @private
             * @type {number}
             */
            _this.totalDelta_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.lastDelta_ = 0;
            /**
             * @private
             * @type {number}
             */
            _this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            /**
             * @private
             * @type {number}
             */
            _this.timeout_ = options.timeout !== undefined ? options.timeout : 80;
            /**
             * @private
             * @type {boolean}
             */
            _this.useAnchor_ =
                options.useAnchor !== undefined ? options.useAnchor : true;
            /**
             * @private
             * @type {boolean}
             */
            _this.constrainResolution_ =
                options.constrainResolution !== undefined
                    ? options.constrainResolution
                    : false;
            var condition = options.condition ? options.condition : always;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            _this.condition_ = options.onFocusOnly
                ? all(focusWithTabindex, condition)
                : condition;
            /**
             * @private
             * @type {?import("../coordinate.js").Coordinate}
             */
            _this.lastAnchor_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.startTime_ = undefined;
            /**
             * @private
             * @type {?}
             */
            _this.timeoutId_;
            /**
             * @private
             * @type {Mode|undefined}
             */
            _this.mode_ = undefined;
            /**
             * Trackpad events separated by this delay will be considered separate
             * interactions.
             * @type {number}
             */
            _this.trackpadEventGap_ = 400;
            /**
             * @type {?}
             */
            _this.trackpadTimeoutId_;
            /**
             * The number of delta values per zoom level
             * @private
             * @type {number}
             */
            _this.deltaPerZoom_ = 300;
            return _this;
        }
        /**
         * @private
         */
        MouseWheelZoom.prototype.endInteraction_ = function () {
            this.trackpadTimeoutId_ = undefined;
            var view = this.getMap().getView();
            view.endInteraction(undefined, this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0, this.lastAnchor_);
        };
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
         * zooms the map.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        MouseWheelZoom.prototype.handleEvent = function (mapBrowserEvent) {
            if (!this.condition_(mapBrowserEvent)) {
                return true;
            }
            var type = mapBrowserEvent.type;
            if (type !== EventType.WHEEL) {
                return true;
            }
            mapBrowserEvent.preventDefault();
            var map = mapBrowserEvent.map;
            var wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);
            if (this.useAnchor_) {
                this.lastAnchor_ = mapBrowserEvent.coordinate;
            }
            // Delta normalisation inspired by
            // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
            var delta;
            if (mapBrowserEvent.type == EventType.WHEEL) {
                delta = wheelEvent.deltaY;
                if (FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
                    delta /= DEVICE_PIXEL_RATIO;
                }
                if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
                    delta *= 40;
                }
            }
            if (delta === 0) {
                return false;
            }
            else {
                this.lastDelta_ = delta;
            }
            var now = Date.now();
            if (this.startTime_ === undefined) {
                this.startTime_ = now;
            }
            if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
                this.mode_ = Math.abs(delta) < 4 ? Mode.TRACKPAD : Mode.WHEEL;
            }
            var view = map.getView();
            if (this.mode_ === Mode.TRACKPAD &&
                !(view.getConstrainResolution() || this.constrainResolution_)) {
                if (this.trackpadTimeoutId_) {
                    clearTimeout(this.trackpadTimeoutId_);
                }
                else {
                    if (view.getAnimating()) {
                        view.cancelAnimations();
                    }
                    view.beginInteraction();
                }
                this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);
                view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);
                this.startTime_ = now;
                return false;
            }
            this.totalDelta_ += delta;
            var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);
            clearTimeout(this.timeoutId_);
            this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);
            return false;
        };
        /**
         * @private
         * @param {import("../PluggableMap.js").default} map Map.
         */
        MouseWheelZoom.prototype.handleWheelZoom_ = function (map) {
            var view = map.getView();
            if (view.getAnimating()) {
                view.cancelAnimations();
            }
            var delta = -clamp(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;
            if (view.getConstrainResolution() || this.constrainResolution_) {
                // view has a zoom constraint, zoom by 1
                delta = delta ? (delta > 0 ? 1 : -1) : 0;
            }
            zoomByDelta(view, delta, this.lastAnchor_, this.duration_);
            this.mode_ = undefined;
            this.totalDelta_ = 0;
            this.lastAnchor_ = null;
            this.startTime_ = undefined;
            this.timeoutId_ = undefined;
        };
        /**
         * Enable or disable using the mouse's location as an anchor when zooming
         * @param {boolean} useAnchor true to zoom to the mouse's location, false
         * to zoom to the center of the map
         * @api
         */
        MouseWheelZoom.prototype.setMouseAnchor = function (useAnchor) {
            this.useAnchor_ = useAnchor;
            if (!useAnchor) {
                this.lastAnchor_ = null;
            }
        };
        return MouseWheelZoom;
    }(Interaction));

    var __extends$K = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] The duration of the animation in
     * milliseconds.
     * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
     */
    /**
     * @classdesc
     * Allows the user to rotate the map by twisting with two fingers
     * on a touch screen.
     * @api
     */
    var PinchRotate = /** @class */ (function (_super) {
        __extends$K(PinchRotate, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function PinchRotate(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = FALSE;
            }
            _this = _super.call(this, pointerOptions) || this;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            _this.anchor_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.lastAngle_ = undefined;
            /**
             * @private
             * @type {boolean}
             */
            _this.rotating_ = false;
            /**
             * @private
             * @type {number}
             */
            _this.rotationDelta_ = 0.0;
            /**
             * @private
             * @type {number}
             */
            _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 250;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
            var rotationDelta = 0.0;
            var touch0 = this.targetPointers[0];
            var touch1 = this.targetPointers[1];
            // angle between touches
            var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
            if (this.lastAngle_ !== undefined) {
                var delta = angle - this.lastAngle_;
                this.rotationDelta_ += delta;
                if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {
                    this.rotating_ = true;
                }
                rotationDelta = delta;
            }
            this.lastAngle_ = angle;
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (view.getConstraints().rotation === disable) {
                return;
            }
            // rotate anchor point.
            // FIXME: should be the intersection point between the lines:
            //     touch0,touch1 and previousTouch0,previousTouch1
            var viewportPosition = map.getViewport().getBoundingClientRect();
            var centroid$1 = centroid(this.targetPointers);
            centroid$1[0] -= viewportPosition.left;
            centroid$1[1] -= viewportPosition.top;
            this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
            // rotate
            if (this.rotating_) {
                map.render();
                view.adjustRotationInternal(rotationDelta, this.anchor_);
            }
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length < 2) {
                var map = mapBrowserEvent.map;
                var view = map.getView();
                view.endInteraction(this.duration_);
                return false;
            }
            else {
                return true;
            }
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length >= 2) {
                var map = mapBrowserEvent.map;
                this.anchor_ = null;
                this.lastAngle_ = undefined;
                this.rotating_ = false;
                this.rotationDelta_ = 0.0;
                if (!this.handlingDownUpSequence) {
                    map.getView().beginInteraction();
                }
                return true;
            }
            else {
                return false;
            }
        };
        return PinchRotate;
    }(PointerInteraction));

    var __extends$L = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {number} [duration=400] Animation duration in milliseconds.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by pinching with two fingers
     * on a touch screen.
     * @api
     */
    var PinchZoom = /** @class */ (function (_super) {
        __extends$L(PinchZoom, _super);
        /**
         * @param {Options=} opt_options Options.
         */
        function PinchZoom(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = FALSE;
            }
            _this = _super.call(this, pointerOptions) || this;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            _this.anchor_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.duration_ = options.duration !== undefined ? options.duration : 400;
            /**
             * @private
             * @type {number|undefined}
             */
            _this.lastDistance_ = undefined;
            /**
             * @private
             * @type {number}
             */
            _this.lastScaleDelta_ = 1;
            return _this;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        PinchZoom.prototype.handleDragEvent = function (mapBrowserEvent) {
            var scaleDelta = 1.0;
            var touch0 = this.targetPointers[0];
            var touch1 = this.targetPointers[1];
            var dx = touch0.clientX - touch1.clientX;
            var dy = touch0.clientY - touch1.clientY;
            // distance between touches
            var distance = Math.sqrt(dx * dx + dy * dy);
            if (this.lastDistance_ !== undefined) {
                scaleDelta = this.lastDistance_ / distance;
            }
            this.lastDistance_ = distance;
            var map = mapBrowserEvent.map;
            var view = map.getView();
            if (scaleDelta != 1.0) {
                this.lastScaleDelta_ = scaleDelta;
            }
            // scale anchor point.
            var viewportPosition = map.getViewport().getBoundingClientRect();
            var centroid$1 = centroid(this.targetPointers);
            centroid$1[0] -= viewportPosition.left;
            centroid$1[1] -= viewportPosition.top;
            this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
            // scale, bypass the resolution constraint
            map.render();
            view.adjustResolutionInternal(scaleDelta, this.anchor_);
        };
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchZoom.prototype.handleUpEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length < 2) {
                var map = mapBrowserEvent.map;
                var view = map.getView();
                var direction = this.lastScaleDelta_ > 1 ? 1 : -1;
                view.endInteraction(this.duration_, direction);
                return false;
            }
            else {
                return true;
            }
        };
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        PinchZoom.prototype.handleDownEvent = function (mapBrowserEvent) {
            if (this.targetPointers.length >= 2) {
                var map = mapBrowserEvent.map;
                this.anchor_ = null;
                this.lastDistance_ = undefined;
                this.lastScaleDelta_ = 1;
                if (!this.handlingDownUpSequence) {
                    map.getView().beginInteraction();
                }
                return true;
            }
            else {
                return false;
            }
        };
        return PinchZoom;
    }(PointerInteraction));

    /**
     * @module ol/interaction
     */
    /**
     * @typedef {Object} DefaultsOptions
     * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
     * desired.
     * @property {boolean} [onFocusOnly=false] Interact only when the map has the
     * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
     * useful when page scroll is desired for maps that do not have the browser's
     * focus.
     * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
     * desired.
     * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
     * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
     * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
     * @property {boolean} [dragPan=true] Whether drag pan is desired.
     * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
     * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
     * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
     * @property {number} [zoomDuration] Duration of the zoom animation in
     * milliseconds.
     */
    /**
     * Set of interactions included in maps by default. Specific interactions can be
     * excluded by setting the appropriate option to false in the constructor
     * options, but the order of the interactions is fixed.  If you want to specify
     * a different order for interactions, you will need to create your own
     * {@link module:ol/interaction/Interaction} instances and insert
     * them into a {@link module:ol/Collection} in the order you want
     * before creating your {@link module:ol/Map~Map} instance. Changing the order can
     * be of interest if the event propagation needs to be stopped at a point.
     * The default set of interactions, in sequence, is:
     * * {@link module:ol/interaction/DragRotate~DragRotate}
     * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
     * * {@link module:ol/interaction/DragPan~DragPan}
     * * {@link module:ol/interaction/PinchRotate~PinchRotate}
     * * {@link module:ol/interaction/PinchZoom~PinchZoom}
     * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
     * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
     * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
     * * {@link module:ol/interaction/DragZoom~DragZoom}
     *
     * @param {DefaultsOptions=} opt_options Defaults options.
     * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
     * A collection of interactions to be used with the {@link module:ol/Map~Map}
     * constructor's `interactions` option.
     * @api
     */
    function defaults$1(opt_options) {
        var options = opt_options ? opt_options : {};
        var interactions = new Collection();
        var kinetic = new Kinetic(-0.005, 0.05, 100);
        var altShiftDragRotate = options.altShiftDragRotate !== undefined
            ? options.altShiftDragRotate
            : true;
        if (altShiftDragRotate) {
            interactions.push(new DragRotate());
        }
        var doubleClickZoom = options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;
        if (doubleClickZoom) {
            interactions.push(new DoubleClickZoom({
                delta: options.zoomDelta,
                duration: options.zoomDuration,
            }));
        }
        var dragPan = options.dragPan !== undefined ? options.dragPan : true;
        if (dragPan) {
            interactions.push(new DragPan({
                onFocusOnly: options.onFocusOnly,
                kinetic: kinetic,
            }));
        }
        var pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate : true;
        if (pinchRotate) {
            interactions.push(new PinchRotate());
        }
        var pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
        if (pinchZoom) {
            interactions.push(new PinchZoom({
                duration: options.zoomDuration,
            }));
        }
        var keyboard = options.keyboard !== undefined ? options.keyboard : true;
        if (keyboard) {
            interactions.push(new KeyboardPan());
            interactions.push(new KeyboardZoom({
                delta: options.zoomDelta,
                duration: options.zoomDuration,
            }));
        }
        var mouseWheelZoom = options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;
        if (mouseWheelZoom) {
            interactions.push(new MouseWheelZoom({
                onFocusOnly: options.onFocusOnly,
                duration: options.zoomDuration,
            }));
        }
        var shiftDragZoom = options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;
        if (shiftDragZoom) {
            interactions.push(new DragZoom({
                duration: options.zoomDuration,
            }));
        }
        return interactions;
    }

    var __extends$M = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * The map is the core component of OpenLayers. For a map to render, a view,
     * one or more layers, and a target container are needed:
     *
     *     import Map from 'ol/Map';
     *     import View from 'ol/View';
     *     import TileLayer from 'ol/layer/Tile';
     *     import OSM from 'ol/source/OSM';
     *
     *     var map = new Map({
     *       view: new View({
     *         center: [0, 0],
     *         zoom: 1
     *       }),
     *       layers: [
     *         new TileLayer({
     *           source: new OSM()
     *         })
     *       ],
     *       target: 'map'
     *     });
     *
     * The above snippet creates a map using a {@link module:ol/layer/Tile} to
     * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
     * element with the id `map`.
     *
     * The constructor places a viewport container (with CSS class name
     * `ol-viewport`) in the target element (see `getViewport()`), and then two
     * further elements within the viewport: one with CSS class name
     * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
     * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
     * option of {@link module:ol/Overlay~Overlay} for the difference). The map
     * itself is placed in a further element within the viewport.
     *
     * Layers are stored as a {@link module:ol/Collection~Collection} in
     * layerGroups. A top-level group is provided by the library. This is what is
     * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
     * options are added to this group, and `addLayer` and `removeLayer` change the
     * layer collection in the group. `getLayers` is a convenience function for
     * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
     * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
     * options or added with `addLayer` can be groups, which can contain further
     * groups, and so on.
     *
     * @api
     */
    var Map$1 = /** @class */ (function (_super) {
        __extends$M(Map, _super);
        /**
         * @param {import("./PluggableMap.js").MapOptions} options Map options.
         */
        function Map(options) {
            var _this = this;
            options = assign({}, options);
            if (!options.controls) {
                options.controls = defaults();
            }
            if (!options.interactions) {
                options.interactions = defaults$1({
                    onFocusOnly: true,
                });
            }
            _this = _super.call(this, options) || this;
            return _this;
        }
        Map.prototype.createRenderer = function () {
            return new CompositeMapRenderer(this);
        };
        return Map;
    }(PluggableMap));

    /**
     * @module ol/structs/LRUCache
     */
    /**
     * @typedef {Object} Entry
     * @property {string} key_
     * @property {Object} newer
     * @property {Object} older
     * @property {*} value_
     */
    /**
     * @classdesc
     * Implements a Least-Recently-Used cache where the keys do not conflict with
     * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
     * items from the cache is the responsibility of the user.
     *
     * @fires import("../events/Event.js").default
     * @template T
     */
    var LRUCache = /** @class */ (function () {
        /**
         * @param {number=} opt_highWaterMark High water mark.
         */
        function LRUCache(opt_highWaterMark) {
            /**
             * Desired max cache size after expireCache(). If set to 0, no cache entries
             * will be pruned at all.
             * @type {number}
             */
            this.highWaterMark =
                opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;
            /**
             * @private
             * @type {number}
             */
            this.count_ = 0;
            /**
             * @private
             * @type {!Object<string, Entry>}
             */
            this.entries_ = {};
            /**
             * @private
             * @type {?Entry}
             */
            this.oldest_ = null;
            /**
             * @private
             * @type {?Entry}
             */
            this.newest_ = null;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        LRUCache.prototype.canExpireCache = function () {
            return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
        };
        /**
         * FIXME empty description for jsdoc
         */
        LRUCache.prototype.clear = function () {
            this.count_ = 0;
            this.entries_ = {};
            this.oldest_ = null;
            this.newest_ = null;
        };
        /**
         * @param {string} key Key.
         * @return {boolean} Contains key.
         */
        LRUCache.prototype.containsKey = function (key) {
            return this.entries_.hasOwnProperty(key);
        };
        /**
         * @param {function(T, string, LRUCache<T>): ?} f The function
         *     to call for every entry from the oldest to the newer. This function takes
         *     3 arguments (the entry value, the entry key and the LRUCache object).
         *     The return value is ignored.
         */
        LRUCache.prototype.forEach = function (f) {
            var entry = this.oldest_;
            while (entry) {
                f(entry.value_, entry.key_, this);
                entry = entry.newer;
            }
        };
        /**
         * @param {string} key Key.
         * @param {*=} opt_options Options (reserverd for subclasses).
         * @return {T} Value.
         */
        LRUCache.prototype.get = function (key, opt_options) {
            var entry = this.entries_[key];
            assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
            if (entry === this.newest_) {
                return entry.value_;
            }
            else if (entry === this.oldest_) {
                this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
                this.oldest_.older = null;
            }
            else {
                entry.newer.older = entry.older;
                entry.older.newer = entry.newer;
            }
            entry.newer = null;
            entry.older = this.newest_;
            this.newest_.newer = entry;
            this.newest_ = entry;
            return entry.value_;
        };
        /**
         * Remove an entry from the cache.
         * @param {string} key The entry key.
         * @return {T} The removed entry.
         */
        LRUCache.prototype.remove = function (key) {
            var entry = this.entries_[key];
            assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
            if (entry === this.newest_) {
                this.newest_ = /** @type {Entry} */ (entry.older);
                if (this.newest_) {
                    this.newest_.newer = null;
                }
            }
            else if (entry === this.oldest_) {
                this.oldest_ = /** @type {Entry} */ (entry.newer);
                if (this.oldest_) {
                    this.oldest_.older = null;
                }
            }
            else {
                entry.newer.older = entry.older;
                entry.older.newer = entry.newer;
            }
            delete this.entries_[key];
            --this.count_;
            return entry.value_;
        };
        /**
         * @return {number} Count.
         */
        LRUCache.prototype.getCount = function () {
            return this.count_;
        };
        /**
         * @return {Array<string>} Keys.
         */
        LRUCache.prototype.getKeys = function () {
            var keys = new Array(this.count_);
            var i = 0;
            var entry;
            for (entry = this.newest_; entry; entry = entry.older) {
                keys[i++] = entry.key_;
            }
            return keys;
        };
        /**
         * @return {Array<T>} Values.
         */
        LRUCache.prototype.getValues = function () {
            var values = new Array(this.count_);
            var i = 0;
            var entry;
            for (entry = this.newest_; entry; entry = entry.older) {
                values[i++] = entry.value_;
            }
            return values;
        };
        /**
         * @return {T} Last value.
         */
        LRUCache.prototype.peekLast = function () {
            return this.oldest_.value_;
        };
        /**
         * @return {string} Last key.
         */
        LRUCache.prototype.peekLastKey = function () {
            return this.oldest_.key_;
        };
        /**
         * Get the key of the newest item in the cache.  Throws if the cache is empty.
         * @return {string} The newest key.
         */
        LRUCache.prototype.peekFirstKey = function () {
            return this.newest_.key_;
        };
        /**
         * @return {T} value Value.
         */
        LRUCache.prototype.pop = function () {
            var entry = this.oldest_;
            delete this.entries_[entry.key_];
            if (entry.newer) {
                entry.newer.older = null;
            }
            this.oldest_ = /** @type {Entry} */ (entry.newer);
            if (!this.oldest_) {
                this.newest_ = null;
            }
            --this.count_;
            return entry.value_;
        };
        /**
         * @param {string} key Key.
         * @param {T} value Value.
         */
        LRUCache.prototype.replace = function (key, value) {
            this.get(key); // update `newest_`
            this.entries_[key].value_ = value;
        };
        /**
         * @param {string} key Key.
         * @param {T} value Value.
         */
        LRUCache.prototype.set = function (key, value) {
            assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
            var entry = {
                key_: key,
                newer: null,
                older: this.newest_,
                value_: value,
            };
            if (!this.newest_) {
                this.oldest_ = entry;
            }
            else {
                this.newest_.newer = entry;
            }
            this.newest_ = entry;
            this.entries_[key] = entry;
            ++this.count_;
        };
        /**
         * Set a maximum number of entries for the cache.
         * @param {number} size Cache size.
         * @api
         */
        LRUCache.prototype.setSize = function (size) {
            this.highWaterMark = size;
        };
        return LRUCache;
    }());

    /**
     * @module ol/tilecoord
     */
    /**
     * An array of three numbers representing the location of a tile in a tile
     * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
     * @typedef {Array<number>} TileCoord
     * @api
     */
    /**
     * @param {number} z Z.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {TileCoord=} opt_tileCoord Tile coordinate.
     * @return {TileCoord} Tile coordinate.
     */
    function createOrUpdate$1(z, x, y, opt_tileCoord) {
        if (opt_tileCoord !== undefined) {
            opt_tileCoord[0] = z;
            opt_tileCoord[1] = x;
            opt_tileCoord[2] = y;
            return opt_tileCoord;
        }
        else {
            return [z, x, y];
        }
    }
    /**
     * @param {number} z Z.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {string} Key.
     */
    function getKeyZXY(z, x, y) {
        return z + '/' + x + '/' + y;
    }
    /**
     * Get the key for a tile coord.
     * @param {TileCoord} tileCoord The tile coord.
     * @return {string} Key.
     */
    function getKey$1(tileCoord) {
        return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
    }
    /**
     * Get a tile coord given a key.
     * @param {string} key The tile coord key.
     * @return {TileCoord} The tile coord.
     */
    function fromKey(key) {
        return key.split('/').map(Number);
    }
    /**
     * @param {TileCoord} tileCoord Tile coord.
     * @return {number} Hash.
     */
    function hash(tileCoord) {
        return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
    }
    /**
     * @param {TileCoord} tileCoord Tile coordinate.
     * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {boolean} Tile coordinate is within extent and zoom level range.
     */
    function withinExtentAndZ(tileCoord, tileGrid) {
        var z = tileCoord[0];
        var x = tileCoord[1];
        var y = tileCoord[2];
        if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
            return false;
        }
        var extent = tileGrid.getExtent();
        var tileRange;
        if (!extent) {
            tileRange = tileGrid.getFullTileRange(z);
        }
        else {
            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
        }
        if (!tileRange) {
            return true;
        }
        else {
            return tileRange.containsXY(x, y);
        }
    }

    var __extends$N = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var TileCache = /** @class */ (function (_super) {
        __extends$N(TileCache, _super);
        function TileCache() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        TileCache.prototype.expireCache = function (usedTiles) {
            while (this.canExpireCache()) {
                var tile = this.peekLast();
                if (tile.getKey() in usedTiles) {
                    break;
                }
                else {
                    this.pop().release();
                }
            }
        };
        /**
         * Prune all tiles from the cache that don't have the same z as the newest tile.
         */
        TileCache.prototype.pruneExceptNewestZ = function () {
            if (this.getCount() === 0) {
                return;
            }
            var key = this.peekFirstKey();
            var tileCoord = fromKey(key);
            var z = tileCoord[0];
            this.forEach(function (tile) {
                if (tile.tileCoord[0] !== z) {
                    this.remove(getKey$1(tile.tileCoord));
                    tile.release();
                }
            }.bind(this));
        };
        return TileCache;
    }(LRUCache));

    /**
     * @module ol/TileRange
     */
    /**
     * A representation of a contiguous block of tiles.  A tile range is specified
     * by its min/max tile coordinates and is inclusive of coordinates.
     */
    var TileRange = /** @class */ (function () {
        /**
         * @param {number} minX Minimum X.
         * @param {number} maxX Maximum X.
         * @param {number} minY Minimum Y.
         * @param {number} maxY Maximum Y.
         */
        function TileRange(minX, maxX, minY, maxY) {
            /**
             * @type {number}
             */
            this.minX = minX;
            /**
             * @type {number}
             */
            this.maxX = maxX;
            /**
             * @type {number}
             */
            this.minY = minY;
            /**
             * @type {number}
             */
            this.maxY = maxY;
        }
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {boolean} Contains tile coordinate.
         */
        TileRange.prototype.contains = function (tileCoord) {
            return this.containsXY(tileCoord[1], tileCoord[2]);
        };
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Contains.
         */
        TileRange.prototype.containsTileRange = function (tileRange) {
            return (this.minX <= tileRange.minX &&
                tileRange.maxX <= this.maxX &&
                this.minY <= tileRange.minY &&
                tileRange.maxY <= this.maxY);
        };
        /**
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @return {boolean} Contains coordinate.
         */
        TileRange.prototype.containsXY = function (x, y) {
            return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
        };
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Equals.
         */
        TileRange.prototype.equals = function (tileRange) {
            return (this.minX == tileRange.minX &&
                this.minY == tileRange.minY &&
                this.maxX == tileRange.maxX &&
                this.maxY == tileRange.maxY);
        };
        /**
         * @param {TileRange} tileRange Tile range.
         */
        TileRange.prototype.extend = function (tileRange) {
            if (tileRange.minX < this.minX) {
                this.minX = tileRange.minX;
            }
            if (tileRange.maxX > this.maxX) {
                this.maxX = tileRange.maxX;
            }
            if (tileRange.minY < this.minY) {
                this.minY = tileRange.minY;
            }
            if (tileRange.maxY > this.maxY) {
                this.maxY = tileRange.maxY;
            }
        };
        /**
         * @return {number} Height.
         */
        TileRange.prototype.getHeight = function () {
            return this.maxY - this.minY + 1;
        };
        /**
         * @return {import("./size.js").Size} Size.
         */
        TileRange.prototype.getSize = function () {
            return [this.getWidth(), this.getHeight()];
        };
        /**
         * @return {number} Width.
         */
        TileRange.prototype.getWidth = function () {
            return this.maxX - this.minX + 1;
        };
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Intersects.
         */
        TileRange.prototype.intersects = function (tileRange) {
            return (this.minX <= tileRange.maxX &&
                this.maxX >= tileRange.minX &&
                this.minY <= tileRange.maxY &&
                this.maxY >= tileRange.minY);
        };
        return TileRange;
    }());
    /**
     * @param {number} minX Minimum X.
     * @param {number} maxX Maximum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxY Maximum Y.
     * @param {TileRange=} tileRange TileRange.
     * @return {TileRange} Tile range.
     */
    function createOrUpdate$2(minX, maxX, minY, maxY, tileRange) {
        if (tileRange !== undefined) {
            tileRange.minX = minX;
            tileRange.maxX = maxX;
            tileRange.minY = minY;
            tileRange.maxY = maxY;
            return tileRange;
        }
        else {
            return new TileRange(minX, maxX, minY, maxY);
        }
    }

    /**
     * @module ol/layer/TileProperty
     */
    /**
     * @enum {string}
     */
    var TileProperty = {
        PRELOAD: 'preload',
        USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',
    };

    var __extends$O = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
     * means no preloading.
     * @property {import("../source/Tile.js").default} [source] Source for this layer.
     * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
     * this layer in its layers collection, and the layer will be rendered on top. This is useful for
     * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
     * use {@link module:ol/Map#addLayer}.
     * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
     */
    /**
     * @classdesc
     * For layer sources that provide pre-rendered, tiled images in grids that are
     * organized by zoom levels for specific resolutions.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @extends {Layer<import("../source/Tile.js").default>}
     * @api
     */
    var BaseTileLayer = /** @class */ (function (_super) {
        __extends$O(BaseTileLayer, _super);
        /**
         * @param {Options=} opt_options Tile layer options.
         */
        function BaseTileLayer(opt_options) {
            var _this = this;
            var options = opt_options ? opt_options : {};
            var baseOptions = assign({}, options);
            delete baseOptions.preload;
            delete baseOptions.useInterimTilesOnError;
            _this = _super.call(this, baseOptions) || this;
            _this.setPreload(options.preload !== undefined ? options.preload : 0);
            _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined
                ? options.useInterimTilesOnError
                : true);
            return _this;
        }
        /**
         * Return the level as number to which we will preload tiles up to.
         * @return {number} The level to preload tiles up to.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.getPreload = function () {
            return /** @type {number} */ (this.get(TileProperty.PRELOAD));
        };
        /**
         * Set the level as number to which we will preload tiles up to.
         * @param {number} preload The level to preload tiles up to.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.setPreload = function (preload) {
            this.set(TileProperty.PRELOAD, preload);
        };
        /**
         * Whether we use interim tiles on error.
         * @return {boolean} Use interim tiles on error.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.getUseInterimTilesOnError = function () {
            return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
        };
        /**
         * Set whether we use interim tiles on error.
         * @param {boolean} useInterimTilesOnError Use interim tiles on error.
         * @observable
         * @api
         */
        BaseTileLayer.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {
            this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
        };
        return BaseTileLayer;
    }(Layer));

    var __extends$P = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * Canvas renderer for tile layers.
     * @api
     */
    var CanvasTileLayerRenderer = /** @class */ (function (_super) {
        __extends$P(CanvasTileLayerRenderer, _super);
        /**
         * @param {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} tileLayer Tile layer.
         */
        function CanvasTileLayerRenderer(tileLayer) {
            var _this = _super.call(this, tileLayer) || this;
            /**
             * Rendered extent has changed since the previous `renderFrame()` call
             * @type {boolean}
             */
            _this.extentChanged = true;
            /**
             * @private
             * @type {?import("../../extent.js").Extent}
             */
            _this.renderedExtent_ = null;
            /**
             * @protected
             * @type {number}
             */
            _this.renderedPixelRatio;
            /**
             * @protected
             * @type {import("../../proj/Projection.js").default}
             */
            _this.renderedProjection = null;
            /**
             * @protected
             * @type {number}
             */
            _this.renderedRevision;
            /**
             * @protected
             * @type {!Array<import("../../Tile.js").default>}
             */
            _this.renderedTiles = [];
            /**
             * @private
             * @type {boolean}
             */
            _this.newTiles_ = false;
            /**
             * @protected
             * @type {import("../../extent.js").Extent}
             */
            _this.tmpExtent = createEmpty();
            /**
             * @private
             * @type {import("../../TileRange.js").default}
             */
            _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);
            return _this;
        }
        /**
         * @protected
         * @param {import("../../Tile.js").default} tile Tile.
         * @return {boolean} Tile is drawable.
         */
        CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {
            var tileLayer = this.getLayer();
            var tileState = tile.getState();
            var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
            return (tileState == TileState.LOADED ||
                tileState == TileState.EMPTY ||
                (tileState == TileState.ERROR && !useInterimTilesOnError));
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {!import("../../Tile.js").default} Tile.
         */
        CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {
            var pixelRatio = frameState.pixelRatio;
            var projection = frameState.viewState.projection;
            var tileLayer = this.getLayer();
            var tileSource = tileLayer.getSource();
            var tile = tileSource.getTile(z, x, y, pixelRatio, projection);
            if (tile.getState() == TileState.ERROR) {
                if (!tileLayer.getUseInterimTilesOnError()) {
                    // When useInterimTilesOnError is false, we consider the error tile as loaded.
                    tile.setState(TileState.LOADED);
                }
                else if (tileLayer.getPreload() > 0) {
                    // Preloaded tiles for lower resolutions might have finished loading.
                    this.newTiles_ = true;
                }
            }
            if (!this.isDrawableTile(tile)) {
                tile = tile.getInterimTile();
            }
            return tile;
        };
        /**
         * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @param {number} zoom Zoom level.
         * @param {import("../../Tile.js").default} tile Tile.
         * @return {boolean|void} If `false`, the tile will not be considered loaded.
         */
        CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
            if (this.isDrawableTile(tile)) {
                return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);
            }
            return false;
        };
        /**
         * Determine whether render should be called.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {
            return !!this.getLayer().getSource();
        };
        /**
         * Render the layer.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {
            var layerState = frameState.layerStatesArray[frameState.layerIndex];
            var viewState = frameState.viewState;
            var projection = viewState.projection;
            var viewResolution = viewState.resolution;
            var viewCenter = viewState.center;
            var rotation = viewState.rotation;
            var pixelRatio = frameState.pixelRatio;
            var tileLayer = this.getLayer();
            var tileSource = tileLayer.getSource();
            var sourceRevision = tileSource.getRevision();
            var tileGrid = tileSource.getTileGridForProjection(projection);
            var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
            var tileResolution = tileGrid.getResolution(z);
            var extent = frameState.extent;
            var layerExtent = layerState.extent && fromUserExtent(layerState.extent);
            if (layerExtent) {
                extent = getIntersection(extent, fromUserExtent(layerState.extent));
            }
            var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
            // desired dimensions of the canvas in pixels
            var width = Math.round(frameState.size[0] * tilePixelRatio);
            var height = Math.round(frameState.size[1] * tilePixelRatio);
            if (rotation) {
                var size = Math.round(Math.sqrt(width * width + height * height));
                width = size;
                height = size;
            }
            var dx = (tileResolution * width) / 2 / tilePixelRatio;
            var dy = (tileResolution * height) / 2 / tilePixelRatio;
            var canvasExtent = [
                viewCenter[0] - dx,
                viewCenter[1] - dy,
                viewCenter[0] + dx,
                viewCenter[1] + dy,
            ];
            var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
            /**
             * @type {Object<number, Object<string, import("../../Tile.js").default>>}
             */
            var tilesToDrawByZ = {};
            tilesToDrawByZ[z] = {};
            var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
            var tmpExtent = this.tmpExtent;
            var tmpTileRange = this.tmpTileRange_;
            this.newTiles_ = false;
            for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
                for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
                    var tile = this.getTile(z, x, y, frameState);
                    if (this.isDrawableTile(tile)) {
                        var uid = getUid(this);
                        if (tile.getState() == TileState.LOADED) {
                            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                            var inTransition = tile.inTransition(uid);
                            if (!this.newTiles_ &&
                                (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                                this.newTiles_ = true;
                            }
                        }
                        if (tile.getAlpha(uid, frameState.time) === 1) {
                            // don't look for alt tiles if alpha is 1
                            continue;
                        }
                    }
                    var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
                    var covered = false;
                    if (childTileRange) {
                        covered = findLoadedTiles(z + 1, childTileRange);
                    }
                    if (!covered) {
                        tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
                    }
                }
            }
            var canvasScale = tileResolution / viewResolution;
            // set forward and inverse pixel transforms
            compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);
            var canvasTransform = createTransformString(this.pixelTransform);
            this.useContainer(target, canvasTransform, layerState.opacity);
            var context = this.context;
            var canvas = context.canvas;
            makeInverse(this.inversePixelTransform, this.pixelTransform);
            // set scale transform for calculating tile positions on the canvas
            compose(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
            if (canvas.width != width || canvas.height != height) {
                canvas.width = width;
                canvas.height = height;
            }
            else if (!this.containerReused) {
                context.clearRect(0, 0, width, height);
            }
            if (layerExtent) {
                this.clipUnrotated(context, frameState, layerExtent);
            }
            assign(context, tileSource.getContextOptions());
            this.preRender(context, frameState);
            this.renderedTiles.length = 0;
            /** @type {Array<number>} */
            var zs = Object.keys(tilesToDrawByZ).map(Number);
            zs.sort(numberSafeCompareFunction);
            var clips, clipZs, currentClip;
            if (layerState.opacity === 1 &&
                (!this.containerReused ||
                    tileSource.getOpaque(frameState.viewState.projection))) {
                zs = zs.reverse();
            }
            else {
                clips = [];
                clipZs = [];
            }
            for (var i = zs.length - 1; i >= 0; --i) {
                var currentZ = zs[i];
                var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
                var currentResolution = tileGrid.getResolution(currentZ);
                var currentScale = currentResolution / tileResolution;
                var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;
                var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;
                var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);
                var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
                var origin_1 = apply(this.tempTransform, [
                    (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /
                        tileResolution,
                    (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /
                        tileResolution,
                ]);
                var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
                var tilesToDraw = tilesToDrawByZ[currentZ];
                for (var tileCoordKey in tilesToDraw) {
                    var tile = /** @type {import("../../ImageTile.js").default} */ (tilesToDraw[tileCoordKey]);
                    var tileCoord = tile.tileCoord;
                    // Calculate integer positions and sizes so that tiles align
                    var floatX = origin_1[0] - (originTileCoord[1] - tileCoord[1]) * dx_1;
                    var nextX = Math.round(floatX + dx_1);
                    var floatY = origin_1[1] - (originTileCoord[2] - tileCoord[2]) * dy_1;
                    var nextY = Math.round(floatY + dy_1);
                    var x = Math.round(floatX);
                    var y = Math.round(floatY);
                    var w = nextX - x;
                    var h = nextY - y;
                    var transition = z === currentZ;
                    var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;
                    if (!inTransition) {
                        if (clips) {
                            // Clip mask for regions in this tile that already filled by a higher z tile
                            context.save();
                            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
                            for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {
                                if (z !== currentZ && currentZ < clipZs[i_1]) {
                                    var clip = clips[i_1];
                                    context.beginPath();
                                    // counter-clockwise (outer ring) for current tile
                                    context.moveTo(currentClip[0], currentClip[1]);
                                    context.lineTo(currentClip[2], currentClip[3]);
                                    context.lineTo(currentClip[4], currentClip[5]);
                                    context.lineTo(currentClip[6], currentClip[7]);
                                    // clockwise (inner ring) for higher z tile
                                    context.moveTo(clip[6], clip[7]);
                                    context.lineTo(clip[4], clip[5]);
                                    context.lineTo(clip[2], clip[3]);
                                    context.lineTo(clip[0], clip[1]);
                                    context.clip();
                                }
                            }
                            clips.push(currentClip);
                            clipZs.push(currentZ);
                        }
                        else {
                            context.clearRect(x, y, w, h);
                        }
                    }
                    this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);
                    if (clips && !inTransition) {
                        context.restore();
                    }
                    this.renderedTiles.push(tile);
                    this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
                }
            }
            this.renderedRevision = sourceRevision;
            this.renderedResolution = tileResolution;
            this.extentChanged =
                !this.renderedExtent_ || !equals$1(this.renderedExtent_, canvasExtent);
            this.renderedExtent_ = canvasExtent;
            this.renderedPixelRatio = pixelRatio;
            this.renderedProjection = projection;
            this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
            this.scheduleExpireCache(frameState, tileSource);
            this.postRender(context, frameState);
            if (layerState.extent) {
                context.restore();
            }
            if (canvasTransform !== canvas.style.transform) {
                canvas.style.transform = canvasTransform;
            }
            return this.container;
        };
        /**
         * @param {import("../../ImageTile.js").default} tile Tile.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} x Left of the tile.
         * @param {number} y Top of the tile.
         * @param {number} w Width of the tile.
         * @param {number} h Height of the tile.
         * @param {number} gutter Tile gutter.
         * @param {boolean} transition Apply an alpha transition.
         * @param {number} opacity Opacity.
         */
        CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition, opacity) {
            var image = this.getTileImage(tile);
            if (!image) {
                return;
            }
            var uid = getUid(this);
            var tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
            var alpha = opacity * tileAlpha;
            var alphaChanged = alpha !== this.context.globalAlpha;
            if (alphaChanged) {
                this.context.save();
                this.context.globalAlpha = alpha;
            }
            this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
            if (alphaChanged) {
                this.context.restore();
            }
            if (tileAlpha !== 1) {
                frameState.animate = true;
            }
            else if (transition) {
                tile.endTransition(uid);
            }
        };
        /**
         * @return {HTMLCanvasElement} Image
         */
        CanvasTileLayerRenderer.prototype.getImage = function () {
            var context = this.context;
            return context ? context.canvas : null;
        };
        /**
         * Get the image from a tile.
         * @param {import("../../ImageTile.js").default} tile Tile.
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {
            return tile.getImage();
        };
        /**
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {
            if (tileSource.canExpireCache()) {
                /**
                 * @param {import("../../source/Tile.js").default} tileSource Tile source.
                 * @param {import("../../PluggableMap.js").default} map Map.
                 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
                 */
                var postRenderFunction = function (tileSource, map, frameState) {
                    var tileSourceKey = getUid(tileSource);
                    if (tileSourceKey in frameState.usedTiles) {
                        tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);
                    }
                }.bind(null, tileSource);
                frameState.postRenderFunctions.push(
                /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction));
            }
        };
        /**
         * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import('../../Tile.js').default} tile Tile.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {
            // FIXME should we use tilesToDrawByZ instead?
            var tileSourceKey = getUid(tileSource);
            if (!(tileSourceKey in usedTiles)) {
                usedTiles[tileSourceKey] = {};
            }
            usedTiles[tileSourceKey][tile.getKey()] = true;
        };
        /**
         * Manage tile pyramid.
         * This function performs a number of functions related to the tiles at the
         * current zoom and lower zoom levels:
         * - registers idle tiles in frameState.wantedTiles so that they are not
         *   discarded by the tile queue
         * - enqueues missing tiles
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../proj/Projection.js").default} projection Projection.
         * @param {import("../../extent.js").Extent} extent Extent.
         * @param {number} currentZ Current Z.
         * @param {number} preload Load low resolution tiles up to 'preload' levels.
         * @param {function(import("../../Tile.js").default)=} opt_tileCallback Tile callback.
         * @protected
         */
        CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {
            var tileSourceKey = getUid(tileSource);
            if (!(tileSourceKey in frameState.wantedTiles)) {
                frameState.wantedTiles[tileSourceKey] = {};
            }
            var wantedTiles = frameState.wantedTiles[tileSourceKey];
            var tileQueue = frameState.tileQueue;
            var minZoom = tileGrid.getMinZoom();
            var tileCount = 0;
            var tile, tileRange, tileResolution, x, y, z;
            for (z = minZoom; z <= currentZ; ++z) {
                tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
                tileResolution = tileGrid.getResolution(z);
                for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
                    for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
                        if (currentZ - z <= preload) {
                            ++tileCount;
                            tile = tileSource.getTile(z, x, y, pixelRatio, projection);
                            if (tile.getState() == TileState.IDLE) {
                                wantedTiles[tile.getKey()] = true;
                                if (!tileQueue.isKeyQueued(tile.getKey())) {
                                    tileQueue.enqueue([
                                        tile,
                                        tileSourceKey,
                                        tileGrid.getTileCoordCenter(tile.tileCoord),
                                        tileResolution,
                                    ]);
                                }
                            }
                            if (opt_tileCallback !== undefined) {
                                opt_tileCallback(tile);
                            }
                        }
                        else {
                            tileSource.useTile(z, x, y, projection);
                        }
                    }
                }
            }
            tileSource.updateCacheSize(tileCount, projection);
        };
        return CanvasTileLayerRenderer;
    }(CanvasLayerRenderer));
    /**
     * @function
     * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
     */
    CanvasTileLayerRenderer.prototype.getLayer;

    var __extends$Q = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @classdesc
     * For layer sources that provide pre-rendered, tiled images in grids that are
     * organized by zoom levels for specific resolutions.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @api
     */
    var TileLayer = /** @class */ (function (_super) {
        __extends$Q(TileLayer, _super);
        /**
         * @param {import("./BaseTile.js").Options=} opt_options Tile layer options.
         */
        function TileLayer(opt_options) {
            return _super.call(this, opt_options) || this;
        }
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         * @protected
         */
        TileLayer.prototype.createRenderer = function () {
            return new CanvasTileLayerRenderer(this);
        };
        return TileLayer;
    }(BaseTileLayer));

    /**
     * @module ol/source/common
     */
    /**
     * Context options to disable image smoothing.
     * @type {Object}
     */
    var IMAGE_SMOOTHING_DISABLED = {
        imageSmoothingEnabled: false,
        msImageSmoothingEnabled: false,
    };

    /**
     * @module ol/reproj/common
     */
    /**
     * Default maximum allowed threshold  (in pixels) for reprojection
     * triangulation.
     * @type {number}
     */
    var ERROR_THRESHOLD = 0.5;

    /**
     * @module ol/reproj/Triangulation
     */
    /**
     * Single triangle; consists of 3 source points and 3 target points.
     * @typedef {Object} Triangle
     * @property {Array<import("../coordinate.js").Coordinate>} source
     * @property {Array<import("../coordinate.js").Coordinate>} target
     */
    /**
     * Maximum number of subdivision steps during raster reprojection triangulation.
     * Prevents high memory usage and large number of proj4 calls (for certain
     * transformations and areas). At most `2*(2^this)` triangles are created for
     * each triangulated extent (tile/image).
     * @type {number}
     */
    var MAX_SUBDIVISION = 10;
    /**
     * Maximum allowed size of triangle relative to world width. When transforming
     * corners of world extent between certain projections, the resulting
     * triangulation seems to have zero error and no subdivision is performed. If
     * the triangle width is more than this (relative to world width; 0-1),
     * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
     * @type {number}
     */
    var MAX_TRIANGLE_WIDTH = 0.25;
    /**
     * @classdesc
     * Class containing triangulation of the given target extent.
     * Used for determining source data and the reprojection itself.
     */
    var Triangulation = /** @class */ (function () {
        /**
         * @param {import("../proj/Projection.js").default} sourceProj Source projection.
         * @param {import("../proj/Projection.js").default} targetProj Target projection.
         * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
         * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
         * @param {number} errorThreshold Acceptable error (in source units).
         * @param {?number} opt_destinationResolution The (optional) resolution of the destination.
         */
        function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {
            /**
             * @type {import("../proj/Projection.js").default}
             * @private
             */
            this.sourceProj_ = sourceProj;
            /**
             * @type {import("../proj/Projection.js").default}
             * @private
             */
            this.targetProj_ = targetProj;
            /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
            var transformInvCache = {};
            var transformInv = getTransform(this.targetProj_, this.sourceProj_);
            /**
             * @param {import("../coordinate.js").Coordinate} c A coordinate.
             * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
             * @private
             */
            this.transformInv_ = function (c) {
                var key = c[0] + '/' + c[1];
                if (!transformInvCache[key]) {
                    transformInvCache[key] = transformInv(c);
                }
                return transformInvCache[key];
            };
            /**
             * @type {import("../extent.js").Extent}
             * @private
             */
            this.maxSourceExtent_ = maxSourceExtent;
            /**
             * @type {number}
             * @private
             */
            this.errorThresholdSquared_ = errorThreshold * errorThreshold;
            /**
             * @type {Array<Triangle>}
             * @private
             */
            this.triangles_ = [];
            /**
             * Indicates that the triangulation crosses edge of the source projection.
             * @type {boolean}
             * @private
             */
            this.wrapsXInSource_ = false;
            /**
             * @type {boolean}
             * @private
             */
            this.canWrapXInSource_ =
                this.sourceProj_.canWrapX() &&
                    !!maxSourceExtent &&
                    !!this.sourceProj_.getExtent() &&
                    getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());
            /**
             * @type {?number}
             * @private
             */
            this.sourceWorldWidth_ = this.sourceProj_.getExtent()
                ? getWidth(this.sourceProj_.getExtent())
                : null;
            /**
             * @type {?number}
             * @private
             */
            this.targetWorldWidth_ = this.targetProj_.getExtent()
                ? getWidth(this.targetProj_.getExtent())
                : null;
            var destinationTopLeft = getTopLeft(targetExtent);
            var destinationTopRight = getTopRight(targetExtent);
            var destinationBottomRight = getBottomRight(targetExtent);
            var destinationBottomLeft = getBottomLeft(targetExtent);
            var sourceTopLeft = this.transformInv_(destinationTopLeft);
            var sourceTopRight = this.transformInv_(destinationTopRight);
            var sourceBottomRight = this.transformInv_(destinationBottomRight);
            var sourceBottomLeft = this.transformInv_(destinationBottomLeft);
            /*
             * The maxSubdivision controls how many splittings of the target area can
             * be done. The idea here is to do a linear mapping of the target areas
             * but the actual overal reprojection (can be) extremely non-linear. The
             * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
             * tile size. However this function is also called to remap canvas rendered
             * layers which can be much larger. This calculation increases the maxSubdivision
             * value by the right factor so that each 256x256 pixel area has
             * MAX_SUBDIVISION divisions.
             */
            var maxSubdivision = MAX_SUBDIVISION +
                (opt_destinationResolution
                    ? Math.max(0, Math.ceil(log2(getArea(targetExtent) /
                        (opt_destinationResolution *
                            opt_destinationResolution *
                            256 *
                            256))))
                    : 0);
            this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);
            if (this.wrapsXInSource_) {
                var leftBound_1 = Infinity;
                this.triangles_.forEach(function (triangle, i, arr) {
                    leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
                });
                // Shift triangles to be as close to `leftBound` as possible
                // (if the distance is more than `worldWidth / 2` it can be closer.
                this.triangles_.forEach(function (triangle) {
                    if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) -
                        leftBound_1 >
                        this.sourceWorldWidth_ / 2) {
                        var newTriangle = [
                            [triangle.source[0][0], triangle.source[0][1]],
                            [triangle.source[1][0], triangle.source[1][1]],
                            [triangle.source[2][0], triangle.source[2][1]],
                        ];
                        if (newTriangle[0][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {
                            newTriangle[0][0] -= this.sourceWorldWidth_;
                        }
                        if (newTriangle[1][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {
                            newTriangle[1][0] -= this.sourceWorldWidth_;
                        }
                        if (newTriangle[2][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {
                            newTriangle[2][0] -= this.sourceWorldWidth_;
                        }
                        // Rarely (if the extent contains both the dateline and prime meridian)
                        // the shift can in turn break some triangles.
                        // Detect this here and don't shift in such cases.
                        var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                        var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                        if (maxX - minX < this.sourceWorldWidth_ / 2) {
                            triangle.source = newTriangle;
                        }
                    }
                }.bind(this));
            }
            transformInvCache = {};
        }
        /**
         * Adds triangle to the triangulation.
         * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
         * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
         * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
         * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
         * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
         * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
         * @private
         */
        Triangulation.prototype.addTriangle_ = function (a, b, c, aSrc, bSrc, cSrc) {
            this.triangles_.push({
                source: [aSrc, bSrc, cSrc],
                target: [a, b, c],
            });
        };
        /**
         * Adds quad (points in clock-wise order) to the triangulation
         * (and reprojects the vertices) if valid.
         * Performs quad subdivision if needed to increase precision.
         *
         * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
         * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
         * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
         * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
         * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
         * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
         * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
         * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
         * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
         * @private
         */
        Triangulation.prototype.addQuad_ = function (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
            var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
            var sourceCoverageX = this.sourceWorldWidth_
                ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_
                : null;
            var sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);
            // when the quad is wrapped in the source projection
            // it covers most of the projection extent, but not fully
            var wrapsX = this.sourceProj_.canWrapX() &&
                sourceCoverageX > 0.5 &&
                sourceCoverageX < 1;
            var needsSubdivision = false;
            if (maxSubdivision > 0) {
                if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
                    var targetQuadExtent = boundingExtent([a, b, c, d]);
                    var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;
                    needsSubdivision =
                        targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
                }
                if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
                    needsSubdivision =
                        sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
                }
            }
            if (!needsSubdivision && this.maxSourceExtent_) {
                if (isFinite(sourceQuadExtent[0]) &&
                    isFinite(sourceQuadExtent[1]) &&
                    isFinite(sourceQuadExtent[2]) &&
                    isFinite(sourceQuadExtent[3])) {
                    if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {
                        // whole quad outside source projection extent -> ignore
                        return;
                    }
                }
            }
            var isNotFinite = 0;
            if (!needsSubdivision) {
                if (!isFinite(aSrc[0]) ||
                    !isFinite(aSrc[1]) ||
                    !isFinite(bSrc[0]) ||
                    !isFinite(bSrc[1]) ||
                    !isFinite(cSrc[0]) ||
                    !isFinite(cSrc[1]) ||
                    !isFinite(dSrc[0]) ||
                    !isFinite(dSrc[1])) {
                    if (maxSubdivision > 0) {
                        needsSubdivision = true;
                    }
                    else {
                        // It might be the case that only 1 of the points is infinite. In this case
                        // we can draw a single triangle with the other three points
                        isNotFinite =
                            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +
                                (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +
                                (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +
                                (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);
                        if (isNotFinite != 1 &&
                            isNotFinite != 2 &&
                            isNotFinite != 4 &&
                            isNotFinite != 8) {
                            return;
                        }
                    }
                }
            }
            if (maxSubdivision > 0) {
                if (!needsSubdivision) {
                    var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
                    var centerSrc = this.transformInv_(center);
                    var dx = void 0;
                    if (wrapsX) {
                        var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) +
                            modulo(cSrc[0], sourceWorldWidth)) /
                            2;
                        dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);
                    }
                    else {
                        dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
                    }
                    var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
                    var centerSrcErrorSquared = dx * dx + dy * dy;
                    needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
                }
                if (needsSubdivision) {
                    if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
                        // split horizontally (top & bottom)
                        var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
                        var bcSrc = this.transformInv_(bc);
                        var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
                        var daSrc = this.transformInv_(da);
                        this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
                        this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
                    }
                    else {
                        // split vertically (left & right)
                        var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
                        var abSrc = this.transformInv_(ab);
                        var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
                        var cdSrc = this.transformInv_(cd);
                        this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
                        this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
                    }
                    return;
                }
            }
            if (wrapsX) {
                if (!this.canWrapXInSource_) {
                    return;
                }
                this.wrapsXInSource_ = true;
            }
            // Exactly zero or one of *Src is not finite
            // The triangles must have the diagonal line as the first side
            // This is to allow easy code in reproj.s to make it straight for broken
            // browsers that can't handle diagonal clipping
            if ((isNotFinite & 0xb) == 0) {
                this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
            }
            if ((isNotFinite & 0xe) == 0) {
                this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);
            }
            if (isNotFinite) {
                // Try the other two triangles
                if ((isNotFinite & 0xd) == 0) {
                    this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);
                }
                if ((isNotFinite & 0x7) == 0) {
                    this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);
                }
            }
        };
        /**
         * Calculates extent of the 'source' coordinates from all the triangles.
         *
         * @return {import("../extent.js").Extent} Calculated extent.
         */
        Triangulation.prototype.calculateSourceExtent = function () {
            var extent = createEmpty();
            this.triangles_.forEach(function (triangle, i, arr) {
                var src = triangle.source;
                extendCoordinate(extent, src[0]);
                extendCoordinate(extent, src[1]);
                extendCoordinate(extent, src[2]);
            });
            return extent;
        };
        /**
         * @return {Array<Triangle>} Array of the calculated triangles.
         */
        Triangulation.prototype.getTriangles = function () {
            return this.triangles_;
        };
        return Triangulation;
    }());

    /**
     * @module ol/reproj
     */
    var brokenDiagonalRendering_;
    /**
     * This draws a small triangle into a canvas by setting the triangle as the clip region
     * and then drawing a (too large) rectangle
     *
     * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle
     * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.
     * @param {number} v1 The y-coordinate of the second point.
     * @param {number} u2 The x-coordinate of the third point.
     * @param {number} v2 The y-coordinate of the third point.
     */
    function drawTestTriangle(ctx, u1, v1, u2, v2) {
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(u1, v1);
        ctx.lineTo(u2, v2);
        ctx.closePath();
        ctx.save();
        ctx.clip();
        ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));
        ctx.restore();
    }
    /**
     * Given the data from getImageData, see if the right values appear at the provided offset.
     * Returns true if either the color or transparency is off
     *
     * @param {Uint8ClampedArray} data The data returned from getImageData
     * @param {number} offset The pixel offset from the start of data.
     * @return {boolean} true if the diagonal rendering is broken
     */
    function verifyBrokenDiagonalRendering(data, offset) {
        // the values ought to be close to the rgba(210, 0, 0, 0.75)
        return (Math.abs(data[offset * 4] - 210) > 2 ||
            Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2);
    }
    /**
     * Determines if the current browser configuration can render triangular clip regions correctly.
     * This value is cached so the function is only expensive the first time called.
     * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976
     * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the
     * result. I suppose that it is conceivably possible that a browser might flip modes while the app is
     * running, but lets hope not.
     *
     * @return {boolean} true if the Diagonal Rendering is broken.
     */
    function isBrokenDiagonalRendering() {
        if (brokenDiagonalRendering_ === undefined) {
            var ctx = document.createElement('canvas').getContext('2d');
            ctx.globalCompositeOperation = 'lighter';
            ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';
            drawTestTriangle(ctx, 4, 5, 4, 0);
            drawTestTriangle(ctx, 4, 5, 0, 5);
            var data = ctx.getImageData(0, 0, 3, 3).data;
            brokenDiagonalRendering_ =
                verifyBrokenDiagonalRendering(data, 0) ||
                    verifyBrokenDiagonalRendering(data, 4) ||
                    verifyBrokenDiagonalRendering(data, 8);
        }
        return brokenDiagonalRendering_;
    }
    /**
     * Calculates ideal resolution to use from the source in order to achieve
     * pixel mapping as close as possible to 1:1 during reprojection.
     * The resolution is calculated regardless of what resolutions
     * are actually available in the dataset (TileGrid, Image, ...).
     *
     * @param {import("./proj/Projection.js").default} sourceProj Source projection.
     * @param {import("./proj/Projection.js").default} targetProj Target projection.
     * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
     * @param {number} targetResolution Target resolution.
     * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
     */
    function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {
        var sourceCenter = transform(targetCenter, targetProj, sourceProj);
        // calculate the ideal resolution of the source data
        var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);
        var targetMetersPerUnit = targetProj.getMetersPerUnit();
        if (targetMetersPerUnit !== undefined) {
            sourceResolution *= targetMetersPerUnit;
        }
        var sourceMetersPerUnit = sourceProj.getMetersPerUnit();
        if (sourceMetersPerUnit !== undefined) {
            sourceResolution /= sourceMetersPerUnit;
        }
        // Based on the projection properties, the point resolution at the specified
        // coordinates may be slightly different. We need to reverse-compensate this
        // in order to achieve optimal results.
        var sourceExtent = sourceProj.getExtent();
        if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
            var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /
                sourceResolution;
            if (isFinite(compensationFactor) && compensationFactor > 0) {
                sourceResolution /= compensationFactor;
            }
        }
        return sourceResolution;
    }
    /**
     * Calculates ideal resolution to use from the source in order to achieve
     * pixel mapping as close as possible to 1:1 during reprojection.
     * The resolution is calculated regardless of what resolutions
     * are actually available in the dataset (TileGrid, Image, ...).
     *
     * @param {import("./proj/Projection.js").default} sourceProj Source projection.
     * @param {import("./proj/Projection.js").default} targetProj Target projection.
     * @param {import("./extent.js").Extent} targetExtent Target extent
     * @param {number} targetResolution Target resolution.
     * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
     */
    function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {
        var targetCenter = getCenter(targetExtent);
        var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
        if (!isFinite(sourceResolution) || sourceResolution <= 0) {
            forEachCorner(targetExtent, function (corner) {
                sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);
                return isFinite(sourceResolution) && sourceResolution > 0;
            });
        }
        return sourceResolution;
    }
    /**
     * Renders the source data into new canvas based on the triangulation.
     *
     * @param {number} width Width of the canvas.
     * @param {number} height Height of the canvas.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} sourceResolution Source resolution.
     * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
     * @param {number} targetResolution Target resolution.
     * @param {import("./extent.js").Extent} targetExtent Target extent.
     * @param {import("./reproj/Triangulation.js").default} triangulation
     * Calculated triangulation.
     * @param {Array<{extent: import("./extent.js").Extent,
     *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
     * Array of sources.
     * @param {number} gutter Gutter of the sources.
     * @param {boolean=} opt_renderEdges Render reprojection edges.
     * @param {object=} opt_contextOptions Properties to set on the canvas context.
     * @return {HTMLCanvasElement} Canvas with reprojected data.
     */
    function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_contextOptions) {
        var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));
        assign(context, opt_contextOptions);
        if (sources.length === 0) {
            return context.canvas;
        }
        context.scale(pixelRatio, pixelRatio);
        function pixelRound(value) {
            return Math.round(value * pixelRatio) / pixelRatio;
        }
        context.globalCompositeOperation = 'lighter';
        var sourceDataExtent = createEmpty();
        sources.forEach(function (src, i, arr) {
            extend$1(sourceDataExtent, src.extent);
        });
        var canvasWidthInUnits = getWidth(sourceDataExtent);
        var canvasHeightInUnits = getHeight(sourceDataExtent);
        var stitchContext = createCanvasContext2D(Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution), Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution));
        assign(stitchContext, opt_contextOptions);
        var stitchScale = pixelRatio / sourceResolution;
        sources.forEach(function (src, i, arr) {
            var xPos = src.extent[0] - sourceDataExtent[0];
            var yPos = -(src.extent[3] - sourceDataExtent[3]);
            var srcWidth = getWidth(src.extent);
            var srcHeight = getHeight(src.extent);
            // This test should never fail -- but it does. Need to find a fix the upstream condition
            if (src.image.width > 0 && src.image.height > 0) {
                stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);
            }
        });
        var targetTopLeft = getTopLeft(targetExtent);
        triangulation.getTriangles().forEach(function (triangle, i, arr) {
            /* Calculate affine transform (src -> dst)
             * Resulting matrix can be used to transform coordinate
             * from `sourceProjection` to destination pixels.
             *
             * To optimize number of context calls and increase numerical stability,
             * we also do the following operations:
             * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
             * here before solving the linear system so [ui, vi] are pixel coordinates.
             *
             * Src points: xi, yi
             * Dst points: ui, vi
             * Affine coefficients: aij
             *
             * | x0 y0 1  0  0 0 |   |a00|   |u0|
             * | x1 y1 1  0  0 0 |   |a01|   |u1|
             * | x2 y2 1  0  0 0 | x |a02| = |u2|
             * |  0  0 0 x0 y0 1 |   |a10|   |v0|
             * |  0  0 0 x1 y1 1 |   |a11|   |v1|
             * |  0  0 0 x2 y2 1 |   |a12|   |v2|
             */
            var source = triangle.source;
            var target = triangle.target;
            var x0 = source[0][0], y0 = source[0][1];
            var x1 = source[1][0], y1 = source[1][1];
            var x2 = source[2][0], y2 = source[2][1];
            // Make sure that everything is on pixel boundaries
            var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);
            var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);
            var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);
            var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);
            var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);
            var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);
            // Shift all the source points to improve numerical stability
            // of all the subsequent calculations. The [x0, y0] is used here.
            // This is also used to simplify the linear system.
            var sourceNumericalShiftX = x0;
            var sourceNumericalShiftY = y0;
            x0 = 0;
            y0 = 0;
            x1 -= sourceNumericalShiftX;
            y1 -= sourceNumericalShiftY;
            x2 -= sourceNumericalShiftX;
            y2 -= sourceNumericalShiftY;
            var augmentedMatrix = [
                [x1, y1, 0, 0, u1 - u0],
                [x2, y2, 0, 0, u2 - u0],
                [0, 0, x1, y1, v1 - v0],
                [0, 0, x2, y2, v2 - v0],
            ];
            var affineCoefs = solveLinearSystem(augmentedMatrix);
            if (!affineCoefs) {
                return;
            }
            context.save();
            context.beginPath();
            if (isBrokenDiagonalRendering() ||
                opt_contextOptions === IMAGE_SMOOTHING_DISABLED) {
                // Make sure that all lines are horizontal or vertical
                context.moveTo(u1, v1);
                // This is the diagonal line. Do it in 4 steps
                var steps = 4;
                var ud = u0 - u1;
                var vd = v0 - v1;
                for (var step = 0; step < steps; step++) {
                    // Go horizontally
                    context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound((step * vd) / (steps - 1)));
                    // Go vertically
                    if (step != steps - 1) {
                        context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound(((step + 1) * vd) / (steps - 1)));
                    }
                }
                // We are almost at u0r, v0r
                context.lineTo(u2, v2);
            }
            else {
                context.moveTo(u1, v1);
                context.lineTo(u0, v0);
                context.lineTo(u2, v2);
            }
            context.clip();
            context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);
            context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);
            context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);
            context.drawImage(stitchContext.canvas, 0, 0);
            context.restore();
        });
        if (opt_renderEdges) {
            context.save();
            context.globalCompositeOperation = 'source-over';
            context.strokeStyle = 'black';
            context.lineWidth = 1;
            triangulation.getTriangles().forEach(function (triangle, i, arr) {
                var target = triangle.target;
                var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
                var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
                var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
                var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
                var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
                var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
                context.beginPath();
                context.moveTo(u1, v1);
                context.lineTo(u0, v0);
                context.lineTo(u2, v2);
                context.closePath();
                context.stroke();
            });
            context.restore();
        }
        return context.canvas;
    }

    var __extends$R = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
     */
    /**
     * @classdesc
     * Class encapsulating single reprojected tile.
     * See {@link module:ol/source/TileImage~TileImage}.
     *
     */
    var ReprojTile = /** @class */ (function (_super) {
        __extends$R(ReprojTile, _super);
        /**
         * @param {import("../proj/Projection.js").default} sourceProj Source projection.
         * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
         * @param {import("../proj/Projection.js").default} targetProj Target projection.
         * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
         * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
         * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
         * @param {number} pixelRatio Pixel ratio.
         * @param {number} gutter Gutter of the source tiles.
         * @param {FunctionType} getTileFunction
         *     Function returning source tiles (z, x, y, pixelRatio).
         * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).
         * @param {boolean=} opt_renderEdges Render reprojection edges.
         * @param {object=} opt_contextOptions Properties to set on the canvas context.
         */
        function ReprojTile(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges, opt_contextOptions) {
            var _this = _super.call(this, tileCoord, TileState.IDLE) || this;
            /**
             * @private
             * @type {boolean}
             */
            _this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;
            /**
             * @private
             * @type {object}
             */
            _this.contextOptions_ = opt_contextOptions;
            /**
             * @private
             * @type {number}
             */
            _this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {number}
             */
            _this.gutter_ = gutter;
            /**
             * @private
             * @type {HTMLCanvasElement}
             */
            _this.canvas_ = null;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            _this.sourceTileGrid_ = sourceTileGrid;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            _this.targetTileGrid_ = targetTileGrid;
            /**
             * @private
             * @type {import("../tilecoord.js").TileCoord}
             */
            _this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
            /**
             * @private
             * @type {!Array<import("../Tile.js").default>}
             */
            _this.sourceTiles_ = [];
            /**
             * @private
             * @type {?Array<import("../events.js").EventsKey>}
             */
            _this.sourcesListenerKeys_ = null;
            /**
             * @private
             * @type {number}
             */
            _this.sourceZ_ = 0;
            var targetExtent = targetTileGrid.getTileCoordExtent(_this.wrappedTileCoord_);
            var maxTargetExtent = _this.targetTileGrid_.getExtent();
            var maxSourceExtent = _this.sourceTileGrid_.getExtent();
            var limitedTargetExtent = maxTargetExtent
                ? getIntersection(targetExtent, maxTargetExtent)
                : targetExtent;
            if (getArea(limitedTargetExtent) === 0) {
                // Tile is completely outside range -> EMPTY
                // TODO: is it actually correct that the source even creates the tile ?
                _this.state = TileState.EMPTY;
                return _this;
            }
            var sourceProjExtent = sourceProj.getExtent();
            if (sourceProjExtent) {
                if (!maxSourceExtent) {
                    maxSourceExtent = sourceProjExtent;
                }
                else {
                    maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
                }
            }
            var targetResolution = targetTileGrid.getResolution(_this.wrappedTileCoord_[0]);
            var sourceResolution = calculateSourceExtentResolution(sourceProj, targetProj, limitedTargetExtent, targetResolution);
            if (!isFinite(sourceResolution) || sourceResolution <= 0) {
                // invalid sourceResolution -> EMPTY
                // probably edges of the projections when no extent is defined
                _this.state = TileState.EMPTY;
                return _this;
            }
            var errorThresholdInPixels = opt_errorThreshold !== undefined ? opt_errorThreshold : ERROR_THRESHOLD;
            /**
             * @private
             * @type {!import("./Triangulation.js").default}
             */
            _this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
            if (_this.triangulation_.getTriangles().length === 0) {
                // no valid triangles -> EMPTY
                _this.state = TileState.EMPTY;
                return _this;
            }
            _this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
            var sourceExtent = _this.triangulation_.calculateSourceExtent();
            if (maxSourceExtent) {
                if (sourceProj.canWrapX()) {
                    sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
                    sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
                }
                else {
                    sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
                }
            }
            if (!getArea(sourceExtent)) {
                _this.state = TileState.EMPTY;
            }
            else {
                var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, _this.sourceZ_);
                for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
                    for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
                        var tile = getTileFunction(_this.sourceZ_, srcX, srcY, pixelRatio);
                        if (tile) {
                            _this.sourceTiles_.push(tile);
                        }
                    }
                }
                if (_this.sourceTiles_.length === 0) {
                    _this.state = TileState.EMPTY;
                }
            }
            return _this;
        }
        /**
         * Get the HTML Canvas element for this tile.
         * @return {HTMLCanvasElement} Canvas.
         */
        ReprojTile.prototype.getImage = function () {
            return this.canvas_;
        };
        /**
         * @private
         */
        ReprojTile.prototype.reproject_ = function () {
            var sources = [];
            this.sourceTiles_.forEach(function (tile, i, arr) {
                if (tile && tile.getState() == TileState.LOADED) {
                    sources.push({
                        extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
                        image: tile.getImage(),
                    });
                }
            }.bind(this));
            this.sourceTiles_.length = 0;
            if (sources.length === 0) {
                this.state = TileState.ERROR;
            }
            else {
                var z = this.wrappedTileCoord_[0];
                var size = this.targetTileGrid_.getTileSize(z);
                var width = typeof size === 'number' ? size : size[0];
                var height = typeof size === 'number' ? size : size[1];
                var targetResolution = this.targetTileGrid_.getResolution(z);
                var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
                var targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
                this.canvas_ = render(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.contextOptions_);
                this.state = TileState.LOADED;
            }
            this.changed();
        };
        /**
         * Load not yet loaded URI.
         */
        ReprojTile.prototype.load = function () {
            if (this.state == TileState.IDLE) {
                this.state = TileState.LOADING;
                this.changed();
                var leftToLoad_1 = 0;
                this.sourcesListenerKeys_ = [];
                this.sourceTiles_.forEach(function (tile, i, arr) {
                    var state = tile.getState();
                    if (state == TileState.IDLE || state == TileState.LOADING) {
                        leftToLoad_1++;
                        var sourceListenKey_1 = listen(tile, EventType.CHANGE, function (e) {
                            var state = tile.getState();
                            if (state == TileState.LOADED ||
                                state == TileState.ERROR ||
                                state == TileState.EMPTY) {
                                unlistenByKey(sourceListenKey_1);
                                leftToLoad_1--;
                                if (leftToLoad_1 === 0) {
                                    this.unlistenSources_();
                                    this.reproject_();
                                }
                            }
                        }, this);
                        this.sourcesListenerKeys_.push(sourceListenKey_1);
                    }
                }.bind(this));
                this.sourceTiles_.forEach(function (tile, i, arr) {
                    var state = tile.getState();
                    if (state == TileState.IDLE) {
                        tile.load();
                    }
                });
                if (leftToLoad_1 === 0) {
                    setTimeout(this.reproject_.bind(this), 0);
                }
            }
        };
        /**
         * @private
         */
        ReprojTile.prototype.unlistenSources_ = function () {
            this.sourcesListenerKeys_.forEach(unlistenByKey);
            this.sourcesListenerKeys_ = null;
        };
        return ReprojTile;
    }(Tile));

    /**
     * @module ol/source/TileEventType
     */
    /**
     * @enum {string}
     */
    var TileEventType = {
        /**
         * Triggered when a tile starts loading.
         * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
         * @api
         */
        TILELOADSTART: 'tileloadstart',
        /**
         * Triggered when a tile finishes loading, either when its data is loaded,
         * or when loading was aborted because the tile is no longer needed.
         * @event module:ol/source/Tile.TileSourceEvent#tileloadend
         * @api
         */
        TILELOADEND: 'tileloadend',
        /**
         * Triggered if tile loading results in an error.
         * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
         * @api
         */
        TILELOADERROR: 'tileloaderror',
    };

    /**
     * @module ol/tilegrid/TileGrid
     */
    /**
     * @private
     * @type {import("../tilecoord.js").TileCoord}
     */
    var tmpTileCoord = [0, 0, 0];
    /**
     * @typedef {Object} Options
     * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
     * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
     * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
     * @property {number} [minZoom=0] Minimum zoom.
     * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
     * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
     * specified, `extent` or `origins` must be provided.
     * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
     * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
     * should match the length of the `resolutions` array, i.e. each resolution can have a different
     * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
     * `origin` must be provided.
     * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
     * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
     * array will have a length of `maxZoom + 1`.
     * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
     * of the grid for each zoom level. If specified the values
     * define each zoom level's extent together with the `origin` or `origins`.
     * A grid `extent` can be configured in addition, and will further limit the extent
     * for which tile requests are made by sources. If the bottom-left corner of
     * an extent is used as `origin` or `origins`, then the `y` value must be
     * negative because OpenLayers tile coordinates use the top left as the origin.
     * @property {number|import("../size.js").Size} [tileSize] Tile size.
     * Default is `[256, 256]`.
     * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
     * should match the length of the `resolutions` array, i.e. each resolution can have a different
     * tile size.
     */
    /**
     * @classdesc
     * Base class for setting the grid pattern for sources accessing tiled-image
     * servers.
     * @api
     */
    var TileGrid = /** @class */ (function () {
        /**
         * @param {Options} options Tile grid options.
         */
        function TileGrid(options) {
            /**
             * @protected
             * @type {number}
             */
            this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;
            /**
             * @private
             * @type {!Array<number>}
             */
            this.resolutions_ = options.resolutions;
            assert(isSorted(this.resolutions_, function (a, b) {
                return b - a;
            }, true), 17); // `resolutions` must be sorted in descending order
            // check if we've got a consistent zoom factor and origin
            var zoomFactor;
            if (!options.origins) {
                for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
                    if (!zoomFactor) {
                        zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
                    }
                    else {
                        if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
                            zoomFactor = undefined;
                            break;
                        }
                    }
                }
            }
            /**
             * @private
             * @type {number|undefined}
             */
            this.zoomFactor_ = zoomFactor;
            /**
             * @protected
             * @type {number}
             */
            this.maxZoom = this.resolutions_.length - 1;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            this.origin_ = options.origin !== undefined ? options.origin : null;
            /**
             * @private
             * @type {Array<import("../coordinate.js").Coordinate>}
             */
            this.origins_ = null;
            if (options.origins !== undefined) {
                this.origins_ = options.origins;
                assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
            }
            var extent = options.extent;
            if (extent !== undefined && !this.origin_ && !this.origins_) {
                this.origin_ = getTopLeft(extent);
            }
            assert((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18); // Either `origin` or `origins` must be configured, never both
            /**
             * @private
             * @type {Array<number|import("../size.js").Size>}
             */
            this.tileSizes_ = null;
            if (options.tileSizes !== undefined) {
                this.tileSizes_ = options.tileSizes;
                assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
            }
            /**
             * @private
             * @type {number|import("../size.js").Size}
             */
            this.tileSize_ =
                options.tileSize !== undefined
                    ? options.tileSize
                    : !this.tileSizes_
                        ? DEFAULT_TILE_SIZE
                        : null;
            assert((!this.tileSize_ && this.tileSizes_) ||
                (this.tileSize_ && !this.tileSizes_), 22); // Either `tileSize` or `tileSizes` must be configured, never both
            /**
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.extent_ = extent !== undefined ? extent : null;
            /**
             * @private
             * @type {Array<import("../TileRange.js").default>}
             */
            this.fullTileRanges_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.tmpSize_ = [0, 0];
            if (options.sizes !== undefined) {
                this.fullTileRanges_ = options.sizes.map(function (size, z) {
                    var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));
                    return tileRange;
                }, this);
            }
            else if (extent) {
                this.calculateTileRanges_(extent);
            }
        }
        /**
         * Call a function with each tile coordinate for a given extent and zoom level.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} zoom Integer zoom level.
         * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
         * @api
         */
        TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {
            var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
            for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
                for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
                    callback([zoom, i, j]);
                }
            }
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {boolean} Callback succeeded.
         */
        TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {
            var tileRange, x, y;
            var tileCoordExtent = null;
            var z = tileCoord[0] - 1;
            if (this.zoomFactor_ === 2) {
                x = tileCoord[1];
                y = tileCoord[2];
            }
            else {
                tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
            }
            while (z >= this.minZoom) {
                if (this.zoomFactor_ === 2) {
                    x = Math.floor(x / 2);
                    y = Math.floor(y / 2);
                    tileRange = createOrUpdate$2(x, x, y, y, opt_tileRange);
                }
                else {
                    tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
                }
                if (callback(z, tileRange)) {
                    return true;
                }
                --z;
            }
            return false;
        };
        /**
         * Get the extent for this tile grid, if it was configured.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        TileGrid.prototype.getExtent = function () {
            return this.extent_;
        };
        /**
         * Get the maximum zoom level for the grid.
         * @return {number} Max zoom.
         * @api
         */
        TileGrid.prototype.getMaxZoom = function () {
            return this.maxZoom;
        };
        /**
         * Get the minimum zoom level for the grid.
         * @return {number} Min zoom.
         * @api
         */
        TileGrid.prototype.getMinZoom = function () {
            return this.minZoom;
        };
        /**
         * Get the origin for the grid at the given zoom level.
         * @param {number} z Integer zoom level.
         * @return {import("../coordinate.js").Coordinate} Origin.
         * @api
         */
        TileGrid.prototype.getOrigin = function (z) {
            if (this.origin_) {
                return this.origin_;
            }
            else {
                return this.origins_[z];
            }
        };
        /**
         * Get the resolution for the given zoom level.
         * @param {number} z Integer zoom level.
         * @return {number} Resolution.
         * @api
         */
        TileGrid.prototype.getResolution = function (z) {
            return this.resolutions_[z];
        };
        /**
         * Get the list of resolutions for the tile grid.
         * @return {Array<number>} Resolutions.
         * @api
         */
        TileGrid.prototype.getResolutions = function () {
            return this.resolutions_;
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {import("../TileRange.js").default} Tile range.
         */
        TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {
            if (tileCoord[0] < this.maxZoom) {
                if (this.zoomFactor_ === 2) {
                    var minX = tileCoord[1] * 2;
                    var minY = tileCoord[2] * 2;
                    return createOrUpdate$2(minX, minX + 1, minY, minY + 1, opt_tileRange);
                }
                var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
                return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
            }
            return null;
        };
        /**
         * Get the extent for a tile range.
         * @param {number} z Integer zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {import("../extent.js").Extent} Extent.
         */
        TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {
            var origin = this.getOrigin(z);
            var resolution = this.getResolution(z);
            var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
            var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
            var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
            var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
            var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
            return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
        };
        /**
         * Get a tile range for the given extent and integer zoom level.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} z Integer zoom level.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
         * @return {import("../TileRange.js").default} Tile range.
         */
        TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {
            var tileCoord = tmpTileCoord;
            this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);
            var minX = tileCoord[1];
            var minY = tileCoord[2];
            this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);
            return createOrUpdate$2(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {import("../coordinate.js").Coordinate} Tile center.
         */
        TileGrid.prototype.getTileCoordCenter = function (tileCoord) {
            var origin = this.getOrigin(tileCoord[0]);
            var resolution = this.getResolution(tileCoord[0]);
            var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
            return [
                origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
                origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,
            ];
        };
        /**
         * Get the extent of a tile coordinate.
         *
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {
            var origin = this.getOrigin(tileCoord[0]);
            var resolution = this.getResolution(tileCoord[0]);
            var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
            var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
            var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
            var maxX = minX + tileSize[0] * resolution;
            var maxY = minY + tileSize[1] * resolution;
            return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
        };
        /**
         * Get the tile coordinate for the given map coordinate and resolution.  This
         * method considers that coordinates that intersect tile boundaries should be
         * assigned the higher tile coordinate.
         *
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} resolution Resolution.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @api
         */
        TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {
            return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
        };
        /**
         * Note that this method should not be called for resolutions that correspond
         * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
         * @param {number} x X.
         * @param {number} y Y.
         * @param {number} resolution Resolution (for a non-integer zoom level).
         * @param {boolean} reverseIntersectionPolicy Instead of letting edge
         *     intersections go to the higher tile coordinate, let edge intersections
         *     go to the lower tile coordinate.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @private
         */
        TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
            var z = this.getZForResolution(resolution);
            var scale = resolution / this.getResolution(z);
            var origin = this.getOrigin(z);
            var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
            var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
            var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
            var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
            var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
            var tileCoordX = (scale * xFromOrigin) / tileSize[0];
            var tileCoordY = (scale * yFromOrigin) / tileSize[1];
            if (reverseIntersectionPolicy) {
                tileCoordX = Math.ceil(tileCoordX) - 1;
                tileCoordY = Math.ceil(tileCoordY) - 1;
            }
            else {
                tileCoordX = Math.floor(tileCoordX);
                tileCoordY = Math.floor(tileCoordY);
            }
            return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
        };
        /**
         * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
         * they should have separate implementations.  This method is for integer zoom
         * levels.  The other method should only be called for resolutions corresponding
         * to non-integer zoom levels.
         * @param {number} x Map x coordinate.
         * @param {number} y Map y coordinate.
         * @param {number} z Integer zoom level.
         * @param {boolean} reverseIntersectionPolicy Instead of letting edge
         *     intersections go to the higher tile coordinate, let edge intersections
         *     go to the lower tile coordinate.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @private
         */
        TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
            var origin = this.getOrigin(z);
            var resolution = this.getResolution(z);
            var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
            var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
            var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
            var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
            var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
            var tileCoordX = xFromOrigin / tileSize[0];
            var tileCoordY = yFromOrigin / tileSize[1];
            if (reverseIntersectionPolicy) {
                tileCoordX = Math.ceil(tileCoordX) - 1;
                tileCoordY = Math.ceil(tileCoordY) - 1;
            }
            else {
                tileCoordX = Math.floor(tileCoordX);
                tileCoordY = Math.floor(tileCoordY);
            }
            return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
        };
        /**
         * Get a tile coordinate given a map coordinate and zoom level.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} z Zoom level.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @api
         */
        TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {
            return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {number} Tile resolution.
         */
        TileGrid.prototype.getTileCoordResolution = function (tileCoord) {
            return this.resolutions_[tileCoord[0]];
        };
        /**
         * Get the tile size for a zoom level. The type of the return value matches the
         * `tileSize` or `tileSizes` that the tile grid was configured with. To always
         * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
         * @param {number} z Z.
         * @return {number|import("../size.js").Size} Tile size.
         * @api
         */
        TileGrid.prototype.getTileSize = function (z) {
            if (this.tileSize_) {
                return this.tileSize_;
            }
            else {
                return this.tileSizes_[z];
            }
        };
        /**
         * @param {number} z Zoom level.
         * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
         */
        TileGrid.prototype.getFullTileRange = function (z) {
            if (!this.fullTileRanges_) {
                return null;
            }
            else {
                return this.fullTileRanges_[z];
            }
        };
        /**
         * @param {number} resolution Resolution.
         * @param {number=} opt_direction If 0, the nearest resolution will be used.
         *     If 1, the nearest lower resolution will be used. If -1, the nearest
         *     higher resolution will be used. Default is 0.
         * @return {number} Z.
         * @api
         */
        TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {
            var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
            return clamp(z, this.minZoom, this.maxZoom);
        };
        /**
         * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
         * @private
         */
        TileGrid.prototype.calculateTileRanges_ = function (extent) {
            var length = this.resolutions_.length;
            var fullTileRanges = new Array(length);
            for (var z = this.minZoom; z < length; ++z) {
                fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
            }
            this.fullTileRanges_ = fullTileRanges;
        };
        return TileGrid;
    }());

    /**
     * @module ol/tilegrid
     */
    /**
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {!TileGrid} Default tile grid for the
     * passed projection.
     */
    function getForProjection(projection) {
        var tileGrid = projection.getDefaultTileGrid();
        if (!tileGrid) {
            tileGrid = createForProjection(projection);
            projection.setDefaultTileGrid(tileGrid);
        }
        return tileGrid;
    }
    /**
     * @param {TileGrid} tileGrid Tile grid.
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
     */
    function wrapX$1(tileGrid, tileCoord, projection) {
        var z = tileCoord[0];
        var center = tileGrid.getTileCoordCenter(tileCoord);
        var projectionExtent = extentFromProjection(projection);
        if (!containsCoordinate(projectionExtent, center)) {
            var worldWidth = getWidth(projectionExtent);
            var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
            center[0] += worldWidth * worldsAway;
            return tileGrid.getTileCoordForCoordAndZ(center, z);
        }
        else {
            return tileCoord;
        }
    }
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {import("./extent/Corner.js").default=} opt_corner Extent corner (default is `'top-left'`).
     * @return {!TileGrid} TileGrid instance.
     */
    function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
        var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;
        var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
        return new TileGrid({
            extent: extent,
            origin: getCorner(extent, corner),
            resolutions: resolutions,
            tileSize: opt_tileSize,
        });
    }
    /**
     * @typedef {Object} XYZOptions
     * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
     * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution
     * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.
     * @property {number} [maxResolution] Resolution at level zero.
     * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
     * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
     * @property {number} [minZoom=0] Minimum zoom.
     * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
     */
    /**
     * Creates a tile grid with a standard XYZ tiling scheme.
     * @param {XYZOptions=} opt_options Tile grid options.
     * @return {!TileGrid} Tile grid instance.
     * @api
     */
    function createXYZ(opt_options) {
        var xyzOptions = opt_options || {};
        var extent = xyzOptions.extent || get$2('EPSG:3857').getExtent();
        var gridOptions = {
            extent: extent,
            minZoom: xyzOptions.minZoom,
            tileSize: xyzOptions.tileSize,
            resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution),
        };
        return new TileGrid(gridOptions);
    }
    /**
     * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {number=} opt_maxResolution Resolution at level zero.
     * @return {!Array<number>} Resolutions array.
     */
    function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {
        var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;
        var height = getHeight(extent);
        var width = getWidth(extent);
        var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);
        var maxResolution = opt_maxResolution > 0
            ? opt_maxResolution
            : Math.max(width / tileSize[0], height / tileSize[1]);
        var length = maxZoom + 1;
        var resolutions = new Array(length);
        for (var z = 0; z < length; ++z) {
            resolutions[z] = maxResolution / Math.pow(2, z);
        }
        return resolutions;
    }
    /**
     * @param {import("./proj.js").ProjectionLike} projection Projection.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {import("./extent/Corner.js").default=} opt_corner Extent corner (default is `'top-left'`).
     * @return {!TileGrid} TileGrid instance.
     */
    function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
        var extent = extentFromProjection(projection);
        return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
    }
    /**
     * Generate a tile grid extent from a projection.  If the projection has an
     * extent, it is used.  If not, a global extent is assumed.
     * @param {import("./proj.js").ProjectionLike} projection Projection.
     * @return {import("./extent.js").Extent} Extent.
     */
    function extentFromProjection(projection) {
        projection = get$2(projection);
        var extent = projection.getExtent();
        if (!extent) {
            var half = (180 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit();
            extent = createOrUpdate(-half, -half, half, half);
        }
        return extent;
    }

    var __extends$S = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize]
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {number} [tilePixelRatio]
     * @property {import("../proj.js").ProjectionLike} [projection]
     * @property {import("./State.js").default} [state]
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
     * @property {boolean} [wrapX=true]
     * @property {number} [transition]
     * @property {string} [key]
     * @property {number} [zDirection=0]
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for sources providing images divided into a tile grid.
     * @abstract
     * @api
     */
    var TileSource = /** @class */ (function (_super) {
        __extends$S(TileSource, _super);
        /**
         * @param {Options} options SourceTile source options.
         */
        function TileSource(options) {
            var _this = _super.call(this, {
                attributions: options.attributions,
                attributionsCollapsible: options.attributionsCollapsible,
                projection: options.projection,
                state: options.state,
                wrapX: options.wrapX,
            }) || this;
            /**
             * @private
             * @type {boolean}
             */
            _this.opaque_ = options.opaque !== undefined ? options.opaque : false;
            /**
             * @private
             * @type {number}
             */
            _this.tilePixelRatio_ =
                options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;
            /**
             * @protected
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;
            var tileSize = [256, 256];
            var tileGrid = options.tileGrid;
            if (tileGrid) {
                toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);
            }
            /**
             * @protected
             * @type {import("../TileCache.js").default}
             */
            _this.tileCache = new TileCache(options.cacheSize || 0);
            /**
             * @protected
             * @type {import("../size.js").Size}
             */
            _this.tmpSize = [0, 0];
            /**
             * @private
             * @type {string}
             */
            _this.key_ = options.key || '';
            /**
             * @protected
             * @type {import("../Tile.js").Options}
             */
            _this.tileOptions = { transition: options.transition };
            /**
             * zDirection hint, read by the renderer. Indicates which resolution should be used
             * by a renderer if the views resolution does not match any resolution of the tile source.
             * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
             * will be used. If -1, the nearest higher resolution will be used.
             * @type {number}
             */
            _this.zDirection = options.zDirection ? options.zDirection : 0;
            return _this;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        TileSource.prototype.canExpireCache = function () {
            return this.tileCache.canExpireCache();
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        TileSource.prototype.expireCache = function (projection, usedTiles) {
            var tileCache = this.getTileCacheForProjection(projection);
            if (tileCache) {
                tileCache.expireCache(usedTiles);
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {number} z Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
         *     loaded tile.  If the callback returns `false`, the tile will not be
         *     considered loaded.
         * @return {boolean} The tile range is fully covered with loaded tiles.
         */
        TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {
            var tileCache = this.getTileCacheForProjection(projection);
            if (!tileCache) {
                return false;
            }
            var covered = true;
            var tile, tileCoordKey, loaded;
            for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
                for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
                    tileCoordKey = getKeyZXY(z, x, y);
                    loaded = false;
                    if (tileCache.containsKey(tileCoordKey)) {
                        tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
                        loaded = tile.getState() === TileState.LOADED;
                        if (loaded) {
                            loaded = callback(tile) !== false;
                        }
                    }
                    if (!loaded) {
                        covered = false;
                    }
                }
            }
            return covered;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {number} Gutter.
         */
        TileSource.prototype.getGutterForProjection = function (projection) {
            return 0;
        };
        /**
         * Return the key to be used for all tiles in the source.
         * @return {string} The key for all tiles.
         * @protected
         */
        TileSource.prototype.getKey = function () {
            return this.key_;
        };
        /**
         * Set the value to be used as the key for all tiles in the source.
         * @param {string} key The key for tiles.
         * @protected
         */
        TileSource.prototype.setKey = function (key) {
            if (this.key_ !== key) {
                this.key_ = key;
                this.changed();
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {boolean} Opaque.
         */
        TileSource.prototype.getOpaque = function (projection) {
            return this.opaque_;
        };
        /**
         * @return {Array<number>} Resolutions.
         */
        TileSource.prototype.getResolutions = function () {
            return this.tileGrid.getResolutions();
        };
        /**
         * @abstract
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         */
        TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {
            return abstract();
        };
        /**
         * Return the tile grid of the tile source.
         * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
         * @api
         */
        TileSource.prototype.getTileGrid = function () {
            return this.tileGrid;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
         */
        TileSource.prototype.getTileGridForProjection = function (projection) {
            if (!this.tileGrid) {
                return getForProjection(projection);
            }
            else {
                return this.tileGrid;
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../TileCache.js").default} Tile cache.
         * @protected
         */
        TileSource.prototype.getTileCacheForProjection = function (projection) {
            var thisProj = this.getProjection();
            if (thisProj && !equivalent(thisProj, projection)) {
                return null;
            }
            else {
                return this.tileCache;
            }
        };
        /**
         * Get the tile pixel ratio for this source. Subclasses may override this
         * method, which is meant to return a supported pixel ratio that matches the
         * provided `pixelRatio` as close as possible.
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} Tile pixel ratio.
         */
        TileSource.prototype.getTilePixelRatio = function (pixelRatio) {
            return this.tilePixelRatio_;
        };
        /**
         * @param {number} z Z.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../size.js").Size} Tile size.
         */
        TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {
            var tileGrid = this.getTileGridForProjection(projection);
            var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
            var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
            if (tilePixelRatio == 1) {
                return tileSize;
            }
            else {
                return scale$2(tileSize, tilePixelRatio, this.tmpSize);
            }
        };
        /**
         * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
         * is outside the resolution and extent range of the tile grid, `null` will be
         * returned.
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../proj/Projection.js").default=} opt_projection Projection.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
         *     null if no tile URL should be created for the passed `tileCoord`.
         */
        TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {
            var projection = opt_projection !== undefined ? opt_projection : this.getProjection();
            var tileGrid = this.getTileGridForProjection(projection);
            if (this.getWrapX() && projection.isGlobal()) {
                tileCoord = wrapX$1(tileGrid, tileCoord, projection);
            }
            return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
        };
        /**
         * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
         * @api
         */
        TileSource.prototype.clear = function () {
            this.tileCache.clear();
        };
        TileSource.prototype.refresh = function () {
            this.clear();
            _super.prototype.refresh.call(this);
        };
        /**
         * Increases the cache size if needed
         * @param {number} tileCount Minimum number of tiles needed.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        TileSource.prototype.updateCacheSize = function (tileCount, projection) {
            var tileCache = this.getTileCacheForProjection(projection);
            if (tileCount > tileCache.highWaterMark) {
                tileCache.highWaterMark = tileCount;
            }
        };
        /**
         * Marks a tile coord as being used, without triggering a load.
         * @abstract
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        TileSource.prototype.useTile = function (z, x, y, projection) { };
        return TileSource;
    }(Source));
    /**
     * @classdesc
     * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
     * type.
     */
    var TileSourceEvent = /** @class */ (function (_super) {
        __extends$S(TileSourceEvent, _super);
        /**
         * @param {string} type Type.
         * @param {import("../Tile.js").default} tile The tile.
         */
        function TileSourceEvent(type, tile) {
            var _this = _super.call(this, type) || this;
            /**
             * The tile related to the event.
             * @type {import("../Tile.js").default}
             * @api
             */
            _this.tile = tile;
            return _this;
        }
        return TileSourceEvent;
    }(BaseEvent));

    /**
     * @module ol/tileurlfunction
     */
    /**
     * @param {string} template Template.
     * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTemplate(template, tileGrid) {
        var zRegEx = /\{z\}/g;
        var xRegEx = /\{x\}/g;
        var yRegEx = /\{y\}/g;
        var dashYRegEx = /\{-y\}/g;
        return (
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
                return undefined;
            }
            else {
                return template
                    .replace(zRegEx, tileCoord[0].toString())
                    .replace(xRegEx, tileCoord[1].toString())
                    .replace(yRegEx, tileCoord[2].toString())
                    .replace(dashYRegEx, function () {
                    var z = tileCoord[0];
                    var range = tileGrid.getFullTileRange(z);
                    assert(range, 55); // The {-y} placeholder requires a tile grid with extent
                    var y = range.getHeight() - tileCoord[2] - 1;
                    return y.toString();
                });
            }
        });
    }
    /**
     * @param {Array<string>} templates Templates.
     * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTemplates(templates, tileGrid) {
        var len = templates.length;
        var tileUrlFunctions = new Array(len);
        for (var i = 0; i < len; ++i) {
            tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
        }
        return createFromTileUrlFunctions(tileUrlFunctions);
    }
    /**
     * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTileUrlFunctions(tileUrlFunctions) {
        if (tileUrlFunctions.length === 1) {
            return tileUrlFunctions[0];
        }
        return (
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
                return undefined;
            }
            else {
                var h = hash(tileCoord);
                var index = modulo(h, tileUrlFunctions.length);
                return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
            }
        });
    }
    /**
     * @param {string} url URL.
     * @return {Array<string>} Array of urls.
     */
    function expandUrl(url) {
        var urls = [];
        var match = /\{([a-z])-([a-z])\}/.exec(url);
        if (match) {
            // char range
            var startCharCode = match[1].charCodeAt(0);
            var stopCharCode = match[2].charCodeAt(0);
            var charCode = void 0;
            for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
                urls.push(url.replace(match[0], String.fromCharCode(charCode)));
            }
            return urls;
        }
        match = /\{(\d+)-(\d+)\}/.exec(url);
        if (match) {
            // number range
            var stop_1 = parseInt(match[2], 10);
            for (var i = parseInt(match[1], 10); i <= stop_1; i++) {
                urls.push(url.replace(match[0], i.toString()));
            }
            return urls;
        }
        urls.push(url);
        return urls;
    }

    var __extends$T = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize]
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection]
     * @property {import("./State.js").default} [state]
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
     * @property {import("../Tile.js").LoadFunction} tileLoadFunction
     * @property {number} [tilePixelRatio]
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction]
     * @property {string} [url]
     * @property {Array<string>} [urls]
     * @property {boolean} [wrapX=true]
     * @property {number} [transition]
     * @property {string} [key]
     * @property {number} [zDirection=0]
     */
    /**
     * @classdesc
     * Base class for sources providing tiles divided into a tile grid over http.
     *
     * @fires import("./Tile.js").TileSourceEvent
     */
    var UrlTile = /** @class */ (function (_super) {
        __extends$T(UrlTile, _super);
        /**
         * @param {Options} options Image tile options.
         */
        function UrlTile(options) {
            var _this = _super.call(this, {
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                opaque: options.opaque,
                projection: options.projection,
                state: options.state,
                tileGrid: options.tileGrid,
                tilePixelRatio: options.tilePixelRatio,
                wrapX: options.wrapX,
                transition: options.transition,
                key: options.key,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            }) || this;
            /**
             * @private
             * @type {boolean}
             */
            _this.generateTileUrlFunction_ =
                _this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;
            /**
             * @protected
             * @type {import("../Tile.js").LoadFunction}
             */
            _this.tileLoadFunction = options.tileLoadFunction;
            if (options.tileUrlFunction) {
                _this.tileUrlFunction = options.tileUrlFunction.bind(_this);
            }
            /**
             * @protected
             * @type {!Array<string>|null}
             */
            _this.urls = null;
            if (options.urls) {
                _this.setUrls(options.urls);
            }
            else if (options.url) {
                _this.setUrl(options.url);
            }
            /**
             * @private
             * @type {!Object<string, boolean>}
             */
            _this.tileLoadingKeys_ = {};
            return _this;
        }
        /**
         * Return the tile load function of the source.
         * @return {import("../Tile.js").LoadFunction} TileLoadFunction
         * @api
         */
        UrlTile.prototype.getTileLoadFunction = function () {
            return this.tileLoadFunction;
        };
        /**
         * Return the tile URL function of the source.
         * @return {import("../Tile.js").UrlFunction} TileUrlFunction
         * @api
         */
        UrlTile.prototype.getTileUrlFunction = function () {
            return this.tileUrlFunction;
        };
        /**
         * Return the URLs used for this source.
         * When a tileUrlFunction is used instead of url or urls,
         * null will be returned.
         * @return {!Array<string>|null} URLs.
         * @api
         */
        UrlTile.prototype.getUrls = function () {
            return this.urls;
        };
        /**
         * Handle tile change events.
         * @param {import("../events/Event.js").default} event Event.
         * @protected
         */
        UrlTile.prototype.handleTileChange = function (event) {
            var tile = /** @type {import("../Tile.js").default} */ (event.target);
            var uid = getUid(tile);
            var tileState = tile.getState();
            var type;
            if (tileState == TileState.LOADING) {
                this.tileLoadingKeys_[uid] = true;
                type = TileEventType.TILELOADSTART;
            }
            else if (uid in this.tileLoadingKeys_) {
                delete this.tileLoadingKeys_[uid];
                type =
                    tileState == TileState.ERROR
                        ? TileEventType.TILELOADERROR
                        : tileState == TileState.LOADED
                            ? TileEventType.TILELOADEND
                            : undefined;
            }
            if (type != undefined) {
                this.dispatchEvent(new TileSourceEvent(type, tile));
            }
        };
        /**
         * Set the tile load function of the source.
         * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @api
         */
        UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {
            this.tileCache.clear();
            this.tileLoadFunction = tileLoadFunction;
            this.changed();
        };
        /**
         * Set the tile URL function of the source.
         * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
         * @param {string=} key Optional new tile key for the source.
         * @api
         */
        UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {
            this.tileUrlFunction = tileUrlFunction;
            this.tileCache.pruneExceptNewestZ();
            if (typeof key !== 'undefined') {
                this.setKey(key);
            }
            else {
                this.changed();
            }
        };
        /**
         * Set the URL to use for requests.
         * @param {string} url URL.
         * @api
         */
        UrlTile.prototype.setUrl = function (url) {
            var urls = expandUrl(url);
            this.urls = urls;
            this.setUrls(urls);
        };
        /**
         * Set the URLs to use for requests.
         * @param {Array<string>} urls URLs.
         * @api
         */
        UrlTile.prototype.setUrls = function (urls) {
            this.urls = urls;
            var key = urls.join('\n');
            if (this.generateTileUrlFunction_) {
                this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
            }
            else {
                this.setKey(key);
            }
        };
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        UrlTile.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {
            return undefined;
        };
        /**
         * Marks a tile coord as being used, without triggering a load.
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         */
        UrlTile.prototype.useTile = function (z, x, y) {
            var tileCoordKey = getKeyZXY(z, x, y);
            if (this.tileCache.containsKey(tileCoordKey)) {
                this.tileCache.get(tileCoordKey);
            }
        };
        return UrlTile;
    }(TileSource));

    var __extends$U = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {import("./State.js").default} [state] Source state.
     * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
     * Default is {@link module:ol/ImageTile~ImageTile}.
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
     * service advertizes 256px by 256px tiles but actually sends 512px
     * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
     * should be set to `2`.
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
     * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
     * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
     * used instead of defining each one separately in the `urls` option.
     * @property {Array<string>} [urls] An array of URL templates.
     * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
     * request out-of-bounds tiles from the server. When set to `false`, only one
     * world will be rendered. When set to `true`, tiles will be requested for one
     * world only, but they will be wrapped horizontally to render multiple worlds.
     * @property {number} [transition] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {string} [key] Optional tile key for proper cache fetching
     * @property {number} [zDirection=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Base class for sources providing images divided into a tile grid.
     *
     * @fires import("./Tile.js").TileSourceEvent
     * @api
     */
    var TileImage = /** @class */ (function (_super) {
        __extends$U(TileImage, _super);
        /**
         * @param {!Options} options Image tile options.
         */
        function TileImage(options) {
            var _this = _super.call(this, {
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                opaque: options.opaque,
                projection: options.projection,
                state: options.state,
                tileGrid: options.tileGrid,
                tileLoadFunction: options.tileLoadFunction
                    ? options.tileLoadFunction
                    : defaultTileLoadFunction,
                tilePixelRatio: options.tilePixelRatio,
                tileUrlFunction: options.tileUrlFunction,
                url: options.url,
                urls: options.urls,
                wrapX: options.wrapX,
                transition: options.transition,
                key: options.key,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            }) || this;
            /**
             * @protected
             * @type {?string}
             */
            _this.crossOrigin =
                options.crossOrigin !== undefined ? options.crossOrigin : null;
            /**
             * @protected
             * @type {typeof ImageTile}
             */
            _this.tileClass =
                options.tileClass !== undefined ? options.tileClass : ImageTile;
            /**
             * @protected
             * @type {!Object<string, TileCache>}
             */
            _this.tileCacheForProjection = {};
            /**
             * @protected
             * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
             */
            _this.tileGridForProjection = {};
            /**
             * @private
             * @type {number|undefined}
             */
            _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;
            /**
             * @private
             * @type {object|undefined}
             */
            _this.contextOptions_ =
                options.imageSmoothing === false ? IMAGE_SMOOTHING_DISABLED : undefined;
            /**
             * @private
             * @type {boolean}
             */
            _this.renderReprojectionEdges_ = false;
            return _this;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        TileImage.prototype.canExpireCache = function () {
            if (this.tileCache.canExpireCache()) {
                return true;
            }
            else {
                for (var key in this.tileCacheForProjection) {
                    if (this.tileCacheForProjection[key].canExpireCache()) {
                        return true;
                    }
                }
            }
            return false;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        TileImage.prototype.expireCache = function (projection, usedTiles) {
            var usedTileCache = this.getTileCacheForProjection(projection);
            this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
            for (var id in this.tileCacheForProjection) {
                var tileCache = this.tileCacheForProjection[id];
                tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
            }
        };
        /**
         * @return {Object|undefined} Context options.
         */
        TileImage.prototype.getContextOptions = function () {
            return this.contextOptions_;
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {number} Gutter.
         */
        TileImage.prototype.getGutterForProjection = function (projection) {
            if (
                this.getProjection() &&
                projection &&
                !equivalent(this.getProjection(), projection)) {
                return 0;
            }
            else {
                return this.getGutter();
            }
        };
        /**
         * @return {number} Gutter.
         */
        TileImage.prototype.getGutter = function () {
            return 0;
        };
        /**
         * Return the key to be used for all tiles in the source.
         * @return {string} The key for all tiles.
         * @protected
         */
        TileImage.prototype.getKey = function () {
            return (_super.prototype.getKey.call(this) +
                (this.contextOptions_ ? '\n' + JSON.stringify(this.contextOptions_) : ''));
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {boolean} Opaque.
         */
        TileImage.prototype.getOpaque = function (projection) {
            if (
                this.getProjection() &&
                projection &&
                !equivalent(this.getProjection(), projection)) {
                return false;
            }
            else {
                return _super.prototype.getOpaque.call(this, projection);
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
         */
        TileImage.prototype.getTileGridForProjection = function (projection) {
            var thisProj = this.getProjection();
            if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
                return this.tileGrid;
            }
            else {
                var projKey = getUid(projection);
                if (!(projKey in this.tileGridForProjection)) {
                    this.tileGridForProjection[projKey] = getForProjection(projection);
                }
                return this.tileGridForProjection[projKey];
            }
        };
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../TileCache.js").default} Tile cache.
         */
        TileImage.prototype.getTileCacheForProjection = function (projection) {
            var thisProj = this.getProjection();
            if (!thisProj || equivalent(thisProj, projection)) {
                return this.tileCache;
            }
            else {
                var projKey = getUid(projection);
                if (!(projKey in this.tileCacheForProjection)) {
                    this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);
                }
                return this.tileCacheForProjection[projKey];
            }
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {string} key The key set on the tile.
         * @return {!import("../Tile.js").default} Tile.
         * @private
         */
        TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {
            var tileCoord = [z, x, y];
            var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
            var tileUrl = urlTileCoord
                ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)
                : undefined;
            var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);
            tile.key = key;
            tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
            return tile;
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         */
        TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {
            var sourceProjection = this.getProjection();
            if (
                !sourceProjection ||
                !projection ||
                equivalent(sourceProjection, projection)) {
                return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
            }
            else {
                var cache = this.getTileCacheForProjection(projection);
                var tileCoord = [z, x, y];
                var tile = void 0;
                var tileCoordKey = getKey$1(tileCoord);
                if (cache.containsKey(tileCoordKey)) {
                    tile = cache.get(tileCoordKey);
                }
                var key = this.getKey();
                if (tile && tile.key == key) {
                    return tile;
                }
                else {
                    var sourceTileGrid = this.getTileGridForProjection(sourceProjection);
                    var targetTileGrid = this.getTileGridForProjection(projection);
                    var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
                    var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {
                        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
                    }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.contextOptions_);
                    newTile.key = key;
                    if (tile) {
                        newTile.interimTile = tile;
                        newTile.refreshInterimChain();
                        cache.replace(tileCoordKey, newTile);
                    }
                    else {
                        cache.set(tileCoordKey, newTile);
                    }
                    return newTile;
                }
            }
        };
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {!import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         * @protected
         */
        TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {
            var tile = null;
            var tileCoordKey = getKeyZXY(z, x, y);
            var key = this.getKey();
            if (!this.tileCache.containsKey(tileCoordKey)) {
                tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                this.tileCache.set(tileCoordKey, tile);
            }
            else {
                tile = this.tileCache.get(tileCoordKey);
                if (tile.key != key) {
                    // The source's params changed. If the tile has an interim tile and if we
                    // can use it then we use it. Otherwise we create a new tile.  In both
                    // cases we attempt to assign an interim tile to the new tile.
                    var interimTile = tile;
                    tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                    //make the new tile the head of the list,
                    if (interimTile.getState() == TileState.IDLE) {
                        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
                        tile.interimTile = interimTile.interimTile;
                    }
                    else {
                        tile.interimTile = interimTile;
                    }
                    tile.refreshInterimChain();
                    this.tileCache.replace(tileCoordKey, tile);
                }
            }
            return tile;
        };
        /**
         * Sets whether to render reprojection edges or not (usually for debugging).
         * @param {boolean} render Render the edges.
         * @api
         */
        TileImage.prototype.setRenderReprojectionEdges = function (render) {
            if (
                this.renderReprojectionEdges_ == render) {
                return;
            }
            this.renderReprojectionEdges_ = render;
            for (var id in this.tileCacheForProjection) {
                this.tileCacheForProjection[id].clear();
            }
            this.changed();
        };
        /**
         * Sets the tile grid to use when reprojecting the tiles to the given
         * projection instead of the default tile grid for the projection.
         *
         * This can be useful when the default tile grid cannot be created
         * (e.g. projection has no extent defined) or
         * for optimization reasons (custom tile size, resolutions, ...).
         *
         * @param {import("../proj.js").ProjectionLike} projection Projection.
         * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
         * @api
         */
        TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {
            {
                var proj = get$2(projection);
                if (proj) {
                    var projKey = getUid(proj);
                    if (!(projKey in this.tileGridForProjection)) {
                        this.tileGridForProjection[projKey] = tilegrid;
                    }
                }
            }
        };
        return TileImage;
    }(UrlTile));
    /**
     * @param {ImageTile} imageTile Image tile.
     * @param {string} src Source.
     */
    function defaultTileLoadFunction(imageTile, src) {
        /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;
    }

    /**
     * @module ol/source/XYZ
     */
    var __extends$V = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
     * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
     * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
     * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
     * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
     * should be set to `2`.
     * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
     * Not used if `tileGrid` is provided.
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
     * tile URL given a tile coordinate and the projection.
     * Required if `url` or `urls` are not provided.
     * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
     * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
     * may be used instead of defining each one separately in the `urls` option.
     * @property {Array<string>} [urls] An array of URL templates.
     * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
     * @property {number} [transition] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {number} [zDirection=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Layer source for tile data with URLs in a set XYZ format that are
     * defined in a URL template. By default, this follows the widely-used
     * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
     * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
     * using the `{-y}` placeholder in the URL template, so long as the
     * source does not have a custom tile grid. In this case,
     * {@link module:ol/source/TileImage} can be used with a `tileUrlFunction`
     * such as:
     *
     *  tileUrlFunction: function(coordinate) {
     *    return 'http://mapserver.com/' + coordinate[0] + '/' +
     *        coordinate[1] + '/' + coordinate[2] + '.png';
     *    }
     *
     * @api
     */
    var XYZ = /** @class */ (function (_super) {
        __extends$V(XYZ, _super);
        /**
         * @param {Options=} opt_options XYZ options.
         */
        function XYZ(opt_options) {
            var _this = this;
            var options = opt_options || {};
            var projection = options.projection !== undefined ? options.projection : 'EPSG:3857';
            var tileGrid = options.tileGrid !== undefined
                ? options.tileGrid
                : createXYZ({
                    extent: extentFromProjection(projection),
                    maxResolution: options.maxResolution,
                    maxZoom: options.maxZoom,
                    minZoom: options.minZoom,
                    tileSize: options.tileSize,
                });
            _this = _super.call(this, {
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                crossOrigin: options.crossOrigin,
                imageSmoothing: options.imageSmoothing,
                opaque: options.opaque,
                projection: projection,
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                tileGrid: tileGrid,
                tileLoadFunction: options.tileLoadFunction,
                tilePixelRatio: options.tilePixelRatio,
                tileUrlFunction: options.tileUrlFunction,
                url: options.url,
                urls: options.urls,
                wrapX: options.wrapX !== undefined ? options.wrapX : true,
                transition: options.transition,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            }) || this;
            return _this;
        }
        return XYZ;
    }(TileImage));

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    /* @license twgl.js 4.15.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
    Available via the MIT license.
    see: http://github.com/greggman/twgl.js for details */
    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /**
     *
     * Vec3 math math functions.
     *
     * Almost all functions take an optional `dst` argument. If it is not passed in the
     * functions will create a new Vec3. In other words you can do this
     *
     *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.
     *
     * or
     *
     *     var v = v3.create();
     *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v
     *
     * The first style is often easier but depending on where it's used it generates garbage where
     * as there is almost never allocation with the second style.
     *
     * It is always save to pass any vector as the destination. So for example
     *
     *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1
     *
     * @module twgl/v3
     */

    let VecType = Float32Array;

    /**
     * Creates a vec3; may be called with x, y, z to set initial values.
     * @param {number} [x] Initial x value.
     * @param {number} [y] Initial y value.
     * @param {number} [z] Initial z value.
     * @return {module:twgl/v3.Vec3} the created vector
     * @memberOf module:twgl/v3
     */
    function create$1(x, y, z) {
      const dst = new VecType(3);
      if (x) {
        dst[0] = x;
      }
      if (y) {
        dst[1] = y;
      }
      if (z) {
        dst[2] = z;
      }
      return dst;
    }

    /**
     * Adds two vectors; assumes a and b have the same dimension.
     * @param {module:twgl/v3.Vec3} a Operand vector.
     * @param {module:twgl/v3.Vec3} b Operand vector.
     * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
     * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.
     * @memberOf module:twgl/v3
     */
    function add$3(a, b, dst) {
      dst = dst || new VecType(3);

      dst[0] = a[0] + b[0];
      dst[1] = a[1] + b[1];
      dst[2] = a[2] + b[2];

      return dst;
    }

    /**
     * Multiplies a vector by another vector (component-wise); assumes a and
     * b have the same length.
     * @param {module:twgl/v3.Vec3} a Operand vector.
     * @param {module:twgl/v3.Vec3} b Operand vector.
     * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
     * @return {module:twgl/v3.Vec3} The vector of products of entries of a and
     *     b.
     * @memberOf module:twgl/v3
     */
    function multiply(a, b, dst) {
      dst = dst || new VecType(3);

      dst[0] = a[0] * b[0];
      dst[1] = a[1] * b[1];
      dst[2] = a[2] * b[2];

      return dst;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /**
     * 4x4 Matrix math math functions.
     *
     * Almost all functions take an optional `dst` argument. If it is not passed in the
     * functions will create a new matrix. In other words you can do this
     *
     *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix
     *
     * or
     *
     *     const mat = m4.create();
     *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.
     *
     * The first style is often easier but depending on where it's used it generates garbage where
     * as there is almost never allocation with the second style.
     *
     * It is always save to pass any matrix as the destination. So for example
     *
     *     const mat = m4.identity();
     *     const trans = m4.translation([1, 2, 3]);
     *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.
     *
     * @module twgl/m4
     */
    let MatType = Float32Array;

    /**
     * Creates an n-by-n identity matrix.
     *
     * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
     * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.
     * @memberOf module:twgl/m4
     */
    function identity(dst) {
      dst = dst || new MatType(16);

      dst[ 0] = 1;
      dst[ 1] = 0;
      dst[ 2] = 0;
      dst[ 3] = 0;
      dst[ 4] = 0;
      dst[ 5] = 1;
      dst[ 6] = 0;
      dst[ 7] = 0;
      dst[ 8] = 0;
      dst[ 9] = 0;
      dst[10] = 1;
      dst[11] = 0;
      dst[12] = 0;
      dst[13] = 0;
      dst[14] = 0;
      dst[15] = 1;

      return dst;
    }

    /**
     * Computes the inverse of a 4-by-4 matrix.
     * @param {module:twgl/m4.Mat4} m The matrix.
     * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
     * @return {module:twgl/m4.Mat4} The inverse of m.
     * @memberOf module:twgl/m4
     */
    function inverse(m, dst) {
      dst = dst || new MatType(16);

      const m00 = m[0 * 4 + 0];
      const m01 = m[0 * 4 + 1];
      const m02 = m[0 * 4 + 2];
      const m03 = m[0 * 4 + 3];
      const m10 = m[1 * 4 + 0];
      const m11 = m[1 * 4 + 1];
      const m12 = m[1 * 4 + 2];
      const m13 = m[1 * 4 + 3];
      const m20 = m[2 * 4 + 0];
      const m21 = m[2 * 4 + 1];
      const m22 = m[2 * 4 + 2];
      const m23 = m[2 * 4 + 3];
      const m30 = m[3 * 4 + 0];
      const m31 = m[3 * 4 + 1];
      const m32 = m[3 * 4 + 2];
      const m33 = m[3 * 4 + 3];
      const tmp_0  = m22 * m33;
      const tmp_1  = m32 * m23;
      const tmp_2  = m12 * m33;
      const tmp_3  = m32 * m13;
      const tmp_4  = m12 * m23;
      const tmp_5  = m22 * m13;
      const tmp_6  = m02 * m33;
      const tmp_7  = m32 * m03;
      const tmp_8  = m02 * m23;
      const tmp_9  = m22 * m03;
      const tmp_10 = m02 * m13;
      const tmp_11 = m12 * m03;
      const tmp_12 = m20 * m31;
      const tmp_13 = m30 * m21;
      const tmp_14 = m10 * m31;
      const tmp_15 = m30 * m11;
      const tmp_16 = m10 * m21;
      const tmp_17 = m20 * m11;
      const tmp_18 = m00 * m31;
      const tmp_19 = m30 * m01;
      const tmp_20 = m00 * m21;
      const tmp_21 = m20 * m01;
      const tmp_22 = m00 * m11;
      const tmp_23 = m10 * m01;

      const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
          (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
      const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
          (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
      const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
          (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
      const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
          (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);

      const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);

      dst[ 0] = d * t0;
      dst[ 1] = d * t1;
      dst[ 2] = d * t2;
      dst[ 3] = d * t3;
      dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -
              (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));
      dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -
              (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));
      dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -
              (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));
      dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -
              (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));
      dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -
              (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));
      dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -
              (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));
      dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -
              (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));
      dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -
              (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));
      dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -
              (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));
      dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -
              (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));
      dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -
              (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));
      dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -
              (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));

      return dst;
    }

    /**
     * Takes a 4-by-4 matrix and a vector with 3 entries,
     * interprets the vector as a point, transforms that point by the matrix, and
     * returns the result as a vector with 3 entries.
     * @param {module:twgl/m4.Mat4} m The matrix.
     * @param {module:twgl/v3.Vec3} v The point.
     * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.
     * @return {module:twgl/v3.Vec3} The transformed point.
     * @memberOf module:twgl/m4
     */
    function transformPoint(m, v, dst) {
      dst = dst || create$1();
      const v0 = v[0];
      const v1 = v[1];
      const v2 = v[2];
      const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];

      dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
      dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
      dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;

      return dst;
    }

    /**
     * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
     * direction, transforms that direction by the matrix, and returns the result;
     * assumes the transformation of 3-dimensional space represented by the matrix
     * is parallel-preserving, i.e. any combination of rotation, scaling and
     * translation, but not a perspective distortion. Returns a vector with 3
     * entries.
     * @param {module:twgl/m4.Mat4} m The matrix.
     * @param {module:twgl/v3.Vec3} v The direction.
     * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.
     * @return {module:twgl/v3.Vec3} The transformed direction.
     * @memberOf module:twgl/m4
     */
    function transformDirection(m, v, dst) {
      dst = dst || create$1();

      const v0 = v[0];
      const v1 = v[1];
      const v2 = v[2];

      dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
      dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
      dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];

      return dst;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /* DataType */
    const BYTE                           = 0x1400;
    const UNSIGNED_BYTE                  = 0x1401;
    const SHORT                          = 0x1402;
    const UNSIGNED_SHORT                 = 0x1403;
    const INT                            = 0x1404;
    const UNSIGNED_INT                   = 0x1405;
    const FLOAT                          = 0x1406;
    const UNSIGNED_SHORT_4_4_4_4       = 0x8033;
    const UNSIGNED_SHORT_5_5_5_1       = 0x8034;
    const UNSIGNED_SHORT_5_6_5         = 0x8363;
    const HALF_FLOAT                   = 0x140B;
    const UNSIGNED_INT_2_10_10_10_REV  = 0x8368;
    const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
    const UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;
    const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
    const UNSIGNED_INT_24_8            = 0x84FA;

    const glTypeToTypedArray = {};
    {
      const tt = glTypeToTypedArray;
      tt[BYTE]                           = Int8Array;
      tt[UNSIGNED_BYTE]                  = Uint8Array;
      tt[SHORT]                          = Int16Array;
      tt[UNSIGNED_SHORT]                 = Uint16Array;
      tt[INT]                            = Int32Array;
      tt[UNSIGNED_INT]                   = Uint32Array;
      tt[FLOAT]                          = Float32Array;
      tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;
      tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;
      tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;
      tt[HALF_FLOAT]                     = Uint16Array;
      tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;
      tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;
      tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;
      tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;
      tt[UNSIGNED_INT_24_8]              = Uint32Array;
    }

    /**
     * Get the GL type for a typedArray
     * @param {ArrayBufferView} typedArray a typedArray
     * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will
     *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned
     * @memberOf module:twgl/typedArray
     */
    function getGLTypeForTypedArray(typedArray) {
      if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line
      if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line
      if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
      if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line
      if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
      if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line
      throw new Error('unsupported typed array type');
    }

    /**
     * Get the GL type for a typedArray type
     * @param {ArrayBufferView} typedArrayType a typedArray constructor
     * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will
     *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned
     * @memberOf module:twgl/typedArray
     */
    function getGLTypeForTypedArrayType(typedArrayType) {
      if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line
      if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line
      if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
      if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line
      if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
      if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line
      throw new Error('unsupported typed array type');
    }

    /**
     * Get the typed array constructor for a given GL type
     * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)
     * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).
     * @memberOf module:twgl/typedArray
     */
    function getTypedArrayTypeForGLType(type) {
      const CTOR = glTypeToTypedArray[type];
      if (!CTOR) {
        throw new Error('unknown gl type');
      }
      return CTOR;
    }

    const isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'
      ? function isArrayBufferOrSharedArrayBuffer(a) {
        return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);
      }
      : function isArrayBuffer(a) {
        return a && a.buffer && a.buffer instanceof ArrayBuffer;
      };

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /* eslint no-console: "off" */

    /**
     * Copy named properties
     *
     * @param {string[]} names names of properties to copy
     * @param {object} src object to copy properties from
     * @param {object} dst object to copy properties to
     * @private
     */
    function copyNamedProperties(names, src, dst) {
      names.forEach(function(name) {
        const value = src[name];
        if (value !== undefined) {
          dst[name] = value;
        }
      });
    }

    function error(...args) {
      console.error(...args);
    }

    function warn(...args) {
      console.warn(...args);
    }

    function isBuffer(gl, t) {
      return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;
    }

    function isRenderbuffer(gl, t) {
      return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;
    }

    function isShader(gl, t) {
      return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;
    }

    function isTexture(gl, t) {
      return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;
    }

    function isSampler(gl, t) {
      return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    const STATIC_DRAW                  = 0x88e4;
    const ARRAY_BUFFER                 = 0x8892;
    const ELEMENT_ARRAY_BUFFER         = 0x8893;
    const BUFFER_SIZE                  = 0x8764;

    const BYTE$1                         = 0x1400;
    const UNSIGNED_BYTE$1                = 0x1401;
    const SHORT$1                        = 0x1402;
    const UNSIGNED_SHORT$1               = 0x1403;
    const INT$1                          = 0x1404;
    const UNSIGNED_INT$1                 = 0x1405;
    const FLOAT$1                        = 0x1406;
    const defaults$2 = {
      attribPrefix: "",
    };

    function setBufferFromTypedArray(gl, type, buffer, array, drawType) {
      gl.bindBuffer(type, buffer);
      gl.bufferData(type, array, drawType || STATIC_DRAW);
    }

    /**
     * Given typed array creates a WebGLBuffer and copies the typed array
     * into it.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken
     * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.
     * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.
     * @return {WebGLBuffer} the created WebGLBuffer
     * @memberOf module:twgl/attributes
     */
    function createBufferFromTypedArray(gl, typedArray, type, drawType) {
      if (isBuffer(gl, typedArray)) {
        return typedArray;
      }
      type = type || ARRAY_BUFFER;
      const buffer = gl.createBuffer();
      setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);
      return buffer;
    }

    function isIndices(name) {
      return name === "indices";
    }

    // This is really just a guess. Though I can't really imagine using
    // anything else? Maybe for some compression?
    function getNormalizationForTypedArray(typedArray) {
      if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line
      if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line
      return false;
    }

    // This is really just a guess. Though I can't really imagine using
    // anything else? Maybe for some compression?
    function getNormalizationForTypedArrayType(typedArrayType) {
      if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line
      if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line
      return false;
    }

    function getArray(array) {
      return array.length ? array : array.data;
    }

    const texcoordRE = /coord|texture/i;
    const colorRE = /color|colour/i;

    function guessNumComponentsFromName(name, length) {
      let numComponents;
      if (texcoordRE.test(name)) {
        numComponents = 2;
      } else if (colorRE.test(name)) {
        numComponents = 4;
      } else {
        numComponents = 3;  // position, normals, indices ...
      }

      if (length % numComponents > 0) {
        throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);
      }

      return numComponents;
    }

    function getNumComponents(array, arrayName) {
      return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);
    }

    function makeTypedArray(array, name) {
      if (isArrayBuffer(array)) {
        return array;
      }

      if (isArrayBuffer(array.data)) {
        return array.data;
      }

      if (Array.isArray(array)) {
        array = {
          data: array,
        };
      }

      let Type = array.type;
      if (!Type) {
        if (isIndices(name)) {
          Type = Uint16Array;
        } else {
          Type = Float32Array;
        }
      }
      return new Type(array.data);
    }

    /**
     * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer
     * for the attribute.
     *
     * @typedef {Object} AttribInfo
     * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
     *    disabled and set to this constant value and all other values will be ignored.
     * @property {number} [numComponents] the number of components for this attribute.
     * @property {number} [size] synonym for `numComponents`.
     * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`
     * @property {boolean} [normalize] whether or not to normalize the data. Default = false
     * @property {number} [offset] offset into buffer in bytes. Default = 0
     * @property {number} [stride] the stride in bytes per element. Default = 0
     * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
     *    where as anything else = do call it with this value
     * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute
     * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW
     * @memberOf module:twgl
     */

    /**
     * Use this type of array spec when TWGL can't guess the type or number of components of an array
     * @typedef {Object} FullArraySpec
     * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
     *    disabled and set to this constant value and all other values will be ignored.
     * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.
     * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.
     *    If `coord` is in the name assumes `numComponents = 2`.
     *    If `color` is in the name assumes `numComponents = 4`.
     *    otherwise assumes `numComponents = 3`
     * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).
     * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.
     * @property {number} [size] synonym for `numComponents`.
     * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.
     * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0
     * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0
     * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
     *    where as anything else = do call it with this value
     * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.
     * @property {string} [name] synonym for `attrib`.
     * @property {string} [attribName] synonym for `attrib`.
     * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer
     *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`
     *    to provide this. Example:
     *
     *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {
     *           position: [1, 2, 3, ... ],
     *         });
     *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {
     *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1
     *         });
     *
     * @memberOf module:twgl
     */

    /**
     * An individual array in {@link module:twgl.Arrays}
     *
     * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`
     * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will
     * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.
     *
     * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec
     * @memberOf module:twgl
     */

    /**
     * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your
     * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.
     *
     *     Bare JavaScript Arrays
     *
     *         var arrays = {
     *            position: [-1, 1, 0],
     *            normal: [0, 1, 0],
     *            ...
     *         }
     *
     *     Bare TypedArrays
     *
     *         var arrays = {
     *            position: new Float32Array([-1, 1, 0]),
     *            color: new Uint8Array([255, 128, 64, 255]),
     *            ...
     *         }
     *
     * *   Will guess at `numComponents` if not specified based on name.
     *
     *     If `coord` is in the name assumes `numComponents = 2`
     *
     *     If `color` is in the name assumes `numComponents = 4`
     *
     *     otherwise assumes `numComponents = 3`
     *
     * Objects with various fields. See {@link module:twgl.FullArraySpec}.
     *
     *     var arrays = {
     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
     *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
     *     };
     *
     * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays
     * @memberOf module:twgl
     */


    /**
     * Creates a set of attribute data and WebGLBuffers from set of arrays
     *
     * Given
     *
     *      var arrays = {
     *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
     *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },
     *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
     *      };
     *
     * returns something like
     *
     *      var attribs = {
     *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
     *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
     *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
     *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },
     *      };
     *
     * notes:
     *
     * *   Arrays can take various forms
     *
     *     Bare JavaScript Arrays
     *
     *         var arrays = {
     *            position: [-1, 1, 0],
     *            normal: [0, 1, 0],
     *            ...
     *         }
     *
     *     Bare TypedArrays
     *
     *         var arrays = {
     *            position: new Float32Array([-1, 1, 0]),
     *            color: new Uint8Array([255, 128, 64, 255]),
     *            ...
     *         }
     *
     * *   Will guess at `numComponents` if not specified based on name.
     *
     *     If `coord` is in the name assumes `numComponents = 2`
     *
     *     If `color` is in the name assumes `numComponents = 4`
     *
     *     otherwise assumes `numComponents = 3`
     *
     * @param {WebGLRenderingContext} gl The webgl rendering context.
     * @param {module:twgl.Arrays} arrays The arrays
     * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from
     *   This lets you share buffers. Any arrays you supply will override
     *   the buffers from srcBufferInfo.
     * @return {Object.<string, module:twgl.AttribInfo>} the attribs
     * @memberOf module:twgl/attributes
     */
    function createAttribsFromArrays(gl, arrays) {
      const attribs = {};
      Object.keys(arrays).forEach(function(arrayName) {
        if (!isIndices(arrayName)) {
          const array = arrays[arrayName];
          const attribName = array.attrib || array.name || array.attribName || (defaults$2.attribPrefix + arrayName);
          if (array.value) {
            if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {
              throw new Error('array.value is not array or typedarray');
            }
            attribs[attribName] = {
              value: array.value,
            };
          } else {
            let buffer;
            let type;
            let normalization;
            let numComponents;
            if (array.buffer && array.buffer instanceof WebGLBuffer) {
              buffer = array.buffer;
              numComponents = array.numComponents || array.size;
              type = array.type;
              normalization = array.normalize;
            } else if (typeof array === "number" || typeof array.data === "number") {
              const numValues = array.data || array;
              const arrayType = array.type || Float32Array;
              const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;
              type = getGLTypeForTypedArrayType(arrayType);
              normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);
              numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);
              buffer = gl.createBuffer();
              gl.bindBuffer(ARRAY_BUFFER, buffer);
              gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);
            } else {
              const typedArray = makeTypedArray(array, arrayName);
              buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);
              type = getGLTypeForTypedArray(typedArray);
              normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);
              numComponents = getNumComponents(array, arrayName);
            }
            attribs[attribName] = {
              buffer:        buffer,
              numComponents: numComponents,
              type:          type,
              normalize:     normalization,
              stride:        array.stride || 0,
              offset:        array.offset || 0,
              divisor:       array.divisor === undefined ? undefined : array.divisor,
              drawType:      array.drawType,
            };
          }
        }
      });
      gl.bindBuffer(ARRAY_BUFFER, null);
      return attribs;
    }

    function getBytesPerValueForGLType(gl, type) {
      if (type === BYTE$1)           return 1;  // eslint-disable-line
      if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line
      if (type === SHORT$1)          return 2;  // eslint-disable-line
      if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line
      if (type === INT$1)            return 4;  // eslint-disable-line
      if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line
      if (type === FLOAT$1)          return 4;  // eslint-disable-line
      return 0;
    }

    // Tries to get the number of elements from a set of arrays.
    const positionKeys = ['position', 'positions', 'a_position'];
    function getNumElementsFromNonIndexedArrays(arrays) {
      let key;
      let ii;
      for (ii = 0; ii < positionKeys.length; ++ii) {
        key = positionKeys[ii];
        if (key in arrays) {
          break;
        }
      }
      if (ii === positionKeys.length) {
        key = Object.keys(arrays)[0];
      }
      const array = arrays[key];
      const length = getArray(array).length;
      const numComponents = getNumComponents(array, key);
      const numElements = length / numComponents;
      if (length % numComponents > 0) {
        throw new Error(`numComponents ${numComponents} not correct for length ${length}`);
      }
      return numElements;
    }

    function getNumElementsFromAttributes(gl, attribs) {
      let key;
      let ii;
      for (ii = 0; ii < positionKeys.length; ++ii) {
        key = positionKeys[ii];
        if (key in attribs) {
          break;
        }
        key = defaults$2.attribPrefix + key;
        if (key in attribs) {
          break;
        }
      }
      if (ii === positionKeys.length) {
        key = Object.keys(attribs)[0];
      }
      const attrib = attribs[key];
      gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);
      const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);
      gl.bindBuffer(ARRAY_BUFFER, null);

      const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);
      const totalElements = numBytes / bytesPerValue;
      const numComponents = attrib.numComponents || attrib.size;
      // TODO: check stride
      const numElements = totalElements / numComponents;
      if (numElements % 1 !== 0) {
        throw new Error(`numComponents ${numComponents} not correct for length ${length}`);
      }
      return numElements;
    }

    /**
     * @typedef {Object} BufferInfo
     * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
     * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
     * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.
     * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`
     * @memberOf module:twgl
     */

    /**
     * Creates a BufferInfo from an object of arrays.
     *
     * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
     * {@link module:twgl:drawBufferInfo}.
     *
     * Given an object like
     *
     *     var arrays = {
     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
     *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
     *     };
     *
     *  Creates an BufferInfo like this
     *
     *     bufferInfo = {
     *       numElements: 4,        // or whatever the number of elements is
     *       indices: WebGLBuffer,  // this property will not exist if there are no indices
     *       attribs: {
     *         position: { buffer: WebGLBuffer, numComponents: 3, },
     *         normal:   { buffer: WebGLBuffer, numComponents: 3, },
     *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },
     *       },
     *     };
     *
     *  The properties of arrays can be JavaScript arrays in which case the number of components
     *  will be guessed.
     *
     *     var arrays = {
     *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],
     *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],
     *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
     *        indices:  [0, 1, 2, 1, 2, 3],
     *     };
     *
     *  They can also be TypedArrays
     *
     *     var arrays = {
     *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
     *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
     *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
     *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
     *     };
     *
     *  Or AugmentedTypedArrays
     *
     *     var positions = createAugmentedTypedArray(3, 4);
     *     var texcoords = createAugmentedTypedArray(2, 4);
     *     var normals   = createAugmentedTypedArray(3, 4);
     *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);
     *
     *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);
     *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);
     *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
     *     indices.push([0, 1, 2, 1, 2, 3]);
     *
     *     var arrays = {
     *        position: positions,
     *        texcoord: texcoords,
     *        normal:   normals,
     *        indices:  indices,
     *     };
     *
     * For the last example it is equivalent to
     *
     *     var bufferInfo = {
     *       attribs: {
     *         position: { numComponents: 3, buffer: gl.createBuffer(), },
     *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },
     *         normal: { numComponents: 3, buffer: gl.createBuffer(), },
     *       },
     *       indices: gl.createBuffer(),
     *       numElements: 6,
     *     };
     *
     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);
     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);
     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);
     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);
     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);
     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);
     *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);
     *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {module:twgl.Arrays} arrays Your data
     * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing
     *        buffer info to start from. WebGLBuffers etc specified
     *        in the srcBufferInfo will be used in a new BufferInfo
     *        with any arrays specified overriding the ones in
     *        srcBufferInfo.
     * @return {module:twgl.BufferInfo} A BufferInfo
     * @memberOf module:twgl/attributes
     */
    function createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {
      const newAttribs = createAttribsFromArrays(gl, arrays);
      const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});
      bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);
      const indices = arrays.indices;
      if (indices) {
        const newIndices = makeTypedArray(indices, "indices");
        bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);
        bufferInfo.numElements = newIndices.length;
        bufferInfo.elementType = getGLTypeForTypedArray(newIndices);
      } else if (!bufferInfo.numElements) {
        bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);
      }

      return bufferInfo;
    }

    /**
     * Creates a buffer from an array, typed array, or array spec
     *
     * Given something like this
     *
     *     [1, 2, 3],
     *
     * or
     *
     *     new Uint16Array([1,2,3]);
     *
     * or
     *
     *     {
     *        data: [1, 2, 3],
     *        type: Uint8Array,
     *     }
     *
     * returns a WebGLBuffer that contains the given data.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
     * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.
     * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.
     * @return {WebGLBuffer} a WebGLBuffer containing the data in array.
     * @memberOf module:twgl/attributes
     */
    function createBufferFromArray(gl, array, arrayName) {
      const type = arrayName === "indices" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;
      const typedArray = makeTypedArray(array, arrayName);
      return createBufferFromTypedArray(gl, typedArray, type);
    }

    /**
     * Creates buffers from arrays or typed arrays
     *
     * Given something like this
     *
     *     var arrays = {
     *        positions: [1, 2, 3],
     *        normals: [0, 0, 1],
     *     }
     *
     * returns something like
     *
     *     buffers = {
     *       positions: WebGLBuffer,
     *       normals: WebGLBuffer,
     *     }
     *
     * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
     * @param {module:twgl.Arrays} arrays
     * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array
     * @memberOf module:twgl/attributes
     */
    function createBuffersFromArrays(gl, arrays) {
      const buffers = { };
      Object.keys(arrays).forEach(function(key) {
        buffers[key] = createBufferFromArray(gl, arrays[key], key);
      });

      // Ugh!
      if (arrays.indices) {
        buffers.numElements = arrays.indices.length;
        buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));
      } else {
        buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);
      }

      return buffers;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    const getArray$1 = getArray;  // eslint-disable-line
    const getNumComponents$1 = getNumComponents;  // eslint-disable-line

    /**
     * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray
     */

    /**
     * Add `push` to a typed array. It just keeps a 'cursor'
     * and allows use to `push` values into the array so we
     * don't have to manually compute offsets
     * @param {TypedArray} typedArray TypedArray to augment
     * @param {number} numComponents number of components.
     * @private
     */
    function augmentTypedArray(typedArray, numComponents) {
      let cursor = 0;
      typedArray.push = function() {
        for (let ii = 0; ii < arguments.length; ++ii) {
          const value = arguments[ii];
          if (value instanceof Array || isArrayBuffer(value)) {
            for (let jj = 0; jj < value.length; ++jj) {
              typedArray[cursor++] = value[jj];
            }
          } else {
            typedArray[cursor++] = value;
          }
        }
      };
      typedArray.reset = function(opt_index) {
        cursor = opt_index || 0;
      };
      typedArray.numComponents = numComponents;
      Object.defineProperty(typedArray, 'numElements', {
        get: function() {
          return this.length / this.numComponents | 0;
        },
      });
      return typedArray;
    }

    /**
     * creates a typed array with a `push` function attached
     * so that you can easily *push* values.
     *
     * `push` can take multiple arguments. If an argument is an array each element
     * of the array will be added to the typed array.
     *
     * Example:
     *
     *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
     *     array.push(1, 2, 3);
     *     array.push([4, 5, 6]);
     *     // array now contains [1, 2, 3, 4, 5, 6]
     *
     * Also has `numComponents` and `numElements` properties.
     *
     * @param {number} numComponents number of components
     * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
     * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
     * @return {ArrayBufferView} A typed array.
     * @memberOf module:twgl/primitives
     */
    function createAugmentedTypedArray(numComponents, numElements, opt_type) {
      const Type = opt_type || Float32Array;
      return augmentTypedArray(new Type(numComponents * numElements), numComponents);
    }

    function allButIndices(name) {
      return name !== "indices";
    }

    /**
     * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.
     * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex
     * @return {Object.<string, TypedArray>} The deindexed vertices
     * @memberOf module:twgl/primitives
     */
    function deindexVertices(vertices) {
      const indices = vertices.indices;
      const newVertices = {};
      const numElements = indices.length;

      function expandToUnindexed(channel) {
        const srcBuffer = vertices[channel];
        const numComponents = srcBuffer.numComponents;
        const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);
        for (let ii = 0; ii < numElements; ++ii) {
          const ndx = indices[ii];
          const offset = ndx * numComponents;
          for (let jj = 0; jj < numComponents; ++jj) {
            dstBuffer.push(srcBuffer[offset + jj]);
          }
        }
        newVertices[channel] = dstBuffer;
      }

      Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);

      return newVertices;
    }

    /**
     * flattens the normals of deindexed vertices in place.
     * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten
     * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)
     * @memberOf module:twgl/primitives
     */
    function flattenNormals(vertices) {
      if (vertices.indices) {
        throw new Error('can not flatten normals of indexed vertices. deindex them first');
      }

      const normals = vertices.normal;
      const numNormals = normals.length;
      for (let ii = 0; ii < numNormals; ii += 9) {
        // pull out the 3 normals for this triangle
        const nax = normals[ii + 0];
        const nay = normals[ii + 1];
        const naz = normals[ii + 2];

        const nbx = normals[ii + 3];
        const nby = normals[ii + 4];
        const nbz = normals[ii + 5];

        const ncx = normals[ii + 6];
        const ncy = normals[ii + 7];
        const ncz = normals[ii + 8];

        // add them
        let nx = nax + nbx + ncx;
        let ny = nay + nby + ncy;
        let nz = naz + nbz + ncz;

        // normalize them
        const length = Math.sqrt(nx * nx + ny * ny + nz * nz);

        nx /= length;
        ny /= length;
        nz /= length;

        // copy them back in
        normals[ii + 0] = nx;
        normals[ii + 1] = ny;
        normals[ii + 2] = nz;

        normals[ii + 3] = nx;
        normals[ii + 4] = ny;
        normals[ii + 5] = nz;

        normals[ii + 6] = nx;
        normals[ii + 7] = ny;
        normals[ii + 8] = nz;
      }

      return vertices;
    }

    function applyFuncToV3Array(array, matrix, fn) {
      const len = array.length;
      const tmp = new Float32Array(3);
      for (let ii = 0; ii < len; ii += 3) {
        fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);
        array[ii    ] = tmp[0];
        array[ii + 1] = tmp[1];
        array[ii + 2] = tmp[2];
      }
    }

    function transformNormal$1(mi, v, dst) {
      dst = dst || create$1();
      const v0 = v[0];
      const v1 = v[1];
      const v2 = v[2];

      dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
      dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
      dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];

      return dst;
    }

    /**
     * Reorients directions by the given matrix..
     * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
     * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
     * @return {(number[]|TypedArray)} the same array that was passed in
     * @memberOf module:twgl/primitives
     */
    function reorientDirections(array, matrix) {
      applyFuncToV3Array(array, matrix, transformDirection);
      return array;
    }

    /**
     * Reorients normals by the inverse-transpose of the given
     * matrix..
     * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
     * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
     * @return {(number[]|TypedArray)} the same array that was passed in
     * @memberOf module:twgl/primitives
     */
    function reorientNormals(array, matrix) {
      applyFuncToV3Array(array, inverse(matrix), transformNormal$1);
      return array;
    }

    /**
     * Reorients positions by the given matrix. In other words, it
     * multiplies each vertex by the given matrix.
     * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
     * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
     * @return {(number[]|TypedArray)} the same array that was passed in
     * @memberOf module:twgl/primitives
     */
    function reorientPositions(array, matrix) {
      applyFuncToV3Array(array, matrix, transformPoint);
      return array;
    }

    /**
     * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray
     */

    /**
     * Reorients arrays by the given matrix. Assumes arrays have
     * names that contains 'pos' could be reoriented as positions,
     * 'binorm' or 'tan' as directions, and 'norm' as normals.
     *
     * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient
     * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.
     * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.
     * @memberOf module:twgl/primitives
     */
    function reorientVertices(arrays, matrix) {
      Object.keys(arrays).forEach(function(name) {
        const array = arrays[name];
        if (name.indexOf("pos") >= 0) {
          reorientPositions(array, matrix);
        } else if (name.indexOf("tan") >= 0 || name.indexOf("binorm") >= 0) {
          reorientDirections(array, matrix);
        } else if (name.indexOf("norm") >= 0) {
          reorientNormals(array, matrix);
        }
      });
      return arrays;
    }

    /**
     * Creates XY quad BufferInfo
     *
     * The default with no parameters will return a 2x2 quad with values from -1 to +1.
     * If you want a unit quad with that goes from 0 to 1 you'd call it with
     *
     *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
     *
     * If you want a unit quad centered above 0,0 you'd call it with
     *
     *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
     * @param {number} [xOffset] the amount to offset the quad in X
     * @param {number} [yOffset] the amount to offset the quad in Y
     * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo
     * @memberOf module:twgl/primitives
     * @function createXYQuadBuffers
     */

    /**
     * Creates XY quad Buffers
     *
     * The default with no parameters will return a 2x2 quad with values from -1 to +1.
     * If you want a unit quad with that goes from 0 to 1 you'd call it with
     *
     *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
     *
     * If you want a unit quad centered above 0,0 you'd call it with
     *
     *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
     * @param {number} [xOffset] the amount to offset the quad in X
     * @param {number} [yOffset] the amount to offset the quad in Y
     * @return {module:twgl.BufferInfo} the created XY Quad buffers
     * @memberOf module:twgl/primitives
     * @function createXYQuadBufferInfo
     */

    /**
     * Creates XY quad vertices
     *
     * The default with no parameters will return a 2x2 quad with values from -1 to +1.
     * If you want a unit quad with that goes from 0 to 1 you'd call it with
     *
     *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);
     *
     * If you want a unit quad centered above 0,0 you'd call it with
     *
     *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);
     *
     * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
     * @param {number} [xOffset] the amount to offset the quad in X
     * @param {number} [yOffset] the amount to offset the quad in Y
     * @return {Object.<string, TypedArray>} the created XY Quad vertices
     * @memberOf module:twgl/primitives
     */
    function createXYQuadVertices(size, xOffset, yOffset) {
      size = size || 2;
      xOffset = xOffset || 0;
      yOffset = yOffset || 0;
      size *= 0.5;
      return {
        position: {
          numComponents: 2,
          data: [
            xOffset + -1 * size, yOffset + -1 * size,
            xOffset +  1 * size, yOffset + -1 * size,
            xOffset + -1 * size, yOffset +  1 * size,
            xOffset +  1 * size, yOffset +  1 * size,
          ],
        },
        normal: [
          0, 0, 1,
          0, 0, 1,
          0, 0, 1,
          0, 0, 1,
        ],
        texcoord: [
          0, 0,
          1, 0,
          0, 1,
          1, 1,
        ],
        indices: [ 0, 1, 2, 2, 1, 3 ],
      };
    }

    /**
     * Creates XZ plane BufferInfo.
     *
     * The created plane has position, normal, and texcoord data
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} [width] Width of the plane. Default = 1
     * @param {number} [depth] Depth of the plane. Default = 1
     * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
     * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
     * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
     * @return {module:twgl.BufferInfo} The created plane BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createPlaneBufferInfo
     */

    /**
     * Creates XZ plane buffers.
     *
     * The created plane has position, normal, and texcoord data
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} [width] Width of the plane. Default = 1
     * @param {number} [depth] Depth of the plane. Default = 1
     * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
     * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
     * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
     * @return {Object.<string, WebGLBuffer>} The created plane buffers.
     * @memberOf module:twgl/primitives
     * @function createPlaneBuffers
     */

    /**
     * Creates XZ plane vertices.
     *
     * The created plane has position, normal, and texcoord data
     *
     * @param {number} [width] Width of the plane. Default = 1
     * @param {number} [depth] Depth of the plane. Default = 1
     * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
     * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
     * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
     * @return {Object.<string, TypedArray>} The created plane vertices.
     * @memberOf module:twgl/primitives
     */
    function createPlaneVertices(
        width,
        depth,
        subdivisionsWidth,
        subdivisionsDepth,
        matrix) {
      width = width || 1;
      depth = depth || 1;
      subdivisionsWidth = subdivisionsWidth || 1;
      subdivisionsDepth = subdivisionsDepth || 1;
      matrix = matrix || identity();

      const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
      const positions = createAugmentedTypedArray(3, numVertices);
      const normals = createAugmentedTypedArray(3, numVertices);
      const texcoords = createAugmentedTypedArray(2, numVertices);

      for (let z = 0; z <= subdivisionsDepth; z++) {
        for (let x = 0; x <= subdivisionsWidth; x++) {
          const u = x / subdivisionsWidth;
          const v = z / subdivisionsDepth;
          positions.push(
              width * u - width * 0.5,
              0,
              depth * v - depth * 0.5);
          normals.push(0, 1, 0);
          texcoords.push(u, v);
        }
      }

      const numVertsAcross = subdivisionsWidth + 1;
      const indices = createAugmentedTypedArray(
          3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);

      for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line
        for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line
          // Make triangle 1 of quad.
          indices.push(
              (z + 0) * numVertsAcross + x,
              (z + 1) * numVertsAcross + x,
              (z + 0) * numVertsAcross + x + 1);

          // Make triangle 2 of quad.
          indices.push(
              (z + 1) * numVertsAcross + x,
              (z + 1) * numVertsAcross + x + 1,
              (z + 0) * numVertsAcross + x + 1);
        }
      }

      const arrays = reorientVertices({
        position: positions,
        normal: normals,
        texcoord: texcoords,
        indices: indices,
      }, matrix);
      return arrays;
    }

    /**
     * Creates sphere BufferInfo.
     *
     * The created sphere has position, normal, and texcoord data
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} radius radius of the sphere.
     * @param {number} subdivisionsAxis number of steps around the sphere.
     * @param {number} subdivisionsHeight number of vertically on the sphere.
     * @param {number} [opt_startLatitudeInRadians] where to start the
     *     top of the sphere. Default = 0.
     * @param {number} [opt_endLatitudeInRadians] Where to end the
     *     bottom of the sphere. Default = Math.PI.
     * @param {number} [opt_startLongitudeInRadians] where to start
     *     wrapping the sphere. Default = 0.
     * @param {number} [opt_endLongitudeInRadians] where to end
     *     wrapping the sphere. Default = 2 * Math.PI.
     * @return {module:twgl.BufferInfo} The created sphere BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createSphereBufferInfo
     */

    /**
     * Creates sphere buffers.
     *
     * The created sphere has position, normal, and texcoord data
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} radius radius of the sphere.
     * @param {number} subdivisionsAxis number of steps around the sphere.
     * @param {number} subdivisionsHeight number of vertically on the sphere.
     * @param {number} [opt_startLatitudeInRadians] where to start the
     *     top of the sphere. Default = 0.
     * @param {number} [opt_endLatitudeInRadians] Where to end the
     *     bottom of the sphere. Default = Math.PI.
     * @param {number} [opt_startLongitudeInRadians] where to start
     *     wrapping the sphere. Default = 0.
     * @param {number} [opt_endLongitudeInRadians] where to end
     *     wrapping the sphere. Default = 2 * Math.PI.
     * @return {Object.<string, WebGLBuffer>} The created sphere buffers.
     * @memberOf module:twgl/primitives
     * @function createSphereBuffers
     */

    /**
     * Creates sphere vertices.
     *
     * The created sphere has position, normal, and texcoord data
     *
     * @param {number} radius radius of the sphere.
     * @param {number} subdivisionsAxis number of steps around the sphere.
     * @param {number} subdivisionsHeight number of vertically on the sphere.
     * @param {number} [opt_startLatitudeInRadians] where to start the
     *     top of the sphere. Default = 0.
     * @param {number} [opt_endLatitudeInRadians] Where to end the
     *     bottom of the sphere. Default = Math.PI.
     * @param {number} [opt_startLongitudeInRadians] where to start
     *     wrapping the sphere. Default = 0.
     * @param {number} [opt_endLongitudeInRadians] where to end
     *     wrapping the sphere. Default = 2 * Math.PI.
     * @return {Object.<string, TypedArray>} The created sphere vertices.
     * @memberOf module:twgl/primitives
     */
    function createSphereVertices(
        radius,
        subdivisionsAxis,
        subdivisionsHeight,
        opt_startLatitudeInRadians,
        opt_endLatitudeInRadians,
        opt_startLongitudeInRadians,
        opt_endLongitudeInRadians) {
      if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
        throw new Error('subdivisionAxis and subdivisionHeight must be > 0');
      }

      opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
      opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
      opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
      opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);

      const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
      const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;

      // We are going to generate our sphere by iterating through its
      // spherical coordinates and generating 2 triangles for each quad on a
      // ring of the sphere.
      const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
      const positions = createAugmentedTypedArray(3, numVertices);
      const normals   = createAugmentedTypedArray(3, numVertices);
      const texcoords = createAugmentedTypedArray(2 , numVertices);

      // Generate the individual vertices in our vertex buffer.
      for (let y = 0; y <= subdivisionsHeight; y++) {
        for (let x = 0; x <= subdivisionsAxis; x++) {
          // Generate a vertex based on its spherical coordinates
          const u = x / subdivisionsAxis;
          const v = y / subdivisionsHeight;
          const theta = longRange * u + opt_startLongitudeInRadians;
          const phi = latRange * v + opt_startLatitudeInRadians;
          const sinTheta = Math.sin(theta);
          const cosTheta = Math.cos(theta);
          const sinPhi = Math.sin(phi);
          const cosPhi = Math.cos(phi);
          const ux = cosTheta * sinPhi;
          const uy = cosPhi;
          const uz = sinTheta * sinPhi;
          positions.push(radius * ux, radius * uy, radius * uz);
          normals.push(ux, uy, uz);
          texcoords.push(1 - u, v);
        }
      }

      const numVertsAround = subdivisionsAxis + 1;
      const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);
      for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line
        for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line
          // Make triangle 1 of quad.
          indices.push(
              (y + 0) * numVertsAround + x,
              (y + 0) * numVertsAround + x + 1,
              (y + 1) * numVertsAround + x);

          // Make triangle 2 of quad.
          indices.push(
              (y + 1) * numVertsAround + x,
              (y + 0) * numVertsAround + x + 1,
              (y + 1) * numVertsAround + x + 1);
        }
      }

      return {
        position: positions,
        normal: normals,
        texcoord: texcoords,
        indices: indices,
      };
    }

    /**
     * Array of the indices of corners of each face of a cube.
     * @type {Array.<number[]>}
     * @private
     */
    const CUBE_FACE_INDICES = [
      [3, 7, 5, 1],  // right
      [6, 2, 0, 4],  // left
      [6, 7, 3, 2],  // ??
      [0, 1, 5, 4],  // ??
      [7, 6, 4, 5],  // front
      [2, 3, 1, 0],  // back
    ];

    /**
     * Creates a BufferInfo for a cube.
     *
     * The cube is created around the origin. (-size / 2, size / 2).
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} [size] width, height and depth of the cube.
     * @return {module:twgl.BufferInfo} The created BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createCubeBufferInfo
     */

    /**
     * Creates the buffers and indices for a cube.
     *
     * The cube is created around the origin. (-size / 2, size / 2).
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} [size] width, height and depth of the cube.
     * @return {Object.<string, WebGLBuffer>} The created buffers.
     * @memberOf module:twgl/primitives
     * @function createCubeBuffers
     */

    /**
     * Creates the vertices and indices for a cube.
     *
     * The cube is created around the origin. (-size / 2, size / 2).
     *
     * @param {number} [size] width, height and depth of the cube.
     * @return {Object.<string, TypedArray>} The created vertices.
     * @memberOf module:twgl/primitives
     */
    function createCubeVertices(size) {
      size = size || 1;
      const k = size / 2;

      const cornerVertices = [
        [-k, -k, -k],
        [+k, -k, -k],
        [-k, +k, -k],
        [+k, +k, -k],
        [-k, -k, +k],
        [+k, -k, +k],
        [-k, +k, +k],
        [+k, +k, +k],
      ];

      const faceNormals = [
        [+1, +0, +0],
        [-1, +0, +0],
        [+0, +1, +0],
        [+0, -1, +0],
        [+0, +0, +1],
        [+0, +0, -1],
      ];

      const uvCoords = [
        [1, 0],
        [0, 0],
        [0, 1],
        [1, 1],
      ];

      const numVertices = 6 * 4;
      const positions = createAugmentedTypedArray(3, numVertices);
      const normals   = createAugmentedTypedArray(3, numVertices);
      const texcoords = createAugmentedTypedArray(2 , numVertices);
      const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);

      for (let f = 0; f < 6; ++f) {
        const faceIndices = CUBE_FACE_INDICES[f];
        for (let v = 0; v < 4; ++v) {
          const position = cornerVertices[faceIndices[v]];
          const normal = faceNormals[f];
          const uv = uvCoords[v];

          // Each face needs all four vertices because the normals and texture
          // coordinates are not all the same.
          positions.push(position);
          normals.push(normal);
          texcoords.push(uv);

        }
        // Two triangles make a square face.
        const offset = 4 * f;
        indices.push(offset + 0, offset + 1, offset + 2);
        indices.push(offset + 0, offset + 2, offset + 3);
      }

      return {
        position: positions,
        normal: normals,
        texcoord: texcoords,
        indices: indices,
      };
    }

    /**
     * Creates a BufferInfo for a truncated cone, which is like a cylinder
     * except that it has different top and bottom radii. A truncated cone
     * can also be used to create cylinders and regular cones. The
     * truncated cone will be created centered about the origin, with the
     * y axis as its vertical axis.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} bottomRadius Bottom radius of truncated cone.
     * @param {number} topRadius Top radius of truncated cone.
     * @param {number} height Height of truncated cone.
     * @param {number} radialSubdivisions The number of subdivisions around the
     *     truncated cone.
     * @param {number} verticalSubdivisions The number of subdivisions down the
     *     truncated cone.
     * @param {boolean} [opt_topCap] Create top cap. Default = true.
     * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
     * @return {module:twgl.BufferInfo} The created cone BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createTruncatedConeBufferInfo
     */

    /**
     * Creates buffers for a truncated cone, which is like a cylinder
     * except that it has different top and bottom radii. A truncated cone
     * can also be used to create cylinders and regular cones. The
     * truncated cone will be created centered about the origin, with the
     * y axis as its vertical axis.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} bottomRadius Bottom radius of truncated cone.
     * @param {number} topRadius Top radius of truncated cone.
     * @param {number} height Height of truncated cone.
     * @param {number} radialSubdivisions The number of subdivisions around the
     *     truncated cone.
     * @param {number} verticalSubdivisions The number of subdivisions down the
     *     truncated cone.
     * @param {boolean} [opt_topCap] Create top cap. Default = true.
     * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
     * @return {Object.<string, WebGLBuffer>} The created cone buffers.
     * @memberOf module:twgl/primitives
     * @function createTruncatedConeBuffers
     */

    /**
     * Creates vertices for a truncated cone, which is like a cylinder
     * except that it has different top and bottom radii. A truncated cone
     * can also be used to create cylinders and regular cones. The
     * truncated cone will be created centered about the origin, with the
     * y axis as its vertical axis. .
     *
     * @param {number} bottomRadius Bottom radius of truncated cone.
     * @param {number} topRadius Top radius of truncated cone.
     * @param {number} height Height of truncated cone.
     * @param {number} radialSubdivisions The number of subdivisions around the
     *     truncated cone.
     * @param {number} verticalSubdivisions The number of subdivisions down the
     *     truncated cone.
     * @param {boolean} [opt_topCap] Create top cap. Default = true.
     * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
     * @return {Object.<string, TypedArray>} The created cone vertices.
     * @memberOf module:twgl/primitives
     */
    function createTruncatedConeVertices(
        bottomRadius,
        topRadius,
        height,
        radialSubdivisions,
        verticalSubdivisions,
        opt_topCap,
        opt_bottomCap) {
      if (radialSubdivisions < 3) {
        throw new Error('radialSubdivisions must be 3 or greater');
      }

      if (verticalSubdivisions < 1) {
        throw new Error('verticalSubdivisions must be 1 or greater');
      }

      const topCap = (opt_topCap === undefined) ? true : opt_topCap;
      const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;

      const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);

      const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);
      const positions = createAugmentedTypedArray(3, numVertices);
      const normals   = createAugmentedTypedArray(3, numVertices);
      const texcoords = createAugmentedTypedArray(2, numVertices);
      const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);

      const vertsAroundEdge = radialSubdivisions + 1;

      // The slant of the cone is constant across its surface
      const slant = Math.atan2(bottomRadius - topRadius, height);
      const cosSlant = Math.cos(slant);
      const sinSlant = Math.sin(slant);

      const start = topCap ? -2 : 0;
      const end = verticalSubdivisions + (bottomCap ? 2 : 0);

      for (let yy = start; yy <= end; ++yy) {
        let v = yy / verticalSubdivisions;
        let y = height * v;
        let ringRadius;
        if (yy < 0) {
          y = 0;
          v = 1;
          ringRadius = bottomRadius;
        } else if (yy > verticalSubdivisions) {
          y = height;
          v = 1;
          ringRadius = topRadius;
        } else {
          ringRadius = bottomRadius +
            (topRadius - bottomRadius) * (yy / verticalSubdivisions);
        }
        if (yy === -2 || yy === verticalSubdivisions + 2) {
          ringRadius = 0;
          v = 0;
        }
        y -= height / 2;
        for (let ii = 0; ii < vertsAroundEdge; ++ii) {
          const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);
          const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);
          positions.push(sin * ringRadius, y, cos * ringRadius);
          if (yy < 0) {
            normals.push(0, -1, 0);
          } else if (yy > verticalSubdivisions) {
            normals.push(0, 1, 0);
          } else if (ringRadius === 0.0) {
            normals.push(0, 0, 0);
          } else {
            normals.push(sin * cosSlant, sinSlant, cos * cosSlant);
          }
          texcoords.push((ii / radialSubdivisions), 1 - v);
        }
      }

      for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line
        if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {
          continue;
        }
        for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line
          indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
                       vertsAroundEdge * (yy + 0) + 1 + ii,
                       vertsAroundEdge * (yy + 1) + 1 + ii);
          indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
                       vertsAroundEdge * (yy + 1) + 1 + ii,
                       vertsAroundEdge * (yy + 1) + 0 + ii);
        }
      }

      return {
        position: positions,
        normal: normals,
        texcoord: texcoords,
        indices: indices,
      };
    }

    /**
     * Expands RLE data
     * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z
     * @param {number[]} [padding] value to add each entry with.
     * @return {number[]} the expanded rleData
     * @private
     */
    function expandRLEData(rleData, padding) {
      padding = padding || [];
      const data = [];
      for (let ii = 0; ii < rleData.length; ii += 4) {
        const runLength = rleData[ii];
        const element = rleData.slice(ii + 1, ii + 4);
        element.push.apply(element, padding);
        for (let jj = 0; jj < runLength; ++jj) {
          data.push.apply(data, element);
        }
      }
      return data;
    }

    /**
     * Creates 3D 'F' BufferInfo.
     * An 'F' is useful because you can easily tell which way it is oriented.
     * The created 'F' has position, normal, texcoord, and color buffers.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @return {module:twgl.BufferInfo} The created BufferInfo.
     * @memberOf module:twgl/primitives
     * @function create3DFBufferInfo
     */

    /**
     * Creates 3D 'F' buffers.
     * An 'F' is useful because you can easily tell which way it is oriented.
     * The created 'F' has position, normal, texcoord, and color buffers.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @return {Object.<string, WebGLBuffer>} The created buffers.
     * @memberOf module:twgl/primitives
     * @function create3DFBuffers
     */

    /**
     * Creates 3D 'F' vertices.
     * An 'F' is useful because you can easily tell which way it is oriented.
     * The created 'F' has position, normal, texcoord, and color arrays.
     *
     * @return {Object.<string, TypedArray>} The created vertices.
     * @memberOf module:twgl/primitives
     */
    function create3DFVertices() {

      const positions = [
        // left column front
        0,   0,  0,
        0, 150,  0,
        30,   0,  0,
        0, 150,  0,
        30, 150,  0,
        30,   0,  0,

        // top rung front
        30,   0,  0,
        30,  30,  0,
        100,   0,  0,
        30,  30,  0,
        100,  30,  0,
        100,   0,  0,

        // middle rung front
        30,  60,  0,
        30,  90,  0,
        67,  60,  0,
        30,  90,  0,
        67,  90,  0,
        67,  60,  0,

        // left column back
          0,   0,  30,
         30,   0,  30,
          0, 150,  30,
          0, 150,  30,
         30,   0,  30,
         30, 150,  30,

        // top rung back
         30,   0,  30,
        100,   0,  30,
         30,  30,  30,
         30,  30,  30,
        100,   0,  30,
        100,  30,  30,

        // middle rung back
         30,  60,  30,
         67,  60,  30,
         30,  90,  30,
         30,  90,  30,
         67,  60,  30,
         67,  90,  30,

        // top
          0,   0,   0,
        100,   0,   0,
        100,   0,  30,
          0,   0,   0,
        100,   0,  30,
          0,   0,  30,

        // top rung front
        100,   0,   0,
        100,  30,   0,
        100,  30,  30,
        100,   0,   0,
        100,  30,  30,
        100,   0,  30,

        // under top rung
        30,   30,   0,
        30,   30,  30,
        100,  30,  30,
        30,   30,   0,
        100,  30,  30,
        100,  30,   0,

        // between top rung and middle
        30,   30,   0,
        30,   60,  30,
        30,   30,  30,
        30,   30,   0,
        30,   60,   0,
        30,   60,  30,

        // top of middle rung
        30,   60,   0,
        67,   60,  30,
        30,   60,  30,
        30,   60,   0,
        67,   60,   0,
        67,   60,  30,

        // front of middle rung
        67,   60,   0,
        67,   90,  30,
        67,   60,  30,
        67,   60,   0,
        67,   90,   0,
        67,   90,  30,

        // bottom of middle rung.
        30,   90,   0,
        30,   90,  30,
        67,   90,  30,
        30,   90,   0,
        67,   90,  30,
        67,   90,   0,

        // front of bottom
        30,   90,   0,
        30,  150,  30,
        30,   90,  30,
        30,   90,   0,
        30,  150,   0,
        30,  150,  30,

        // bottom
        0,   150,   0,
        0,   150,  30,
        30,  150,  30,
        0,   150,   0,
        30,  150,  30,
        30,  150,   0,

        // left side
        0,   0,   0,
        0,   0,  30,
        0, 150,  30,
        0,   0,   0,
        0, 150,  30,
        0, 150,   0,
      ];

      const texcoords = [
        // left column front
        0.22, 0.19,
        0.22, 0.79,
        0.34, 0.19,
        0.22, 0.79,
        0.34, 0.79,
        0.34, 0.19,

        // top rung front
        0.34, 0.19,
        0.34, 0.31,
        0.62, 0.19,
        0.34, 0.31,
        0.62, 0.31,
        0.62, 0.19,

        // middle rung front
        0.34, 0.43,
        0.34, 0.55,
        0.49, 0.43,
        0.34, 0.55,
        0.49, 0.55,
        0.49, 0.43,

        // left column back
        0, 0,
        1, 0,
        0, 1,
        0, 1,
        1, 0,
        1, 1,

        // top rung back
        0, 0,
        1, 0,
        0, 1,
        0, 1,
        1, 0,
        1, 1,

        // middle rung back
        0, 0,
        1, 0,
        0, 1,
        0, 1,
        1, 0,
        1, 1,

        // top
        0, 0,
        1, 0,
        1, 1,
        0, 0,
        1, 1,
        0, 1,

        // top rung front
        0, 0,
        1, 0,
        1, 1,
        0, 0,
        1, 1,
        0, 1,

        // under top rung
        0, 0,
        0, 1,
        1, 1,
        0, 0,
        1, 1,
        1, 0,

        // between top rung and middle
        0, 0,
        1, 1,
        0, 1,
        0, 0,
        1, 0,
        1, 1,

        // top of middle rung
        0, 0,
        1, 1,
        0, 1,
        0, 0,
        1, 0,
        1, 1,

        // front of middle rung
        0, 0,
        1, 1,
        0, 1,
        0, 0,
        1, 0,
        1, 1,

        // bottom of middle rung.
        0, 0,
        0, 1,
        1, 1,
        0, 0,
        1, 1,
        1, 0,

        // front of bottom
        0, 0,
        1, 1,
        0, 1,
        0, 0,
        1, 0,
        1, 1,

        // bottom
        0, 0,
        0, 1,
        1, 1,
        0, 0,
        1, 1,
        1, 0,

        // left side
        0, 0,
        0, 1,
        1, 1,
        0, 0,
        1, 1,
        1, 0,
      ];

      const normals = expandRLEData([
        // left column front
        // top rung front
        // middle rung front
        18, 0, 0, 1,

        // left column back
        // top rung back
        // middle rung back
        18, 0, 0, -1,

        // top
        6, 0, 1, 0,

        // top rung front
        6, 1, 0, 0,

        // under top rung
        6, 0, -1, 0,

        // between top rung and middle
        6, 1, 0, 0,

        // top of middle rung
        6, 0, 1, 0,

        // front of middle rung
        6, 1, 0, 0,

        // bottom of middle rung.
        6, 0, -1, 0,

        // front of bottom
        6, 1, 0, 0,

        // bottom
        6, 0, -1, 0,

        // left side
        6, -1, 0, 0,
      ]);

      const colors = expandRLEData([
            // left column front
            // top rung front
            // middle rung front
          18, 200,  70, 120,

            // left column back
            // top rung back
            // middle rung back
          18, 80, 70, 200,

            // top
          6, 70, 200, 210,

            // top rung front
          6, 200, 200, 70,

            // under top rung
          6, 210, 100, 70,

            // between top rung and middle
          6, 210, 160, 70,

            // top of middle rung
          6, 70, 180, 210,

            // front of middle rung
          6, 100, 70, 210,

            // bottom of middle rung.
          6, 76, 210, 100,

            // front of bottom
          6, 140, 210, 80,

            // bottom
          6, 90, 130, 110,

            // left side
          6, 160, 160, 220,
      ], [255]);

      const numVerts = positions.length / 3;

      const arrays = {
        position: createAugmentedTypedArray(3, numVerts),
        texcoord: createAugmentedTypedArray(2,  numVerts),
        normal: createAugmentedTypedArray(3, numVerts),
        color: createAugmentedTypedArray(4, numVerts, Uint8Array),
        indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),
      };

      arrays.position.push(positions);
      arrays.texcoord.push(texcoords);
      arrays.normal.push(normals);
      arrays.color.push(colors);

      for (let ii = 0; ii < numVerts; ++ii) {
        arrays.indices.push(ii);
      }

      return arrays;
    }

    /**
     * Creates crescent BufferInfo.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} verticalRadius The vertical radius of the crescent.
     * @param {number} outerRadius The outer radius of the crescent.
     * @param {number} innerRadius The inner radius of the crescent.
     * @param {number} thickness The thickness of the crescent.
     * @param {number} subdivisionsDown number of steps around the crescent.
     * @param {number} [startOffset] Where to start arc. Default 0.
     * @param {number} [endOffset] Where to end arg. Default 1.
     * @return {module:twgl.BufferInfo} The created BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createCresentBufferInfo
     */

    /**
     * Creates crescent buffers.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} verticalRadius The vertical radius of the crescent.
     * @param {number} outerRadius The outer radius of the crescent.
     * @param {number} innerRadius The inner radius of the crescent.
     * @param {number} thickness The thickness of the crescent.
     * @param {number} subdivisionsDown number of steps around the crescent.
     * @param {number} [startOffset] Where to start arc. Default 0.
     * @param {number} [endOffset] Where to end arg. Default 1.
     * @return {Object.<string, WebGLBuffer>} The created buffers.
     * @memberOf module:twgl/primitives
     * @function createCresentBuffers
     */

    /**
     * Creates crescent vertices.
     *
     * @param {number} verticalRadius The vertical radius of the crescent.
     * @param {number} outerRadius The outer radius of the crescent.
     * @param {number} innerRadius The inner radius of the crescent.
     * @param {number} thickness The thickness of the crescent.
     * @param {number} subdivisionsDown number of steps around the crescent.
     * @param {number} [startOffset] Where to start arc. Default 0.
     * @param {number} [endOffset] Where to end arg. Default 1.
     * @return {Object.<string, TypedArray>} The created vertices.
     * @memberOf module:twgl/primitives
     * @function createCresentBuffers
     */

    /**
     * Creates crescent BufferInfo.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} verticalRadius The vertical radius of the crescent.
     * @param {number} outerRadius The outer radius of the crescent.
     * @param {number} innerRadius The inner radius of the crescent.
     * @param {number} thickness The thickness of the crescent.
     * @param {number} subdivisionsDown number of steps around the crescent.
     * @param {number} [startOffset] Where to start arc. Default 0.
     * @param {number} [endOffset] Where to end arg. Default 1.
     * @return {module:twgl.BufferInfo} The created BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createCrescentBufferInfo
     */

    /**
     * Creates crescent buffers.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} verticalRadius The vertical radius of the crescent.
     * @param {number} outerRadius The outer radius of the crescent.
     * @param {number} innerRadius The inner radius of the crescent.
     * @param {number} thickness The thickness of the crescent.
     * @param {number} subdivisionsDown number of steps around the crescent.
     * @param {number} [startOffset] Where to start arc. Default 0.
     * @param {number} [endOffset] Where to end arg. Default 1.
     * @return {Object.<string, WebGLBuffer>} The created buffers.
     * @memberOf module:twgl/primitives
     * @function createCrescentBuffers
     */

    /**
     * Creates crescent vertices.
     *
     * @param {number} verticalRadius The vertical radius of the crescent.
     * @param {number} outerRadius The outer radius of the crescent.
     * @param {number} innerRadius The inner radius of the crescent.
     * @param {number} thickness The thickness of the crescent.
     * @param {number} subdivisionsDown number of steps around the crescent.
     * @param {number} [startOffset] Where to start arc. Default 0.
     * @param {number} [endOffset] Where to end arg. Default 1.
     * @return {Object.<string, TypedArray>} The created vertices.
     * @memberOf module:twgl/primitives
     */
     function createCrescentVertices(
        verticalRadius,
        outerRadius,
        innerRadius,
        thickness,
        subdivisionsDown,
        startOffset,
        endOffset) {
      if (subdivisionsDown <= 0) {
        throw new Error('subdivisionDown must be > 0');
      }

      startOffset = startOffset || 0;
      endOffset   = endOffset || 1;

      const subdivisionsThick = 2;

      const offsetRange = endOffset - startOffset;
      const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);
      const positions   = createAugmentedTypedArray(3, numVertices);
      const normals     = createAugmentedTypedArray(3, numVertices);
      const texcoords   = createAugmentedTypedArray(2, numVertices);

      function lerp(a, b, s) {
        return a + (b - a) * s;
      }

      function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {
        for (let z = 0; z <= subdivisionsDown; z++) {
          const uBack = x / (subdivisionsThick - 1);
          const v = z / subdivisionsDown;
          const xBack = (uBack - 0.5) * 2;
          const angle = (startOffset + (v * offsetRange)) * Math.PI;
          const s = Math.sin(angle);
          const c = Math.cos(angle);
          const radius = lerp(verticalRadius, arcRadius, s);
          const px = xBack * thickness;
          const py = c * verticalRadius;
          const pz = s * radius;
          positions.push(px, py, pz);
          const n = add$3(multiply([0, s, c], normalMult), normalAdd);
          normals.push(n);
          texcoords.push(uBack * uMult + uAdd, v);
        }
      }

      // Generate the individual vertices in our vertex buffer.
      for (let x = 0; x < subdivisionsThick; x++) {
        const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;
        createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
        createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);
        createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
        createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);
      }

      // Do outer surface.
      const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);

      function createSurface(leftArcOffset, rightArcOffset) {
        for (let z = 0; z < subdivisionsDown; ++z) {
          // Make triangle 1 of quad.
          indices.push(
              leftArcOffset + z + 0,
              leftArcOffset + z + 1,
              rightArcOffset + z + 0);

          // Make triangle 2 of quad.
          indices.push(
              leftArcOffset + z + 1,
              rightArcOffset + z + 1,
              rightArcOffset + z + 0);
        }
      }

      const numVerticesDown = subdivisionsDown + 1;
      // front
      createSurface(numVerticesDown * 0, numVerticesDown * 4);
      // right
      createSurface(numVerticesDown * 5, numVerticesDown * 7);
      // back
      createSurface(numVerticesDown * 6, numVerticesDown * 2);
      // left
      createSurface(numVerticesDown * 3, numVerticesDown * 1);

      return {
        position: positions,
        normal:   normals,
        texcoord: texcoords,
        indices:  indices,
      };
    }

    /**
     * Creates cylinder BufferInfo. The cylinder will be created around the origin
     * along the y-axis.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} radius Radius of cylinder.
     * @param {number} height Height of cylinder.
     * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
     * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
     * @param {boolean} [topCap] Create top cap. Default = true.
     * @param {boolean} [bottomCap] Create bottom cap. Default = true.
     * @return {module:twgl.BufferInfo} The created BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createCylinderBufferInfo
     */

     /**
      * Creates cylinder buffers. The cylinder will be created around the origin
      * along the y-axis.
      *
      * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
      * @param {number} radius Radius of cylinder.
      * @param {number} height Height of cylinder.
      * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
      * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
      * @param {boolean} [topCap] Create top cap. Default = true.
      * @param {boolean} [bottomCap] Create bottom cap. Default = true.
      * @return {Object.<string, WebGLBuffer>} The created buffers.
      * @memberOf module:twgl/primitives
      * @function createCylinderBuffers
      */

     /**
      * Creates cylinder vertices. The cylinder will be created around the origin
      * along the y-axis.
      *
      * @param {number} radius Radius of cylinder.
      * @param {number} height Height of cylinder.
      * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
      * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
      * @param {boolean} [topCap] Create top cap. Default = true.
      * @param {boolean} [bottomCap] Create bottom cap. Default = true.
      * @return {Object.<string, TypedArray>} The created vertices.
      * @memberOf module:twgl/primitives
      */
    function createCylinderVertices(
        radius,
        height,
        radialSubdivisions,
        verticalSubdivisions,
        topCap,
        bottomCap) {
      return createTruncatedConeVertices(
          radius,
          radius,
          height,
          radialSubdivisions,
          verticalSubdivisions,
          topCap,
          bottomCap);
    }

    /**
     * Creates BufferInfo for a torus
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} radius radius of center of torus circle.
     * @param {number} thickness radius of torus ring.
     * @param {number} radialSubdivisions The number of subdivisions around the torus.
     * @param {number} bodySubdivisions The number of subdivisions around the body torus.
     * @param {boolean} [startAngle] start angle in radians. Default = 0.
     * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
     * @return {module:twgl.BufferInfo} The created BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createTorusBufferInfo
     */

    /**
     * Creates buffers for a torus
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} radius radius of center of torus circle.
     * @param {number} thickness radius of torus ring.
     * @param {number} radialSubdivisions The number of subdivisions around the torus.
     * @param {number} bodySubdivisions The number of subdivisions around the body torus.
     * @param {boolean} [startAngle] start angle in radians. Default = 0.
     * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
     * @return {Object.<string, WebGLBuffer>} The created buffers.
     * @memberOf module:twgl/primitives
     * @function createTorusBuffers
     */

    /**
     * Creates vertices for a torus
     *
     * @param {number} radius radius of center of torus circle.
     * @param {number} thickness radius of torus ring.
     * @param {number} radialSubdivisions The number of subdivisions around the torus.
     * @param {number} bodySubdivisions The number of subdivisions around the body torus.
     * @param {boolean} [startAngle] start angle in radians. Default = 0.
     * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
     * @return {Object.<string, TypedArray>} The created vertices.
     * @memberOf module:twgl/primitives
     */
    function createTorusVertices(
        radius,
        thickness,
        radialSubdivisions,
        bodySubdivisions,
        startAngle,
        endAngle) {
      if (radialSubdivisions < 3) {
        throw new Error('radialSubdivisions must be 3 or greater');
      }

      if (bodySubdivisions < 3) {
        throw new Error('verticalSubdivisions must be 3 or greater');
      }

      startAngle = startAngle || 0;
      endAngle = endAngle || Math.PI * 2;
      const range = endAngle - startAngle;

      const radialParts = radialSubdivisions + 1;
      const bodyParts   = bodySubdivisions + 1;
      const numVertices = radialParts * bodyParts;
      const positions   = createAugmentedTypedArray(3, numVertices);
      const normals     = createAugmentedTypedArray(3, numVertices);
      const texcoords   = createAugmentedTypedArray(2, numVertices);
      const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);

      for (let slice = 0; slice < bodyParts; ++slice) {
        const v = slice / bodySubdivisions;
        const sliceAngle = v * Math.PI * 2;
        const sliceSin = Math.sin(sliceAngle);
        const ringRadius = radius + sliceSin * thickness;
        const ny = Math.cos(sliceAngle);
        const y = ny * thickness;
        for (let ring = 0; ring < radialParts; ++ring) {
          const u = ring / radialSubdivisions;
          const ringAngle = startAngle + u * range;
          const xSin = Math.sin(ringAngle);
          const zCos = Math.cos(ringAngle);
          const x = xSin * ringRadius;
          const z = zCos * ringRadius;
          const nx = xSin * sliceSin;
          const nz = zCos * sliceSin;
          positions.push(x, y, z);
          normals.push(nx, ny, nz);
          texcoords.push(u, 1 - v);
        }
      }

      for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line
        for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line
          const nextRingIndex  = 1 + ring;
          const nextSliceIndex = 1 + slice;
          indices.push(radialParts * slice          + ring,
                       radialParts * nextSliceIndex + ring,
                       radialParts * slice          + nextRingIndex);
          indices.push(radialParts * nextSliceIndex + ring,
                       radialParts * nextSliceIndex + nextRingIndex,
                       radialParts * slice          + nextRingIndex);
        }
      }

      return {
        position: positions,
        normal:   normals,
        texcoord: texcoords,
        indices:  indices,
      };
    }


    /**
     * Creates a disc BufferInfo. The disc will be in the xz plane, centered at
     * the origin. When creating, at least 3 divisions, or pie
     * pieces, need to be specified, otherwise the triangles making
     * up the disc will be degenerate. You can also specify the
     * number of radial pieces `stacks`. A value of 1 for
     * stacks will give you a simple disc of pie pieces.  If you
     * want to create an annulus you can set `innerRadius` to a
     * value > 0. Finally, `stackPower` allows you to have the widths
     * increase or decrease as you move away from the center. This
     * is particularly useful when using the disc as a ground plane
     * with a fixed camera such that you don't need the resolution
     * of small triangles near the perimeter. For example, a value
     * of 2 will produce stacks whose outside radius increases with
     * the square of the stack index. A value of 1 will give uniform
     * stacks.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} radius Radius of the ground plane.
     * @param {number} divisions Number of triangles in the ground plane (at least 3).
     * @param {number} [stacks] Number of radial divisions (default=1).
     * @param {number} [innerRadius] Default 0.
     * @param {number} [stackPower] Power to raise stack size to for decreasing width.
     * @return {module:twgl.BufferInfo} The created BufferInfo.
     * @memberOf module:twgl/primitives
     * @function createDiscBufferInfo
     */

    /**
     * Creates disc buffers. The disc will be in the xz plane, centered at
     * the origin. When creating, at least 3 divisions, or pie
     * pieces, need to be specified, otherwise the triangles making
     * up the disc will be degenerate. You can also specify the
     * number of radial pieces `stacks`. A value of 1 for
     * stacks will give you a simple disc of pie pieces.  If you
     * want to create an annulus you can set `innerRadius` to a
     * value > 0. Finally, `stackPower` allows you to have the widths
     * increase or decrease as you move away from the center. This
     * is particularly useful when using the disc as a ground plane
     * with a fixed camera such that you don't need the resolution
     * of small triangles near the perimeter. For example, a value
     * of 2 will produce stacks whose outside radius increases with
     * the square of the stack index. A value of 1 will give uniform
     * stacks.
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
     * @param {number} radius Radius of the ground plane.
     * @param {number} divisions Number of triangles in the ground plane (at least 3).
     * @param {number} [stacks] Number of radial divisions (default=1).
     * @param {number} [innerRadius] Default 0.
     * @param {number} [stackPower] Power to raise stack size to for decreasing width.
     * @return {Object.<string, WebGLBuffer>} The created buffers.
     * @memberOf module:twgl/primitives
     * @function createDiscBuffers
     */

    /**
     * Creates disc vertices. The disc will be in the xz plane, centered at
     * the origin. When creating, at least 3 divisions, or pie
     * pieces, need to be specified, otherwise the triangles making
     * up the disc will be degenerate. You can also specify the
     * number of radial pieces `stacks`. A value of 1 for
     * stacks will give you a simple disc of pie pieces.  If you
     * want to create an annulus you can set `innerRadius` to a
     * value > 0. Finally, `stackPower` allows you to have the widths
     * increase or decrease as you move away from the center. This
     * is particularly useful when using the disc as a ground plane
     * with a fixed camera such that you don't need the resolution
     * of small triangles near the perimeter. For example, a value
     * of 2 will produce stacks whose outside radius increases with
     * the square of the stack index. A value of 1 will give uniform
     * stacks.
     *
     * @param {number} radius Radius of the ground plane.
     * @param {number} divisions Number of triangles in the ground plane (at least 3).
     * @param {number} [stacks] Number of radial divisions (default=1).
     * @param {number} [innerRadius] Default 0.
     * @param {number} [stackPower] Power to raise stack size to for decreasing width.
     * @return {Object.<string, TypedArray>} The created vertices.
     * @memberOf module:twgl/primitives
     */
    function createDiscVertices(
        radius,
        divisions,
        stacks,
        innerRadius,
        stackPower) {
      if (divisions < 3) {
        throw new Error('divisions must be at least 3');
      }

      stacks = stacks ? stacks : 1;
      stackPower = stackPower ? stackPower : 1;
      innerRadius = innerRadius ? innerRadius : 0;

      // Note: We don't share the center vertex because that would
      // mess up texture coordinates.
      const numVertices = (divisions + 1) * (stacks + 1);

      const positions = createAugmentedTypedArray(3, numVertices);
      const normals   = createAugmentedTypedArray(3, numVertices);
      const texcoords = createAugmentedTypedArray(2, numVertices);
      const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);

      let firstIndex = 0;
      const radiusSpan = radius - innerRadius;
      const pointsPerStack = divisions + 1;

      // Build the disk one stack at a time.
      for (let stack = 0; stack <= stacks; ++stack) {
        const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);

        for (let i = 0; i <= divisions; ++i) {
          const theta = 2.0 * Math.PI * i / divisions;
          const x = stackRadius * Math.cos(theta);
          const z = stackRadius * Math.sin(theta);

          positions.push(x, 0, z);
          normals.push(0, 1, 0);
          texcoords.push(1 - (i / divisions), stack / stacks);
          if (stack > 0 && i !== divisions) {
            // a, b, c and d are the indices of the vertices of a quad.  unless
            // the current stack is the one closest to the center, in which case
            // the vertices a and b connect to the center vertex.
            const a = firstIndex + (i + 1);
            const b = firstIndex + i;
            const c = firstIndex + i - pointsPerStack;
            const d = firstIndex + (i + 1) - pointsPerStack;

            // Make a quad of the vertices a, b, c, d.
            indices.push(a, b, c);
            indices.push(a, c, d);
          }
        }

        firstIndex += divisions + 1;
      }

      return {
        position: positions,
        normal: normals,
        texcoord: texcoords,
        indices: indices,
      };
    }

    /**
     * creates a random integer between 0 and range - 1 inclusive.
     * @param {number} range
     * @return {number} random value between 0 and range - 1 inclusive.
     * @private
     */
    function randInt(range) {
      return Math.random() * range | 0;
    }

    /**
     * Used to supply random colors
     * @callback RandomColorFunc
     * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed
     * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha
     * @return {number} a number from 0 to 255
     * @memberOf module:twgl/primitives
     */

    /**
     * @typedef {Object} RandomVerticesOptions
     * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices
     * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers
     * @memberOf module:twgl/primitives
     */

    /**
     * Creates an augmentedTypedArray of random vertex colors.
     * If the vertices are indexed (have an indices array) then will
     * just make random colors. Otherwise assumes they are triangles
     * and makes one random color for every 3 vertices.
     * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.
     * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.
     * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.
     * @memberOf module:twgl/primitives
     */
    function makeRandomVertexColors(vertices, options) {
      options = options || {};
      const numElements = vertices.position.numElements;
      const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);
      const rand = options.rand || function(ndx, channel) {
        return channel < 3 ? randInt(256) : 255;
      };
      vertices.color = vColors;
      if (vertices.indices) {
        // just make random colors if index
        for (let ii = 0; ii < numElements; ++ii) {
          vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));
        }
      } else {
        // make random colors per triangle
        const numVertsPerColor = options.vertsPerColor || 3;
        const numSets = numElements / numVertsPerColor;
        for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line
          const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];
          for (let jj = 0; jj < numVertsPerColor; ++jj) {
            vColors.push(color);
          }
        }
      }
      return vertices;
    }

    /**
     * creates a function that calls fn to create vertices and then
     * creates a buffers for them
     * @private
     */
    function createBufferFunc(fn) {
      return function(gl) {
        const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));
        return createBuffersFromArrays(gl, arrays);
      };
    }

    /**
     * creates a function that calls fn to create vertices and then
     * creates a bufferInfo object for them
     * @private
     */
    function createBufferInfoFunc(fn) {
      return function(gl) {
        const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));
        return createBufferInfoFromArrays(gl, arrays);
      };
    }

    const arraySpecPropertyNames = [
      "numComponents",
      "size",
      "type",
      "normalize",
      "stride",
      "offset",
      "attrib",
      "name",
      "attribName",
    ];

    /**
     * Copy elements from one array to another
     *
     * @param {Array|TypedArray} src source array
     * @param {Array|TypedArray} dst dest array
     * @param {number} dstNdx index in dest to copy src
     * @param {number} [offset] offset to add to copied values
     * @private
     */
    function copyElements(src, dst, dstNdx, offset) {
      offset = offset || 0;
      const length = src.length;
      for (let ii = 0; ii < length; ++ii) {
        dst[dstNdx + ii] = src[ii] + offset;
      }
    }

    /**
     * Creates an array of the same time
     *
     * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy
     * @param {number} length size of new array
     * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray
     * @private
     */
    function createArrayOfSameType(srcArray, length) {
      const arraySrc = getArray$1(srcArray);
      const newArray = new arraySrc.constructor(length);
      let newArraySpec = newArray;
      // If it appears to have been augmented make new one augmented
      if (arraySrc.numComponents && arraySrc.numElements) {
        augmentTypedArray(newArray, arraySrc.numComponents);
      }
      // If it was a full spec make new one a full spec
      if (srcArray.data) {
        newArraySpec = {
          data: newArray,
        };
        copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);
      }
      return newArraySpec;
    }

    /**
     * Concatenates sets of vertices
     *
     * Assumes the vertices match in composition. For example
     * if one set of vertices has positions, normals, and indices
     * all sets of vertices must have positions, normals, and indices
     * and of the same type.
     *
     * Example:
     *
     *      const cubeVertices = twgl.primitives.createCubeVertices(2);
     *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);
     *      // move the sphere 2 units up
     *      twgl.primitives.reorientVertices(
     *          sphereVertices, twgl.m4.translation([0, 2, 0]));
     *      // merge the sphere with the cube
     *      const cubeSphereVertices = twgl.primitives.concatVertices(
     *          [cubeVertices, sphereVertices]);
     *      // turn them into WebGL buffers and attrib data
     *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);
     *
     * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices
     * @return {module:twgl.Arrays} The concatenated vertices.
     * @memberOf module:twgl/primitives
     */
    function concatVertices(arrayOfArrays) {
      const names = {};
      let baseName;
      // get names of all arrays.
      // and numElements for each set of vertices
      for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
        const arrays = arrayOfArrays[ii];
        Object.keys(arrays).forEach(function(name) {  // eslint-disable-line
          if (!names[name]) {
            names[name] = [];
          }
          if (!baseName && name !== 'indices') {
            baseName = name;
          }
          const arrayInfo = arrays[name];
          const numComponents = getNumComponents$1(arrayInfo, name);
          const array = getArray$1(arrayInfo);
          const numElements = array.length / numComponents;
          names[name].push(numElements);
        });
      }

      // compute length of combined array
      // and return one for reference
      function getLengthOfCombinedArrays(name) {
        let length = 0;
        let arraySpec;
        for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
          const arrays = arrayOfArrays[ii];
          const arrayInfo = arrays[name];
          const array = getArray$1(arrayInfo);
          length += array.length;
          if (!arraySpec || arrayInfo.data) {
            arraySpec = arrayInfo;
          }
        }
        return {
          length: length,
          spec: arraySpec,
        };
      }

      function copyArraysToNewArray(name, base, newArray) {
        let baseIndex = 0;
        let offset = 0;
        for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
          const arrays = arrayOfArrays[ii];
          const arrayInfo = arrays[name];
          const array = getArray$1(arrayInfo);
          if (name === 'indices') {
            copyElements(array, newArray, offset, baseIndex);
            baseIndex += base[ii];
          } else {
            copyElements(array, newArray, offset);
          }
          offset += array.length;
        }
      }

      const base = names[baseName];

      const newArrays = {};
      Object.keys(names).forEach(function(name) {
        const info = getLengthOfCombinedArrays(name);
        const newArraySpec = createArrayOfSameType(info.spec, info.length);
        copyArraysToNewArray(name, base, getArray$1(newArraySpec));
        newArrays[name] = newArraySpec;
      });
      return newArrays;
    }

    /**
     * Creates a duplicate set of vertices
     *
     * This is useful for calling reorientVertices when you
     * also want to keep the original available
     *
     * @param {module:twgl.Arrays} arrays of vertices
     * @return {module:twgl.Arrays} The duplicated vertices.
     * @memberOf module:twgl/primitives
     */
    function duplicateVertices(arrays) {
      const newArrays = {};
      Object.keys(arrays).forEach(function(name) {
        const arraySpec = arrays[name];
        const srcArray = getArray$1(arraySpec);
        const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);
        copyElements(srcArray, getArray$1(newArraySpec), 0);
        newArrays[name] = newArraySpec;
      });
      return newArrays;
    }

    const create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);
    const create3DFBuffers = createBufferFunc(create3DFVertices);
    const createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);
    const createCubeBuffers = createBufferFunc(createCubeVertices);
    const createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);
    const createPlaneBuffers = createBufferFunc(createPlaneVertices);
    const createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);
    const createSphereBuffers = createBufferFunc(createSphereVertices);
    const createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);
    const createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);
    const createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);
    const createXYQuadBuffers = createBufferFunc(createXYQuadVertices);
    const createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);
    const createCrescentBuffers = createBufferFunc(createCrescentVertices);
    const createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);
    const createCylinderBuffers = createBufferFunc(createCylinderVertices);
    const createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);
    const createTorusBuffers = createBufferFunc(createTorusVertices);
    const createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);
    const createDiscBuffers = createBufferFunc(createDiscVertices);

    // these were mis-spelled until 4.12
    const createCresentBufferInfo = createCrescentBufferInfo;
    const createCresentBuffers = createCrescentBuffers;
    const createCresentVertices = createCrescentVertices;

    var primitives = /*#__PURE__*/Object.freeze({
      __proto__: null,
      create3DFBufferInfo: create3DFBufferInfo,
      create3DFBuffers: create3DFBuffers,
      create3DFVertices: create3DFVertices,
      createAugmentedTypedArray: createAugmentedTypedArray,
      createCubeBufferInfo: createCubeBufferInfo,
      createCubeBuffers: createCubeBuffers,
      createCubeVertices: createCubeVertices,
      createPlaneBufferInfo: createPlaneBufferInfo,
      createPlaneBuffers: createPlaneBuffers,
      createPlaneVertices: createPlaneVertices,
      createSphereBufferInfo: createSphereBufferInfo,
      createSphereBuffers: createSphereBuffers,
      createSphereVertices: createSphereVertices,
      createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,
      createTruncatedConeBuffers: createTruncatedConeBuffers,
      createTruncatedConeVertices: createTruncatedConeVertices,
      createXYQuadBufferInfo: createXYQuadBufferInfo,
      createXYQuadBuffers: createXYQuadBuffers,
      createXYQuadVertices: createXYQuadVertices,
      createCresentBufferInfo: createCresentBufferInfo,
      createCresentBuffers: createCresentBuffers,
      createCresentVertices: createCresentVertices,
      createCrescentBufferInfo: createCrescentBufferInfo,
      createCrescentBuffers: createCrescentBuffers,
      createCrescentVertices: createCrescentVertices,
      createCylinderBufferInfo: createCylinderBufferInfo,
      createCylinderBuffers: createCylinderBuffers,
      createCylinderVertices: createCylinderVertices,
      createTorusBufferInfo: createTorusBufferInfo,
      createTorusBuffers: createTorusBuffers,
      createTorusVertices: createTorusVertices,
      createDiscBufferInfo: createDiscBufferInfo,
      createDiscBuffers: createDiscBuffers,
      createDiscVertices: createDiscVertices,
      deindexVertices: deindexVertices,
      flattenNormals: flattenNormals,
      makeRandomVertexColors: makeRandomVertexColors,
      reorientDirections: reorientDirections,
      reorientNormals: reorientNormals,
      reorientPositions: reorientPositions,
      reorientVertices: reorientVertices,
      concatVertices: concatVertices,
      duplicateVertices: duplicateVertices
    });

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /**
     * Gets the gl version as a number
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @return {number} version of gl
     * @private
     */
    //function getVersionAsNumber(gl) {
    //  return parseFloat(gl.getParameter(gl.VERSION).substr(6));
    //}

    /**
     * Check if context is WebGL 2.0
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @return {bool} true if it's WebGL 2.0
     * @memberOf module:twgl
     */
    function isWebGL2(gl) {
      // This is the correct check but it's slow
      //  return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0") === 0;
      // This might also be the correct check but I'm assuming it's slow-ish
      // return gl instanceof WebGL2RenderingContext;
      return !!gl.texStorage2D;
    }

    /**
     * Gets a string for WebGL enum
     *
     * Note: Several enums are the same. Without more
     * context (which function) it's impossible to always
     * give the correct enum. As it is, for matching values
     * it gives all enums. Checking the WebGL2RenderingContext
     * that means
     *
     *      0     = ZERO | POINT | NONE | NO_ERROR
     *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT
     *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB
     *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING
     *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING
     *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING
     *
     * It's also not useful for bits really unless you pass in individual bits.
     * In other words
     *
     *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;
     *     twgl.glEnumToString(gl, bits);  // not going to work
     *
     * Note that some enums only exist on extensions. If you
     * want them to show up you need to pass the extension at least
     * once. For example
     *
     *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');
     *     if (ext) {
     *        twgl.glEnumToString(ext, 0);  // just prime the function
     *
     *        ..later..
     *
     *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;
     *        console.log(twgl.glEnumToString(gl, internalFormat));
     *
     * Notice I didn't have to pass the extension the second time. This means
     * you can have place that generically gets an enum for texture formats for example.
     * and as long as you primed the function with the extensions
     *
     * If you're using `twgl.addExtensionsToContext` to enable your extensions
     * then twgl will automatically get the extension's enums.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object
     * @param {number} value the value of the enum you want to look up.
     * @return {string} enum string or hex value
     * @memberOf module:twgl
     * @function glEnumToString
     */
    const glEnumToString = (function() {
      const haveEnumsForType = {};
      const enums = {};

      function addEnums(gl) {
        const type = gl.constructor.name;
        if (!haveEnumsForType[type]) {
          for (const key in gl) {
            if (typeof gl[key] === 'number') {
              const existing = enums[gl[key]];
              enums[gl[key]] = existing ? `${existing} | ${key}` : key;
            }
          }
          haveEnumsForType[type] = true;
        }
      }

      return function glEnumToString(gl, value) {
        addEnums(gl);
        return enums[value] || ("0x" + value.toString(16));
      };
    }());

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    const defaults$1$1 = {
      textureColor: new Uint8Array([128, 192, 255, 255]),
      textureOptions: {},
      crossOrigin: undefined,
    };
    const isArrayBuffer$1 = isArrayBuffer;

    // Should we make this on demand?
    let s_ctx;
    function getShared2DContext() {
      s_ctx = s_ctx ||
          ((typeof document !== 'undefined' && document.createElement)
            ? document.createElement("canvas").getContext("2d")
            : null);
      return s_ctx;
    }

    // NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but
    //       not only does Firefox NOT support it but Firefox freezes immediately
    //       if you try to create one instead of just returning null and continuing.
    //  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext("2d"));  // OffscreenCanvas may not support 2d

    // NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2
    // we can use the various unpack settings. Otherwise we could try using
    // the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap
    // is async and the current TWGL code expects a non-Async result though that
    // might not be a problem. ImageBitmap though is not available in Edge or Safari
    // as of 2018-01-02

    /* PixelFormat */
    const ALPHA                          = 0x1906;
    const RGB                            = 0x1907;
    const RGBA                           = 0x1908;
    const LUMINANCE                      = 0x1909;
    const LUMINANCE_ALPHA                = 0x190A;
    const DEPTH_COMPONENT                = 0x1902;
    const DEPTH_STENCIL                  = 0x84F9;

    /* TextureWrapMode */
    // const REPEAT                         = 0x2901;
    // const MIRRORED_REPEAT                = 0x8370;
    const CLAMP_TO_EDGE                  = 0x812f;

    /* TextureMagFilter */
    const NEAREST                        = 0x2600;
    const LINEAR                         = 0x2601;

    /* TextureMinFilter */
    // const NEAREST_MIPMAP_NEAREST         = 0x2700;
    // const LINEAR_MIPMAP_NEAREST          = 0x2701;
    // const NEAREST_MIPMAP_LINEAR          = 0x2702;
    // const LINEAR_MIPMAP_LINEAR           = 0x2703;

    /* Texture Target */
    const TEXTURE_2D                     = 0x0de1;
    const TEXTURE_CUBE_MAP               = 0x8513;
    const TEXTURE_3D                     = 0x806f;
    const TEXTURE_2D_ARRAY               = 0x8c1a;

    /* Cubemap Targets */
    const TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
    const TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
    const TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
    const TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
    const TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
    const TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;

    /* Texture Parameters */
    const TEXTURE_MIN_FILTER             = 0x2801;
    const TEXTURE_MAG_FILTER             = 0x2800;
    const TEXTURE_WRAP_S                 = 0x2802;
    const TEXTURE_WRAP_T                 = 0x2803;
    const TEXTURE_WRAP_R                 = 0x8072;
    const TEXTURE_MIN_LOD                = 0x813a;
    const TEXTURE_MAX_LOD                = 0x813b;
    const TEXTURE_BASE_LEVEL             = 0x813c;
    const TEXTURE_MAX_LEVEL              = 0x813d;


    /* Pixel store */
    const UNPACK_ALIGNMENT                   = 0x0cf5;
    const UNPACK_ROW_LENGTH                  = 0x0cf2;
    const UNPACK_IMAGE_HEIGHT                = 0x806e;
    const UNPACK_SKIP_PIXELS                 = 0x0cf4;
    const UNPACK_SKIP_ROWS                   = 0x0cf3;
    const UNPACK_SKIP_IMAGES                 = 0x806d;
    const UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
    const UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;
    const UNPACK_FLIP_Y_WEBGL                = 0x9240;

    const R8                           = 0x8229;
    const R8_SNORM                     = 0x8F94;
    const R16F                         = 0x822D;
    const R32F                         = 0x822E;
    const R8UI                         = 0x8232;
    const R8I                          = 0x8231;
    const RG16UI                       = 0x823A;
    const RG16I                        = 0x8239;
    const RG32UI                       = 0x823C;
    const RG32I                        = 0x823B;
    const RG8                          = 0x822B;
    const RG8_SNORM                    = 0x8F95;
    const RG16F                        = 0x822F;
    const RG32F                        = 0x8230;
    const RG8UI                        = 0x8238;
    const RG8I                         = 0x8237;
    const R16UI                        = 0x8234;
    const R16I                         = 0x8233;
    const R32UI                        = 0x8236;
    const R32I                         = 0x8235;
    const RGB8                         = 0x8051;
    const SRGB8                        = 0x8C41;
    const RGB565                       = 0x8D62;
    const RGB8_SNORM                   = 0x8F96;
    const R11F_G11F_B10F               = 0x8C3A;
    const RGB9_E5                      = 0x8C3D;
    const RGB16F                       = 0x881B;
    const RGB32F                       = 0x8815;
    const RGB8UI                       = 0x8D7D;
    const RGB8I                        = 0x8D8F;
    const RGB16UI                      = 0x8D77;
    const RGB16I                       = 0x8D89;
    const RGB32UI                      = 0x8D71;
    const RGB32I                       = 0x8D83;
    const RGBA8                        = 0x8058;
    const SRGB8_ALPHA8                 = 0x8C43;
    const RGBA8_SNORM                  = 0x8F97;
    const RGB5_A1                      = 0x8057;
    const RGBA4                        = 0x8056;
    const RGB10_A2                     = 0x8059;
    const RGBA16F                      = 0x881A;
    const RGBA32F                      = 0x8814;
    const RGBA8UI                      = 0x8D7C;
    const RGBA8I                       = 0x8D8E;
    const RGB10_A2UI                   = 0x906F;
    const RGBA16UI                     = 0x8D76;
    const RGBA16I                      = 0x8D88;
    const RGBA32I                      = 0x8D82;
    const RGBA32UI                     = 0x8D70;

    const DEPTH_COMPONENT16            = 0x81A5;
    const DEPTH_COMPONENT24            = 0x81A6;
    const DEPTH_COMPONENT32F           = 0x8CAC;
    const DEPTH32F_STENCIL8            = 0x8CAD;
    const DEPTH24_STENCIL8             = 0x88F0;

    /* DataType */
    const BYTE$2                         = 0x1400;
    const UNSIGNED_BYTE$2                = 0x1401;
    const SHORT$2                        = 0x1402;
    const UNSIGNED_SHORT$2               = 0x1403;
    const INT$2                          = 0x1404;
    const UNSIGNED_INT$2                 = 0x1405;
    const FLOAT$2                        = 0x1406;
    const UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;
    const UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;
    const UNSIGNED_SHORT_5_6_5$1         = 0x8363;
    const HALF_FLOAT$1                   = 0x140B;
    const HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(
    const UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;
    const UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;
    const UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;
    const FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;
    const UNSIGNED_INT_24_8$1            = 0x84FA;

    const RG                           = 0x8227;
    const RG_INTEGER                   = 0x8228;
    const RED                          = 0x1903;
    const RED_INTEGER                  = 0x8D94;
    const RGB_INTEGER                  = 0x8D98;
    const RGBA_INTEGER                 = 0x8D99;

    /**
     * @typedef {Object} TextureFormatDetails
     * @property {number} textureFormat format to pass texImage2D and similar functions.
     * @property {boolean} colorRenderable true if you can render to this format of texture.
     * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.
     * @property {number[]} type Array of possible types you can pass to texImage2D and similar function
     * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element
     * @private
     */

    let s_textureInternalFormatInfo;
    function getTextureInternalFormatInfo(internalFormat) {
      if (!s_textureInternalFormatInfo) {
        // NOTE: these properties need unique names so we can let Uglify mangle the name.
        const t = {};
        // unsized formats
        t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
        t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
        t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
        t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };
        t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };

        // sized formats
        t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
        t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };
        t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };
        t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
        t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
        t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };
        t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };
        t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };
        t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
        t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };
        t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
        t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };
        t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };
        t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };
        t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
        t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };
        t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };
        t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };
        t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };
        t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };
        t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
        t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
        t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };
        t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };
        t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };
        t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };
        t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };
        t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };
        t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
        t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };
        t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };
        t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };
        t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };
        t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };
        t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
        t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
        t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };
        t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };
        t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };
        t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
        t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };
        t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };
        t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
        t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };
        t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
        t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };
        t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };
        t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };
        t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };
        // Sized Internal
        t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };
        t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
        t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
        t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };
        t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };

        Object.keys(t).forEach(function(internalFormat) {
          const info = t[internalFormat];
          info.bytesPerElementMap = {};
          info.bytesPerElement.forEach(function(bytesPerElement, ndx) {
            const type = info.type[ndx];
            info.bytesPerElementMap[type] = bytesPerElement;
          });
        });
        s_textureInternalFormatInfo = t;
      }
      return s_textureInternalFormatInfo[internalFormat];
    }

    /**
     * Gets the number of bytes per element for a given internalFormat / type
     * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
     * @param {number} type The type parameter for texImage2D etc..
     * @return {number} the number of bytes per element for the given internalFormat, type combo
     * @memberOf module:twgl/textures
     */
    function getBytesPerElementForInternalFormat(internalFormat, type) {
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      const bytesPerElement = info.bytesPerElementMap[type];
      if (bytesPerElement === undefined) {
        throw "unknown internal format";
      }
      return bytesPerElement;
    }

    /**
     * Info related to a specific texture internalFormat as returned
     * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.
     *
     * @typedef {Object} TextureFormatInfo
     * @property {number} format Format to pass to texImage2D and related functions
     * @property {number} type Type to pass to texImage2D and related functions
     * @memberOf module:twgl/textures
     */

    /**
     * Gets the format and type for a given internalFormat
     *
     * @param {number} internalFormat The internal format
     * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,
     * @memberOf module:twgl/textures
     */
    function getFormatAndTypeForInternalFormat(internalFormat) {
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      return {
        format: info.textureFormat,
        type: info.type[0],
      };
    }

    /**
     * Returns true if value is power of 2
     * @param {number} value number to check.
     * @return true if value is power of 2
     * @private
     */
    function isPowerOf2(value) {
      return (value & (value - 1)) === 0;
    }

    /**
     * Gets whether or not we can generate mips for the given
     * internal format.
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {number} width The width parameter from texImage2D etc..
     * @param {number} height The height parameter from texImage2D etc..
     * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
     * @return {boolean} true if we can generate mips
     * @memberOf module:twgl/textures
     */
    function canGenerateMipmap(gl, width, height, internalFormat) {
      if (!isWebGL2(gl)) {
        return isPowerOf2(width) && isPowerOf2(height);
      }
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      return info.colorRenderable && info.textureFilterable;
    }

    /**
     * Gets whether or not we can generate mips for the given format
     * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
     * @return {boolean} true if we can generate mips
     * @memberOf module:twgl/textures
     */
    function canFilter(internalFormat) {
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      return info.textureFilterable;
    }

    /**
     * Gets the texture type for a given array type.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @return {number} the gl texture type
     * @private
     */
    function getTextureTypeForArrayType(gl, src, defaultType) {
      if (isArrayBuffer$1(src)) {
        return getGLTypeForTypedArray(src);
      }
      return defaultType || UNSIGNED_BYTE$2;
    }

    function guessDimensions(gl, target, width, height, numElements) {
      if (numElements % 1 !== 0) {
        throw "can't guess dimensions";
      }
      if (!width && !height) {
        const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));
        if (size % 1 === 0) {
          width = size;
          height = size;
        } else {
          width = numElements;
          height = 1;
        }
      } else if (!height) {
        height = numElements / width;
        if (height % 1) {
          throw "can't guess dimensions";
        }
      } else if (!width) {
        width = numElements / height;
        if (width % 1) {
          throw "can't guess dimensions";
        }
      }
      return {
        width: width,
        height: height,
      };
    }

    /**
     * A function to generate the source for a texture.
     * @callback TextureFunc
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {module:twgl.TextureOptions} options the texture options
     * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.
     * @memberOf module:twgl
     */

    /**
     * Texture options passed to most texture functions. Each function will use whatever options
     * are appropriate for its needs. This lets you pass the same options to all functions.
     *
     * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,
     * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.
     *
     * @typedef {Object} TextureOptions
     * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.
     * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.
     * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.
     * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.
     * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .
     * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`
     *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.
     * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`
     * @property {number} [minMag] both the min and mag filter settings.
     * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`
     * @property {number} [format] format for texture. Defaults to `gl.RGBA`.
     * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`
     *     is ArrayBufferView defaults to type that matches ArrayBufferView type.
     * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube
     * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
     * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
     * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
     * @property {number} [minLod] TEXTURE_MIN_LOD setting
     * @property {number} [maxLod] TEXTURE_MAX_LOD setting
     * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting
     * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting
     * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.
     * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.
     *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`
     *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink
     * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.
     *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
     *     the current setting for specific textures.
     * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.
     *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
     *     the current setting for specific textures.
     * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.
     *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
     *     the current setting for specific textures.
     * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and
     *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above
     *    then then `auto` is assumed to be `false` unless explicity set to `true`.
     * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is
     *
     *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
     *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
     *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
     *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
     *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
     *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]
     *
     * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture
     *
     *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable
     *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.
     *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.
     *    The pieces will be uploaded in `cubeFaceOrder`
     *
     *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.
     *
     *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture
     *    and will be scaled to the specified width and height OR to the size of the first image that loads.
     *
     *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,
     *    `HTMLCanvasElement`, `HTMLVideoElement`.
     *
     *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is
     *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`
     *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided
     *    by 6. Then
     *
     *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height
     *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.
     *
     *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.
     *
     * If `number[]` will be converted to `type`.
     *
     * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.
     * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`
     * an array etc...
     *
     * If `src` is undefined then an empty texture will be created of size `width` by `height`.
     *
     * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.
     *    default: undefined. Also see {@link module:twgl.setDefaults}.
     *
     * @memberOf module:twgl
     */

    // NOTE: While querying GL is considered slow it's not remotely as slow
    // as uploading a texture. On top of that you're unlikely to call this in
    // a perf critical loop. Even if upload a texture every frame that's unlikely
    // to be more than 1 or 2 textures a frame. In other words, the benefits of
    // making the API easy to use outweigh any supposed perf benefits
    //
    // Also note I get that having one global of these is bad practice.
    // As long as it's used correctly it means no garbage which probably
    // doesn't matter when dealing with textures but old habits die hard.
    const lastPackState = {};

    /**
     * Saves any packing state that will be set based on the options.
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @private
     */
    function savePackState(gl, options) {
      if (options.colorspaceConversion !== undefined) {
        lastPackState.colorspaceConversion = gl.getParameter(UNPACK_COLORSPACE_CONVERSION_WEBGL);
        gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);
      }
      if (options.premultiplyAlpha !== undefined) {
        lastPackState.premultiplyAlpha = gl.getParameter(UNPACK_PREMULTIPLY_ALPHA_WEBGL);
        gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);
      }
      if (options.flipY !== undefined) {
        lastPackState.flipY = gl.getParameter(UNPACK_FLIP_Y_WEBGL);
        gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);
      }
    }

    /**
     * Restores any packing state that was set based on the options.
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @private
     */
    function restorePackState(gl, options) {
      if (options.colorspaceConversion !== undefined) {
        gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);
      }
      if (options.premultiplyAlpha !== undefined) {
        gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);
      }
      if (options.flipY !== undefined) {
        gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);
      }
    }

    /**
     * Saves state related to data size
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @private
     */
    function saveSkipState(gl) {
      lastPackState.unpackAlignment   = gl.getParameter(UNPACK_ALIGNMENT);
      if (isWebGL2(gl)) {
        lastPackState.unpackRowLength   = gl.getParameter(UNPACK_ROW_LENGTH);
        lastPackState.unpackImageHeight = gl.getParameter(UNPACK_IMAGE_HEIGHT);
        lastPackState.unpackSkipPixels  = gl.getParameter(UNPACK_SKIP_PIXELS);
        lastPackState.unpackSkipRows    = gl.getParameter(UNPACK_SKIP_ROWS);
        lastPackState.unpackSkipImages  = gl.getParameter(UNPACK_SKIP_IMAGES);
      }
    }

    /**
     * Restores state related to data size
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @private
     */
    function restoreSkipState(gl) {
      gl.pixelStorei(UNPACK_ALIGNMENT,    lastPackState.unpackAlignment);
      if (isWebGL2(gl)) {
        gl.pixelStorei(UNPACK_ROW_LENGTH,   lastPackState.unpackRowLength);
        gl.pixelStorei(UNPACK_IMAGE_HEIGHT, lastPackState.unpackImageHeight);
        gl.pixelStorei(UNPACK_SKIP_PIXELS,  lastPackState.unpackSkipPixels);
        gl.pixelStorei(UNPACK_SKIP_ROWS,    lastPackState.unpackSkipRows);
        gl.pixelStorei(UNPACK_SKIP_IMAGES,  lastPackState.unpackSkipImages);
      }
    }


    /**
     * Sets the parameters of a texture or sampler
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {number|WebGLSampler} target texture target or sampler
     * @param {function()} parameteriFn texParameteri or samplerParameteri fn
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @private
     */
    function setTextureSamplerParameters(gl, target, parameteriFn, options) {
      if (options.minMag) {
        parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);
        parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);
      }
      if (options.min) {
        parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);
      }
      if (options.mag) {
        parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);
      }
      if (options.wrap) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);
        parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);
        if (target === TEXTURE_3D || isSampler(gl, target)) {
          parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);
        }
      }
      if (options.wrapR) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);
      }
      if (options.wrapS) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);
      }
      if (options.wrapT) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);
      }
      if (options.minLod) {
        parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);
      }
      if (options.maxLod) {
        parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);
      }
      if (options.baseLevel) {
        parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);
      }
      if (options.maxLevel) {
        parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);
      }
    }

    /**
     * Sets the texture parameters of a texture.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     */
    function setTextureParameters(gl, tex, options) {
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      setTextureSamplerParameters(gl, target, gl.texParameteri, options);
    }

    /**
     * Makes a 1x1 pixel
     * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.
     * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values
     * @return {Uint8Array} Unit8Array with color.
     * @private
     */
    function make1Pixel(color) {
      color = color || defaults$1$1.textureColor;
      if (isArrayBuffer$1(color)) {
        return color;
      }
      return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
    }

    /**
     * Sets filtering or generates mips for texture based on width or height
     * If width or height is not passed in uses `options.width` and//or `options.height`
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @param {number} [width] width of texture
     * @param {number} [height] height of texture
     * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..
     * @memberOf module:twgl/textures
     */
    function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {
      options = options || defaults$1$1.textureOptions;
      internalFormat = internalFormat || RGBA;
      const target = options.target || TEXTURE_2D;
      width = width || options.width;
      height = height || options.height;
      gl.bindTexture(target, tex);
      if (canGenerateMipmap(gl, width, height, internalFormat)) {
        gl.generateMipmap(target);
      } else {
        const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;
        gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);
        gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);
        gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
        gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
      }
    }

    function shouldAutomaticallySetTextureFilteringForSize(options) {
      return options.auto === true || (options.auto === undefined && options.level === undefined);
    }

    /**
     * Gets an array of cubemap face enums
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @return {number[]} cubemap face enums
     * @private
     */
    function getCubeFaceOrder(gl, options) {
      options = options || {};
      return options.cubeFaceOrder || [
          TEXTURE_CUBE_MAP_POSITIVE_X,
          TEXTURE_CUBE_MAP_NEGATIVE_X,
          TEXTURE_CUBE_MAP_POSITIVE_Y,
          TEXTURE_CUBE_MAP_NEGATIVE_Y,
          TEXTURE_CUBE_MAP_POSITIVE_Z,
          TEXTURE_CUBE_MAP_NEGATIVE_Z,
        ];
    }

    /**
     * @typedef {Object} FaceInfo
     * @property {number} face gl enum for texImage2D
     * @property {number} ndx face index (0 - 5) into source data
     * @ignore
     */

    /**
     * Gets an array of FaceInfos
     * There's a bug in some NVidia drivers that will crash the driver if
     * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take
     * the user's desired order from his faces to WebGL and make sure we
     * do the faces in WebGL order
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but
     *    it's needed internally to sort the array of `ndx` properties by `face`.
     * @private
     */
    function getCubeFacesWithNdx(gl, options) {
      const faces = getCubeFaceOrder(gl, options);
      // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(
      const facesWithNdx = faces.map(function(face, ndx) {
        return { face: face, ndx: ndx };
      });
      facesWithNdx.sort(function(a, b) {
        return a.face - b.face;
      });
      return facesWithNdx;
    }

    /**
     * Set a texture from the contents of an element. Will also set
     * texture filtering or generate mips based on the dimensions of the element
     * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will
     * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {HTMLElement} element a canvas, img, or video element.
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     * @kind function
     */
    function setTextureFromElement(gl, tex, element, options) {
      options = options || defaults$1$1.textureOptions;
      const target = options.target || TEXTURE_2D;
      const level = options.level || 0;
      let width = element.width;
      let height = element.height;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || formatType.type;
      savePackState(gl, options);
      gl.bindTexture(target, tex);
      if (target === TEXTURE_CUBE_MAP) {
        // guess the parts
        const imgWidth  = element.width;
        const imgHeight = element.height;
        let size;
        let slices;
        if (imgWidth / 6 === imgHeight) {
          // It's 6x1
          size = imgHeight;
          slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];
        } else if (imgHeight / 6 === imgWidth) {
          // It's 1x6
          size = imgWidth;
          slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];
        } else if (imgWidth / 3 === imgHeight / 2) {
          // It's 3x2
          size = imgWidth / 3;
          slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];
        } else if (imgWidth / 2 === imgHeight / 3) {
          // It's 2x3
          size = imgWidth / 2;
          slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];
        } else {
          throw "can't figure out cube map from element: " + (element.src ? element.src : element.nodeName);
        }
        const ctx = getShared2DContext();
        if (ctx) {
          ctx.canvas.width = size;
          ctx.canvas.height = size;
          width = size;
          height = size;
          getCubeFacesWithNdx(gl, options).forEach(function(f) {
            const xOffset = slices[f.ndx * 2 + 0] * size;
            const yOffset = slices[f.ndx * 2 + 1] * size;
            ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);
            gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);
          });
          // Free up the canvas memory
          ctx.canvas.width = 1;
          ctx.canvas.height = 1;
        } else if (typeof createImageBitmap !== 'undefined') {
          // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's
          // note lossy? (alpha is not premultiplied? although I'm not sure what
          width = size;
          height = size;
          getCubeFacesWithNdx(gl, options).forEach(function(f) {
            const xOffset = slices[f.ndx * 2 + 0] * size;
            const yOffset = slices[f.ndx * 2 + 1] * size;
            // We can't easily use a default texture color here as it would have to match
            // the type across all faces where as with a 2D one there's only one face
            // so we're replacing everything all at once. It also has to be the correct size.
            // On the other hand we need all faces to be the same size so as one face loads
            // the rest match else the texture will be un-renderable.
            gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);
            createImageBitmap(element, xOffset, yOffset, size, size, {
              premultiplyAlpha: 'none',
              colorSpaceConversion: 'none',
            })
            .then(function(imageBitmap) {
              savePackState(gl, options);
              gl.bindTexture(target, tex);
              gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);
              restorePackState(gl, options);
              if (shouldAutomaticallySetTextureFilteringForSize(options)) {
                setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
              }
            });
          });
        }
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        const smallest = Math.min(element.width, element.height);
        const largest = Math.max(element.width, element.height);
        const depth = largest / smallest;
        if (depth % 1 !== 0) {
          throw "can not compute 3D dimensions of element";
        }
        const xMult = element.width  === largest ? 1 : 0;
        const yMult = element.height === largest ? 1 : 0;
        saveSkipState(gl);
        gl.pixelStorei(UNPACK_ALIGNMENT, 1);
        gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);
        gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
        gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
        gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);
        for (let d = 0; d < depth; ++d) {
          const srcX = d * smallest * xMult;
          const srcY = d * smallest * yMult;
          gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);
          gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);
          gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);
        }
        restoreSkipState(gl);
      } else {
        gl.texImage2D(target, level, internalFormat, format, type, element);
      }
      restorePackState(gl, options);
      if (shouldAutomaticallySetTextureFilteringForSize(options)) {
        setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
      }
      setTextureParameters(gl, tex, options);
    }

    function noop() {
    }

    /**
     * Checks whether the url's origin is the same so that we can set the `crossOrigin`
     * @param {string} url url to image
     * @returns {boolean} true if the window's origin is the same as image's url
     * @private
     */
    function urlIsSameOrigin(url) {
      if (typeof document !== 'undefined') {
        // for IE really
        const a = document.createElement('a');
        a.href = url;
        return a.hostname === location.hostname &&
               a.port     === location.port &&
               a.protocol === location.protocol;
      } else {
        const localOrigin = (new URL(location.href)).origin;
        const urlOrigin = (new URL(url, location.href)).origin;
        return urlOrigin === localOrigin;
      }
    }

    function setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {
      return crossOrigin === undefined && !urlIsSameOrigin(url)
         ? 'anonymous'
         : crossOrigin;
    }

    /**
     * Loads an image
     * @param {string} url url to image
     * @param {string} crossOrigin
     * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
     *     if there was an error
     * @return {HTMLImageElement} the image being loaded.
     * @private
     */
    function loadImage(url, crossOrigin, callback) {
      callback = callback || noop;
      let img;
      crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1$1.crossOrigin;
      crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);
      if (typeof Image !== 'undefined') {
        img = new Image();
        if (crossOrigin !== undefined) {
          img.crossOrigin = crossOrigin;
        }

        const clearEventHandlers = function clearEventHandlers() {
          img.removeEventListener('error', onError);  // eslint-disable-line
          img.removeEventListener('load', onLoad);  // eslint-disable-line
          img = null;
        };

        const onError = function onError() {
          const msg = "couldn't load image: " + url;
          error(msg);
          callback(msg, img);
          clearEventHandlers();
        };

        const onLoad = function onLoad() {
          callback(null, img);
          clearEventHandlers();
        };

        img.addEventListener('error', onError);
        img.addEventListener('load', onLoad);
        img.src = url;
        return img;
      } else if (typeof ImageBitmap !== 'undefined') {
        let err;
        let bm;
        const cb = function cb() {
          callback(err, bm);
        };

        const options = {};
        if (crossOrigin) {
          options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin
        }
        fetch(url, options).then(function(response) {
          if (!response.ok) {
            throw response;
          }
          return response.blob();
        }).then(function(blob) {
          return createImageBitmap(blob, {
            premultiplyAlpha: 'none',
            colorSpaceConversion: 'none',
          });
        }).then(function(bitmap) {
          // not sure if this works. We don't want
          // to catch the user's error. So, call
          // the callback in a timeout so we're
          // not in this scope inside the promise.
          bm = bitmap;
          setTimeout(cb);
        }).catch(function(e) {
          err = e;
          setTimeout(cb);
        });
        img = null;
      }
      return img;
    }

    /**
     * check if object is a TexImageSource
     *
     * @param {Object} obj Object to test
     * @return {boolean} true if object is a TexImageSource
     * @private
     */
    function isTexImageSource(obj) {
      return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||
             (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||
             (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);
    }

    /**
     * if obj is an TexImageSource then just
     * uses it otherwise if obj is a string
     * then load it first.
     *
     * @param {string|TexImageSource} obj
     * @param {string} crossOrigin
     * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
     *     if there was an error
     * @private
     */
    function loadAndUseImage(obj, crossOrigin, callback) {
      if (isTexImageSource(obj)) {
        setTimeout(function() {
          callback(null, obj);
        });
        return obj;
      }

      return loadImage(obj, crossOrigin, callback);
    }

    /**
     * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set
     * the default texture color is used which can be set by calling `setDefaultTextureColor`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     */
    function setTextureTo1PixelColor(gl, tex, options) {
      options = options || defaults$1$1.textureOptions;
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      if (options.color === false) {
        return;
      }
      // Assume it's a URL
      // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.
      const color = make1Pixel(options.color);
      if (target === TEXTURE_CUBE_MAP) {
        for (let ii = 0; ii < 6; ++ii) {
          gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
        }
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
      } else {
        gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
      }
    }

    /**
     * The src image(s) used to create a texture.
     *
     * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}
     * you can pass in urls for images to load into the textures. If it's a single url
     * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap
     * this will be a corresponding array of images for the cubemap.
     *
     * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc
     * @memberOf module:twgl
     */

    /**
     * A callback for when an image finished downloading and been uploaded into a texture
     * @callback TextureReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {WebGLTexture} texture the texture.
     * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture
     * @memberOf module:twgl
     */

    /**
     * A callback for when all images have finished downloading and been uploaded into their respective textures
     * @callback TexturesReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.
     * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.
     * @memberOf module:twgl
     */

    /**
     * A callback for when an image finished downloading and been uploaded into a texture
     * @callback CubemapReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {WebGLTexture} tex the texture.
     * @param {HTMLImageElement[]} imgs the images for each face.
     * @memberOf module:twgl
     */

    /**
     * A callback for when an image finished downloading and been uploaded into a texture
     * @callback ThreeDReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {WebGLTexture} tex the texture.
     * @param {HTMLImageElement[]} imgs the images for each slice.
     * @memberOf module:twgl
     */

    /**
     * Loads a texture from an image from a Url as specified in `options.src`
     * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is
     * immediately useable. It will be updated with the contents of the image once the image has finished
     * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will
     *    be non null if there was an error.
     * @return {HTMLImageElement} the image being downloaded.
     * @memberOf module:twgl/textures
     */
    function loadTextureFromUrl(gl, tex, options, callback) {
      callback = callback || noop;
      options = options || defaults$1$1.textureOptions;
      setTextureTo1PixelColor(gl, tex, options);
      // Because it's async we need to copy the options.
      options = Object.assign({}, options);
      const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {
        if (err) {
          callback(err, tex, img);
        } else {
          setTextureFromElement(gl, tex, img, options);
          callback(null, tex, img);
        }
      });
      return img;
    }

    /**
     * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color
     * so that it is usable immediately unless `option.color === false`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will
     *    be non null if there was an error.
     * @memberOf module:twgl/textures
     */
    function loadCubemapFromUrls(gl, tex, options, callback) {
      callback = callback || noop;
      const urls = options.src;
      if (urls.length !== 6) {
        throw "there must be 6 urls for a cubemap";
      }
      const level = options.level || 0;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || UNSIGNED_BYTE$2;
      const target = options.target || TEXTURE_2D;
      if (target !== TEXTURE_CUBE_MAP) {
        throw "target must be TEXTURE_CUBE_MAP";
      }
      setTextureTo1PixelColor(gl, tex, options);
      // Because it's async we need to copy the options.
      options = Object.assign({}, options);
      let numToLoad = 6;
      const errors = [];
      const faces = getCubeFaceOrder(gl, options);
      let imgs;  // eslint-disable-line

      function uploadImg(faceTarget) {
        return function(err, img) {
          --numToLoad;
          if (err) {
            errors.push(err);
          } else {
            if (img.width !== img.height) {
              errors.push("cubemap face img is not a square: " + img.src);
            } else {
              savePackState(gl, options);
              gl.bindTexture(target, tex);

              // So assuming this is the first image we now have one face that's img sized
              // and 5 faces that are 1x1 pixel so size the other faces
              if (numToLoad === 5) {
                // use the default order
                getCubeFaceOrder().forEach(function(otherTarget) {
                  // Should we re-use the same face or a color?
                  gl.texImage2D(otherTarget, level, internalFormat, format, type, img);
                });
              } else {
                gl.texImage2D(faceTarget, level, internalFormat, format, type, img);
              }

              restorePackState(gl, options);
              if (shouldAutomaticallySetTextureFilteringForSize(options)) {
                gl.generateMipmap(target);
              }
            }
          }

          if (numToLoad === 0) {
            callback(errors.length ? errors : undefined, tex, imgs);
          }
        };
      }

      imgs = urls.map(function(url, ndx) {
        return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));
      });
    }

    /**
     * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.
     * Will set the texture to a 1x1 pixel color
     * so that it is usable immediately unless `option.color === false`.
     *
     * If the width and height is not specified the width and height of the first
     * image loaded will be used. Note that since images are loaded async
     * which image downloads first is unknown.
     *
     * If an image is not the same size as the width and height it will be scaled
     * to that width and height.
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will
     *    be non null if there was an error.
     * @memberOf module:twgl/textures
     */
    function loadSlicesFromUrls(gl, tex, options, callback) {
      callback = callback || noop;
      const urls = options.src;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || UNSIGNED_BYTE$2;
      const target = options.target || TEXTURE_2D_ARRAY;
      if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {
        throw "target must be TEXTURE_3D or TEXTURE_2D_ARRAY";
      }
      setTextureTo1PixelColor(gl, tex, options);
      // Because it's async we need to copy the options.
      options = Object.assign({}, options);
      let numToLoad = urls.length;
      const errors = [];
      let imgs;  // eslint-disable-line
      const level = options.level || 0;
      let width = options.width;
      let height = options.height;
      const depth = urls.length;
      let firstImage = true;

      function uploadImg(slice) {
        return function(err, img) {
          --numToLoad;
          if (err) {
            errors.push(err);
          } else {
            savePackState(gl, options);
            gl.bindTexture(target, tex);

            if (firstImage) {
              firstImage = false;
              width = options.width || img.width;
              height = options.height || img.height;
              gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);

              // put it in every slice otherwise some slices will be 0,0,0,0
              for (let s = 0; s < depth; ++s) {
                gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);
              }
            } else {
              let src = img;
              let ctx;
              if (img.width !== width || img.height !== height) {
                // Size the image to fix
                ctx = getShared2DContext();
                src = ctx.canvas;
                ctx.canvas.width = width;
                ctx.canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
              }

              gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);

              // free the canvas memory
              if (ctx && src === ctx.canvas) {
                ctx.canvas.width = 0;
                ctx.canvas.height = 0;
              }
            }

            restorePackState(gl, options);
            if (shouldAutomaticallySetTextureFilteringForSize(options)) {
              gl.generateMipmap(target);
            }
          }

          if (numToLoad === 0) {
            callback(errors.length ? errors : undefined, tex, imgs);
          }
        };
      }

      imgs = urls.map(function(url, ndx) {
        return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));
      });
    }

    /**
     * Sets a texture from an array or typed array. If the width or height is not provided will attempt to
     * guess the size. See {@link module:twgl.TextureOptions}.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     */
    function setTextureFromArray(gl, tex, src, options) {
      options = options || defaults$1$1.textureOptions;
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      let width = options.width;
      let height = options.height;
      let depth = options.depth;
      const level = options.level || 0;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
      if (!isArrayBuffer$1(src)) {
        const Type = getTypedArrayTypeForGLType(type);
        src = new Type(src);
      } else if (src instanceof Uint8ClampedArray) {
        src = new Uint8Array(src.buffer);
      }

      const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);
      const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?
      if (numElements % 1) {
        throw "length wrong size for format: " + glEnumToString(gl, format);
      }
      let dimensions;
      if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        if (!width && !height && !depth) {
          const size = Math.cbrt(numElements);
          if (size % 1 !== 0) {
            throw "can't guess cube size of array of numElements: " + numElements;
          }
          width = size;
          height = size;
          depth = size;
        } else if (width && (!height || !depth)) {
          dimensions = guessDimensions(gl, target, height, depth, numElements / width);
          height = dimensions.width;
          depth = dimensions.height;
        } else if (height && (!width || !depth)) {
          dimensions = guessDimensions(gl, target, width, depth, numElements / height);
          width = dimensions.width;
          depth = dimensions.height;
        } else {
          dimensions = guessDimensions(gl, target, width, height, numElements / depth);
          width = dimensions.width;
          height = dimensions.height;
        }
      } else {
        dimensions = guessDimensions(gl, target, width, height, numElements);
        width = dimensions.width;
        height = dimensions.height;
      }
      saveSkipState(gl);
      gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);
      savePackState(gl, options);
      if (target === TEXTURE_CUBE_MAP) {
        const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;
        const faceSize = numElements / 6 * elementsPerElement;

        getCubeFacesWithNdx(gl, options).forEach(f => {
          const offset = faceSize * f.ndx;
          const data = src.subarray(offset, offset + faceSize);
          gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);
        });
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);
      } else {
        gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);
      }
      restorePackState(gl, options);
      restoreSkipState(gl);
      return {
        width: width,
        height: height,
        depth: depth,
        type: type,
      };
    }

    /**
     * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.
     * You must set `options.width` and `options.height`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @memberOf module:twgl/textures
     */
    function setEmptyTexture(gl, tex, options) {
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      const level = options.level || 0;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || formatType.type;
      savePackState(gl, options);
      if (target === TEXTURE_CUBE_MAP) {
        for (let ii = 0; ii < 6; ++ii) {
          gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);
        }
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);
      } else {
        gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);
      }
      restorePackState(gl, options);
    }

    /**
     * Creates a texture based on the options passed in.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.
     * @return {WebGLTexture} the created texture.
     * @memberOf module:twgl/textures
     */
    function createTexture(gl, options, callback) {
      callback = callback || noop;
      options = options || defaults$1$1.textureOptions;
      const tex = gl.createTexture();
      const target = options.target || TEXTURE_2D;
      let width  = options.width  || 1;
      let height = options.height || 1;
      const internalFormat = options.internalFormat || RGBA;
      gl.bindTexture(target, tex);
      if (target === TEXTURE_CUBE_MAP) {
        // this should have been the default for cubemaps :(
        gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
        gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
      }
      let src = options.src;
      if (src) {
        if (typeof src === "function") {
          src = src(gl, options);
        }
        if (typeof (src) === "string") {
          loadTextureFromUrl(gl, tex, options, callback);
        } else if (isArrayBuffer$1(src) ||
                   (Array.isArray(src) && (
                        typeof src[0] === 'number' ||
                        Array.isArray(src[0]) ||
                        isArrayBuffer$1(src[0]))
                   )
                  ) {
          const dimensions = setTextureFromArray(gl, tex, src, options);
          width  = dimensions.width;
          height = dimensions.height;
        } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {
          if (target === TEXTURE_CUBE_MAP) {
            loadCubemapFromUrls(gl, tex, options, callback);
          } else {
            loadSlicesFromUrls(gl, tex, options, callback);
          }
        } else { // if (isTexImageSource(src))
          setTextureFromElement(gl, tex, src, options);
          width  = src.width;
          height = src.height;
        }
      } else {
        setEmptyTexture(gl, tex, options);
      }
      if (shouldAutomaticallySetTextureFilteringForSize(options)) {
        setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
      }
      setTextureParameters(gl, tex, options);
      return tex;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /**
     * Low level shader program related functions
     *
     * You should generally not need to use these functions. They are provided
     * for those cases where you're doing something out of the ordinary
     * and you need lower level access.
     *
     * For backward compatibility they are available at both `twgl.programs` and `twgl`
     * itself
     *
     * See {@link module:twgl} for core functions
     *
     * @module twgl/programs
     */

    const error$1 = error;
    function getElementById(id) {
      return (typeof document !== 'undefined' && document.getElementById)
          ? document.getElementById(id)
          : null;
    }

    const TEXTURE0                       = 0x84c0;

    const ARRAY_BUFFER$1                   = 0x8892;
    const ELEMENT_ARRAY_BUFFER$1           = 0x8893;

    const COMPILE_STATUS                 = 0x8b81;
    const LINK_STATUS                    = 0x8b82;
    const FRAGMENT_SHADER                = 0x8b30;
    const VERTEX_SHADER                  = 0x8b31;
    const SEPARATE_ATTRIBS               = 0x8c8d;

    const ACTIVE_UNIFORMS                = 0x8b86;
    const ACTIVE_ATTRIBUTES              = 0x8b89;
    const TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;
    const ACTIVE_UNIFORM_BLOCKS          = 0x8a36;
    const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;
    const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;
    const UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;
    const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;

    const FLOAT$3                         = 0x1406;
    const FLOAT_VEC2                    = 0x8B50;
    const FLOAT_VEC3                    = 0x8B51;
    const FLOAT_VEC4                    = 0x8B52;
    const INT$3                           = 0x1404;
    const INT_VEC2                      = 0x8B53;
    const INT_VEC3                      = 0x8B54;
    const INT_VEC4                      = 0x8B55;
    const BOOL                          = 0x8B56;
    const BOOL_VEC2                     = 0x8B57;
    const BOOL_VEC3                     = 0x8B58;
    const BOOL_VEC4                     = 0x8B59;
    const FLOAT_MAT2                    = 0x8B5A;
    const FLOAT_MAT3                    = 0x8B5B;
    const FLOAT_MAT4                    = 0x8B5C;
    const SAMPLER_2D                    = 0x8B5E;
    const SAMPLER_CUBE                  = 0x8B60;
    const SAMPLER_3D                    = 0x8B5F;
    const SAMPLER_2D_SHADOW             = 0x8B62;
    const FLOAT_MAT2x3                  = 0x8B65;
    const FLOAT_MAT2x4                  = 0x8B66;
    const FLOAT_MAT3x2                  = 0x8B67;
    const FLOAT_MAT3x4                  = 0x8B68;
    const FLOAT_MAT4x2                  = 0x8B69;
    const FLOAT_MAT4x3                  = 0x8B6A;
    const SAMPLER_2D_ARRAY              = 0x8DC1;
    const SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;
    const SAMPLER_CUBE_SHADOW           = 0x8DC5;
    const UNSIGNED_INT$3                  = 0x1405;
    const UNSIGNED_INT_VEC2             = 0x8DC6;
    const UNSIGNED_INT_VEC3             = 0x8DC7;
    const UNSIGNED_INT_VEC4             = 0x8DC8;
    const INT_SAMPLER_2D                = 0x8DCA;
    const INT_SAMPLER_3D                = 0x8DCB;
    const INT_SAMPLER_CUBE              = 0x8DCC;
    const INT_SAMPLER_2D_ARRAY          = 0x8DCF;
    const UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;
    const UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;
    const UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;
    const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

    const TEXTURE_2D$1                    = 0x0DE1;
    const TEXTURE_CUBE_MAP$1              = 0x8513;
    const TEXTURE_3D$1                    = 0x806F;
    const TEXTURE_2D_ARRAY$1              = 0x8C1A;

    const typeMap = {};

    /**
     * Returns the corresponding bind point for a given sampler type
     */
    function getBindPointForSamplerType(gl, type) {
      return typeMap[type].bindPoint;
    }

    // This kind of sucks! If you could compose functions as in `var fn = gl[name];`
    // this code could be a lot smaller but that is sadly really slow (T_T)

    function floatSetter(gl, location) {
      return function(v) {
        gl.uniform1f(location, v);
      };
    }

    function floatArraySetter(gl, location) {
      return function(v) {
        gl.uniform1fv(location, v);
      };
    }

    function floatVec2Setter(gl, location) {
      return function(v) {
        gl.uniform2fv(location, v);
      };
    }

    function floatVec3Setter(gl, location) {
      return function(v) {
        gl.uniform3fv(location, v);
      };
    }

    function floatVec4Setter(gl, location) {
      return function(v) {
        gl.uniform4fv(location, v);
      };
    }

    function intSetter(gl, location) {
      return function(v) {
        gl.uniform1i(location, v);
      };
    }

    function intArraySetter(gl, location) {
      return function(v) {
        gl.uniform1iv(location, v);
      };
    }

    function intVec2Setter(gl, location) {
      return function(v) {
        gl.uniform2iv(location, v);
      };
    }

    function intVec3Setter(gl, location) {
      return function(v) {
        gl.uniform3iv(location, v);
      };
    }

    function intVec4Setter(gl, location) {
      return function(v) {
        gl.uniform4iv(location, v);
      };
    }

    function uintSetter(gl, location) {
      return function(v) {
        gl.uniform1ui(location, v);
      };
    }

    function uintArraySetter(gl, location) {
      return function(v) {
        gl.uniform1uiv(location, v);
      };
    }

    function uintVec2Setter(gl, location) {
      return function(v) {
        gl.uniform2uiv(location, v);
      };
    }

    function uintVec3Setter(gl, location) {
      return function(v) {
        gl.uniform3uiv(location, v);
      };
    }

    function uintVec4Setter(gl, location) {
      return function(v) {
        gl.uniform4uiv(location, v);
      };
    }

    function floatMat2Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix2fv(location, false, v);
      };
    }

    function floatMat3Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix3fv(location, false, v);
      };
    }

    function floatMat4Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix4fv(location, false, v);
      };
    }

    function floatMat23Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix2x3fv(location, false, v);
      };
    }

    function floatMat32Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix3x2fv(location, false, v);
      };
    }

    function floatMat24Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix2x4fv(location, false, v);
      };
    }

    function floatMat42Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix4x2fv(location, false, v);
      };
    }

    function floatMat34Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix3x4fv(location, false, v);
      };
    }

    function floatMat43Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix4x3fv(location, false, v);
      };
    }

    function samplerSetter(gl, type, unit, location) {
      const bindPoint = getBindPointForSamplerType(gl, type);
      return isWebGL2(gl) ? function(textureOrPair) {
        let texture;
        let sampler;
        if (isTexture(gl, textureOrPair)) {
          texture = textureOrPair;
          sampler = null;
        } else {
          texture = textureOrPair.texture;
          sampler = textureOrPair.sampler;
        }
        gl.uniform1i(location, unit);
        gl.activeTexture(TEXTURE0 + unit);
        gl.bindTexture(bindPoint, texture);
        gl.bindSampler(unit, sampler);
      } : function(texture) {
        gl.uniform1i(location, unit);
        gl.activeTexture(TEXTURE0 + unit);
        gl.bindTexture(bindPoint, texture);
      };
    }

    function samplerArraySetter(gl, type, unit, location, size) {
      const bindPoint = getBindPointForSamplerType(gl, type);
      const units = new Int32Array(size);
      for (let ii = 0; ii < size; ++ii) {
        units[ii] = unit + ii;
      }

      return isWebGL2(gl) ? function(textures) {
        gl.uniform1iv(location, units);
        textures.forEach(function(textureOrPair, index) {
          gl.activeTexture(TEXTURE0 + units[index]);
          let texture;
          let sampler;
          if (isTexture(gl, textureOrPair)) {
            texture = textureOrPair;
            sampler = null;
          } else {
            texture = textureOrPair.texture;
            sampler = textureOrPair.sampler;
          }
          gl.bindSampler(unit, sampler);
          gl.bindTexture(bindPoint, texture);
        });
      } : function(textures) {
        gl.uniform1iv(location, units);
        textures.forEach(function(texture, index) {
          gl.activeTexture(TEXTURE0 + units[index]);
          gl.bindTexture(bindPoint, texture);
        });
      };
    }

    typeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };
    typeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  };
    typeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  };
    typeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  };
    typeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };
    typeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    };
    typeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    };
    typeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    };
    typeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };
    typeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   };
    typeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   };
    typeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   };
    typeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };
    typeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    };
    typeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    };
    typeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    };
    typeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 16, setter: floatMat2Setter,  };
    typeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 36, setter: floatMat3Setter,  };
    typeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  };
    typeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 24, setter: floatMat23Setter, };
    typeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, };
    typeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 24, setter: floatMat32Setter, };
    typeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, };
    typeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 32, setter: floatMat42Setter, };
    typeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 48, setter: floatMat43Setter, };
    typeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
    typeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
    typeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
    typeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
    typeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
    typeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
    typeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };

    function floatAttribSetter(gl, index) {
      return function(b) {
        if (b.value) {
          gl.disableVertexAttribArray(index);
          switch (b.value.length) {
            case 4:
              gl.vertexAttrib4fv(index, b.value);
              break;
            case 3:
              gl.vertexAttrib3fv(index, b.value);
              break;
            case 2:
              gl.vertexAttrib2fv(index, b.value);
              break;
            case 1:
              gl.vertexAttrib1fv(index, b.value);
              break;
            default:
              throw new Error('the length of a float constant value must be between 1 and 4!');
          }
        } else {
          gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
          gl.enableVertexAttribArray(index);
          gl.vertexAttribPointer(
              index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index, b.divisor);
          }
        }
      };
    }

    function intAttribSetter(gl, index) {
      return function(b) {
        if (b.value) {
          gl.disableVertexAttribArray(index);
          if (b.value.length === 4) {
            gl.vertexAttrib4iv(index, b.value);
          } else {
            throw new Error('The length of an integer constant value must be 4!');
          }
        } else {
          gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
          gl.enableVertexAttribArray(index);
          gl.vertexAttribIPointer(
              index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index, b.divisor);
          }
        }
      };
    }

    function uintAttribSetter(gl, index) {
      return function(b) {
        if (b.value) {
          gl.disableVertexAttribArray(index);
          if (b.value.length === 4) {
            gl.vertexAttrib4uiv(index, b.value);
          } else {
            throw new Error('The length of an unsigned integer constant value must be 4!');
          }
        } else {
          gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
          gl.enableVertexAttribArray(index);
          gl.vertexAttribIPointer(
              index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index, b.divisor);
          }
        }
      };
    }

    function matAttribSetter(gl, index, typeInfo) {
      const defaultSize = typeInfo.size;
      const count = typeInfo.count;

      return function(b) {
        gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
        const numComponents = b.size || b.numComponents || defaultSize;
        const size = numComponents / count;
        const type = b.type || FLOAT$3;
        const typeInfo = typeMap[type];
        const stride = typeInfo.size * numComponents;
        const normalize = b.normalize || false;
        const offset = b.offset || 0;
        const rowOffset = stride / count;
        for (let i = 0; i < count; ++i) {
          gl.enableVertexAttribArray(index + i);
          gl.vertexAttribPointer(
              index + i, size, type, normalize, stride, offset + rowOffset * i);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index + i, b.divisor);
          }
        }
      };
    }



    const attrTypeMap = {};
    attrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };
    attrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };
    attrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };
    attrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };
    attrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };
    attrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };
    attrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };
    attrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };
    attrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };
    attrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };
    attrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };
    attrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };
    attrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };
    attrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };
    attrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };
    attrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };
    attrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };
    attrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };
    attrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };

    /**
     * Error Callback
     * @callback ErrorCallback
     * @param {string} msg error message.
     * @param {number} [lineOffset] amount to add to line number
     * @memberOf module:twgl
     */

    function addLineNumbers(src, lineOffset) {
      lineOffset = lineOffset || 0;
      ++lineOffset;

      return src.split("\n").map(function(line, ndx) {
        return (ndx + lineOffset) + ": " + line;
      }).join("\n");
    }

    const spaceRE = /^[ \t]*\n/;

    /**
     * Loads a shader.
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {string} shaderSource The shader source.
     * @param {number} shaderType The type of shader.
     * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.
     * @return {WebGLShader} The created shader.
     * @private
     */
    function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {
      const errFn = opt_errorCallback || error$1;
      // Create the shader object
      const shader = gl.createShader(shaderType);

      // Remove the first end of line because WebGL 2.0 requires
      // #version 300 es
      // as the first line. No whitespace allowed before that line
      // so
      //
      // <script>
      // #version 300 es
      // </script>
      //
      // Has one line before it which is invalid according to GLSL ES 3.00
      //
      let lineOffset = 0;
      if (spaceRE.test(shaderSource)) {
        lineOffset = 1;
        shaderSource = shaderSource.replace(spaceRE, '');
      }

      // Load the shader source
      gl.shaderSource(shader, shaderSource);

      // Compile the shader
      gl.compileShader(shader);

      // Check the compile status
      const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);
      if (!compiled) {
        // Something went wrong during compilation; get the error
        const lastError = gl.getShaderInfoLog(shader);
        errFn(addLineNumbers(shaderSource, lineOffset) + "\n*** Error compiling shader: " + lastError);
        gl.deleteShader(shader);
        return null;
      }

      return shader;
    }

    /**
     * @typedef {Object} ProgramOptions
     * @property {function(string)} [errorCallback] callback for errors
     * @property {Object.<string,number>} [attribLocations] a attribute name to location map
     * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed
     *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise
     *   you can pass an array of names.
     * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.
     * @memberOf module:twgl
     */

    /**
     * Gets the program options based on all these optional arguments
     * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in
     * @private
     */
    function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {
      let transformFeedbackVaryings;
      let transformFeedbackMode;
      if (typeof opt_locations === 'function') {
        opt_errorCallback = opt_locations;
        opt_locations = undefined;
      }
      if (typeof opt_attribs === 'function') {
        opt_errorCallback = opt_attribs;
        opt_attribs = undefined;
      } else if (opt_attribs && !Array.isArray(opt_attribs)) {
        // If we have an errorCallback we can just return this object
        // Otherwise we need to construct one with default errorCallback
        if (opt_attribs.errorCallback) {
          return opt_attribs;
        }
        const opt = opt_attribs;
        opt_errorCallback = opt.errorCallback;
        opt_attribs = opt.attribLocations;
        transformFeedbackVaryings = opt.transformFeedbackVaryings;
        transformFeedbackMode = opt.transformFeedbackMode;
      }

      const options = {
        errorCallback: opt_errorCallback || error$1,
        transformFeedbackVaryings: transformFeedbackVaryings,
        transformFeedbackMode: transformFeedbackMode,
      };

      if (opt_attribs) {
        let attribLocations = {};
        if (Array.isArray(opt_attribs)) {
          opt_attribs.forEach(function(attrib,  ndx) {
            attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;
          });
        } else {
          attribLocations = opt_attribs;
        }
        options.attribLocations = attribLocations;
      }

      return options;
    }

    const defaultShaderType = [
      "VERTEX_SHADER",
      "FRAGMENT_SHADER",
    ];

    function getShaderTypeFromScriptType(gl, scriptType) {
      if (scriptType.indexOf("frag") >= 0) {
        return FRAGMENT_SHADER;
      } else if (scriptType.indexOf("vert") >= 0) {
        return VERTEX_SHADER;
      }
      return undefined;
    }

    function deleteShaders(gl, shaders) {
      shaders.forEach(function(shader) {
        gl.deleteShader(shader);
      });
    }

    /**
     * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the
     * program and calls useProgram.
     *
     * NOTE: There are 4 signatures for this function
     *
     *     twgl.createProgram(gl, [vs, fs], options);
     *     twgl.createProgram(gl, [vs, fs], opt_errFunc);
     *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);
     *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source
     * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {WebGLProgram?} the created program or null if error.
     * @memberOf module:twgl/programs
     */
    function createProgram(
        gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {
      const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
      const realShaders = [];
      const newShaders = [];
      for (let ndx = 0; ndx < shaders.length; ++ndx) {
        let shader = shaders[ndx];
        if (typeof (shader) === 'string') {
          const elem = getElementById(shader);
          const src = elem ? elem.text : shader;
          let type = gl[defaultShaderType[ndx]];
          if (elem && elem.type) {
            type = getShaderTypeFromScriptType(gl, elem.type) || type;
          }
          shader = loadShader(gl, src, type, progOptions.errorCallback);
          newShaders.push(shader);
        }
        if (isShader(gl, shader)) {
          realShaders.push(shader);
        }
      }

      if (realShaders.length !== shaders.length) {
        progOptions.errorCallback("not enough shaders for program");
        deleteShaders(gl, newShaders);
        return null;
      }

      const program = gl.createProgram();
      realShaders.forEach(function(shader) {
        gl.attachShader(program, shader);
      });
      if (progOptions.attribLocations) {
        Object.keys(progOptions.attribLocations).forEach(function(attrib) {
          gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);
        });
      }
      let varyings = progOptions.transformFeedbackVaryings;
      if (varyings) {
        if (varyings.attribs) {
          varyings = varyings.attribs;
        }
        if (!Array.isArray(varyings)) {
          varyings = Object.keys(varyings);
        }
        gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);
      }
      gl.linkProgram(program);

      // Check the link status
      const linked = gl.getProgramParameter(program, LINK_STATUS);
      if (!linked) {
        // something went wrong with the link
        const lastError = gl.getProgramInfoLog(program);
        progOptions.errorCallback("Error in program linking:" + lastError);

        gl.deleteProgram(program);
        deleteShaders(gl, newShaders);
        return null;
      }
      return program;
    }

    /**
     * Creates a program from 2 sources.
     *
     * NOTE: There are 4 signatures for this function
     *
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext
     *        to use.
     * @param {string[]} shaderSources Array of sources for the
     *        shaders. The first is assumed to be the vertex shader,
     *        the second the fragment shader.
     * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {WebGLProgram?} the created program or null if error.
     * @memberOf module:twgl/programs
     */
    function createProgramFromSources(
        gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
      const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
      const shaders = [];
      for (let ii = 0; ii < shaderSources.length; ++ii) {
        const shader = loadShader(
            gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);
        if (!shader) {
          return null;
        }
        shaders.push(shader);
      }
      return createProgram(gl, shaders, progOptions);
    }

    /**
     * Returns true if attribute/uniform is a reserved/built in
     *
     * It makes no sense to me why GL returns these because it's
     * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`
     * with names that start with `gl_` (and `webgl_` in WebGL)
     *
     * I can only assume they are there because they might count
     * when computing the number of uniforms/attributes used when you want to
     * know if you are near the limit. That doesn't really make sense
     * to me but the fact that these get returned are in the spec.
     *
     * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or
     *    `gl.getActiveAttrib`.
     * @return {bool} true if it's reserved
     * @private
     */
    function isBuiltIn(info) {
      const name = info.name;
      return name.startsWith("gl_") || name.startsWith("webgl_");
    }

    /**
     * Creates setter functions for all uniforms of a shader
     * program.
     *
     * @see {@link module:twgl.setUniforms}
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLProgram} program the program to create setters for.
     * @returns {Object.<string, function>} an object with a setter by name for each uniform
     * @memberOf module:twgl/programs
     */
    function createUniformSetters(gl, program) {
      let textureUnit = 0;

      /**
       * Creates a setter for a uniform of the given program with it's
       * location embedded in the setter.
       * @param {WebGLProgram} program
       * @param {WebGLUniformInfo} uniformInfo
       * @returns {function} the created setter.
       */
      function createUniformSetter(program, uniformInfo, location) {
        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === "[0]");
        const type = uniformInfo.type;
        const typeInfo = typeMap[type];
        if (!typeInfo) {
          throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.
        }
        let setter;
        if (typeInfo.bindPoint) {
          // it's a sampler
          const unit = textureUnit;
          textureUnit += uniformInfo.size;
          if (isArray) {
            setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);
          } else {
            setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);
          }
        } else {
          if (typeInfo.arraySetter && isArray) {
            setter = typeInfo.arraySetter(gl, location);
          } else {
            setter = typeInfo.setter(gl, location);
          }
        }
        setter.location = location;
        return setter;
      }

      const uniformSetters = { };
      const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);

      for (let ii = 0; ii < numUniforms; ++ii) {
        const uniformInfo = gl.getActiveUniform(program, ii);
        if (isBuiltIn(uniformInfo)) {
            continue;
        }
        let name = uniformInfo.name;
        // remove the array suffix.
        if (name.substr(-3) === "[0]") {
          name = name.substr(0, name.length - 3);
        }
        const location = gl.getUniformLocation(program, uniformInfo.name);
        // the uniform will have no location if it's in a uniform block
        if (location) {
          uniformSetters[name] = createUniformSetter(program, uniformInfo, location);
        }
      }
      return uniformSetters;
    }

    /**
     * @typedef {Object} TransformFeedbackInfo
     * @property {number} index index of transform feedback
     * @property {number} type GL type
     * @property {number} size 1 - 4
     * @memberOf module:twgl
     */

    /**
     * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLProgram} program an existing WebGLProgram.
     * @return {Object<string, module:twgl.TransformFeedbackInfo>}
     * @memberOf module:twgl
     */
    function createTransformFeedbackInfo(gl, program) {
      const info = {};
      const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);
      for (let ii = 0; ii < numVaryings; ++ii) {
        const varying = gl.getTransformFeedbackVarying(program, ii);
        info[varying.name] = {
          index: ii,
          type: varying.type,
          size: varying.size,
        };
      }
      return info;
    }

    /**
     * @typedef {Object} UniformData
     * @property {number} type The WebGL type enum for this uniform
     * @property {number} size The number of elements for this uniform
     * @property {number} blockNdx The block index this uniform appears in
     * @property {number} offset The byte offset in the block for this uniform's value
     * @memberOf module:twgl
     */

    /**
     * The specification for one UniformBlockObject
     *
     * @typedef {Object} BlockSpec
     * @property {number} index The index of the block.
     * @property {number} size The size in bytes needed for the block
     * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices
     *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.
     * @property {bool} usedByVertexShader Self explanatory
     * @property {bool} usedByFragmentShader Self explanatory
     * @property {bool} used Self explanatory
     * @memberOf module:twgl
     */

    /**
     * A `UniformBlockSpec` represents the data needed to create and bind
     * UniformBlockObjects for a given program
     *
     * @typedef {Object} UniformBlockSpec
     * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name
     * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.
     * @memberOf module:twgl
     */

    /**
     * Creates a UniformBlockSpec for the given program.
     *
     * A UniformBlockSpec represents the data needed to create and bind
     * UniformBlockObjects
     *
     * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context
     * @param {WebGLProgram} program A WebGLProgram for a successfully linked program
     * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec
     * @memberOf module:twgl/programs
     */
    function createUniformBlockSpecFromProgram(gl, program) {
      const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);
      const uniformData = [];
      const uniformIndices = [];

      for (let ii = 0; ii < numUniforms; ++ii) {
        uniformIndices.push(ii);
        uniformData.push({});
        const uniformInfo = gl.getActiveUniform(program, ii);
        if (isBuiltIn(uniformInfo)) {
          break;
        }
        // REMOVE [0]?
        uniformData[ii].name = uniformInfo.name;
      }

      [
        [ "UNIFORM_TYPE", "type" ],
        [ "UNIFORM_SIZE", "size" ],  // num elements
        [ "UNIFORM_BLOCK_INDEX", "blockNdx" ],
        [ "UNIFORM_OFFSET", "offset", ],
      ].forEach(function(pair) {
        const pname = pair[0];
        const key = pair[1];
        gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {
          uniformData[ndx][key] = value;
        });
      });

      const blockSpecs = {};

      const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);
      for (let ii = 0; ii < numUniformBlocks; ++ii) {
        const name = gl.getActiveUniformBlockName(program, ii);
        const blockSpec = {
          index: gl.getUniformBlockIndex(program, name),
          usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
          usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
          size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),
          uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
        };
        blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;
        blockSpecs[name] = blockSpec;
      }

      return {
        blockSpecs: blockSpecs,
        uniformData: uniformData,
      };
    }

    /**
     * Set uniforms and binds related textures.
     *
     * example:
     *
     *     const programInfo = createProgramInfo(
     *         gl, ["some-vs", "some-fs"]);
     *
     *     const tex1 = gl.createTexture();
     *     const tex2 = gl.createTexture();
     *
     *     ... assume we setup the textures with data ...
     *
     *     const uniforms = {
     *       u_someSampler: tex1,
     *       u_someOtherSampler: tex2,
     *       u_someColor: [1,0,0,1],
     *       u_somePosition: [0,1,1],
     *       u_someMatrix: [
     *         1,0,0,0,
     *         0,1,0,0,
     *         0,0,1,0,
     *         0,0,0,0,
     *       ],
     *     };
     *
     *     gl.useProgram(program);
     *
     * This will automatically bind the textures AND set the
     * uniforms.
     *
     *     twgl.setUniforms(programInfo, uniforms);
     *
     * For the example above it is equivalent to
     *
     *     var texUnit = 0;
     *     gl.activeTexture(gl.TEXTURE0 + texUnit);
     *     gl.bindTexture(gl.TEXTURE_2D, tex1);
     *     gl.uniform1i(u_someSamplerLocation, texUnit++);
     *     gl.activeTexture(gl.TEXTURE0 + texUnit);
     *     gl.bindTexture(gl.TEXTURE_2D, tex2);
     *     gl.uniform1i(u_someSamplerLocation, texUnit++);
     *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);
     *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);
     *     gl.uniformMatrix4fv(u_someMatrix, false, [
     *         1,0,0,0,
     *         0,1,0,0,
     *         0,0,1,0,
     *         0,0,0,0,
     *       ]);
     *
     * Note it is perfectly reasonable to call `setUniforms` multiple times. For example
     *
     *     const uniforms = {
     *       u_someSampler: tex1,
     *       u_someOtherSampler: tex2,
     *     };
     *
     *     const moreUniforms {
     *       u_someColor: [1,0,0,1],
     *       u_somePosition: [0,1,1],
     *       u_someMatrix: [
     *         1,0,0,0,
     *         0,1,0,0,
     *         0,0,1,0,
     *         0,0,0,0,
     *       ],
     *     };
     *
     *     twgl.setUniforms(programInfo, uniforms);
     *     twgl.setUniforms(programInfo, moreUniforms);
     *
     * You can also add WebGLSamplers to uniform samplers as in
     *
     *     const uniforms = {
     *       u_someSampler: {
     *         texture: someWebGLTexture,
     *         sampler: someWebGLSampler,
     *       },
     *     };
     *
     * In which case both the sampler and texture will be bound to the
     * same unit.
     *
     * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
     *        `createUniformSetters`.
     * @param {Object.<string, ?>} values an object with values for the
     *        uniforms.
     *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example
     *
     *     const sharedUniforms = {
     *       u_fogNear: 10,
     *       u_projection: ...
     *       ...
     *     };
     *
     *     const localUniforms = {
     *       u_world: ...
     *       u_diffuseColor: ...
     *     };
     *
     *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);
     *
     *     // is the same as
     *
     *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);
     *
     *     // is the same as
     *
     *     twgl.setUniforms(programInfo, sharedUniforms);
     *     twgl.setUniforms(programInfo, localUniforms};
     *
     * @memberOf module:twgl/programs
     */
    function setUniforms(setters, values) {  // eslint-disable-line
      const actualSetters = setters.uniformSetters || setters;
      const numArgs = arguments.length;
      for (let aNdx = 1; aNdx < numArgs; ++aNdx) {
        const values = arguments[aNdx];
        if (Array.isArray(values)) {
          const numValues = values.length;
          for (let ii = 0; ii < numValues; ++ii) {
            setUniforms(actualSetters, values[ii]);
          }
        } else {
          for (const name in values) {
            const setter = actualSetters[name];
            if (setter) {
              setter(values[name]);
            }
          }
        }
      }
    }

    /**
     * Creates setter functions for all attributes of a shader
     * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.
     *
     * @see {@link module:twgl.setAttributes} for example
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLProgram} program the program to create setters for.
     * @return {Object.<string, function>} an object with a setter for each attribute by name.
     * @memberOf module:twgl/programs
     */
    function createAttributeSetters(gl, program) {
      const attribSetters = {
      };

      const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);
      for (let ii = 0; ii < numAttribs; ++ii) {
        const attribInfo = gl.getActiveAttrib(program, ii);
        if (isBuiltIn(attribInfo)) {
            continue;
        }
        const index = gl.getAttribLocation(program, attribInfo.name);
        const typeInfo = attrTypeMap[attribInfo.type];
        const setter = typeInfo.setter(gl, index, typeInfo);
        setter.location = index;
        attribSetters[attribInfo.name] = setter;
      }

      return attribSetters;
    }

    /**
     * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})
     *
     * Example:
     *
     *     const program = createProgramFromScripts(
     *         gl, ["some-vs", "some-fs");
     *
     *     const attribSetters = createAttributeSetters(program);
     *
     *     const positionBuffer = gl.createBuffer();
     *     const texcoordBuffer = gl.createBuffer();
     *
     *     const attribs = {
     *       a_position: {buffer: positionBuffer, numComponents: 3},
     *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
     *     };
     *
     *     gl.useProgram(program);
     *
     * This will automatically bind the buffers AND set the
     * attributes.
     *
     *     setAttributes(attribSetters, attribs);
     *
     * Properties of attribs. For each attrib you can add
     * properties:
     *
     * *   type: the type of data in the buffer. Default = gl.FLOAT
     * *   normalize: whether or not to normalize the data. Default = false
     * *   stride: the stride. Default = 0
     * *   offset: offset into the buffer. Default = 0
     * *   divisor: the divisor for instances. Default = undefined
     *
     * For example if you had 3 value float positions, 2 value
     * float texcoord and 4 value uint8 colors you'd setup your
     * attribs like this
     *
     *     const attribs = {
     *       a_position: {buffer: positionBuffer, numComponents: 3},
     *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
     *       a_color: {
     *         buffer: colorBuffer,
     *         numComponents: 4,
     *         type: gl.UNSIGNED_BYTE,
     *         normalize: true,
     *       },
     *     };
     *
     * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
     * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.
     * @memberOf module:twgl/programs
     * @deprecated use {@link module:twgl.setBuffersAndAttributes}
     */
    function setAttributes(setters, buffers) {
      for (const name in buffers) {
        const setter = setters[name];
        if (setter) {
          setter(buffers[name]);
        }
      }
    }

    /**
     * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate
     *
     * Example:
     *
     *     const programInfo = createProgramInfo(
     *         gl, ["some-vs", "some-fs");
     *
     *     const arrays = {
     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *     };
     *
     *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);
     *
     *     gl.useProgram(programInfo.program);
     *
     * This will automatically bind the buffers AND set the
     * attributes.
     *
     *     setBuffersAndAttributes(gl, programInfo, bufferInfo);
     *
     * For the example above it is equivalent to
     *
     *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
     *     gl.enableVertexAttribArray(a_positionLocation);
     *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);
     *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
     *     gl.enableVertexAttribArray(a_texcoordLocation);
     *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
     * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}
     * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.
     *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}
     * @memberOf module:twgl/programs
     */
    function setBuffersAndAttributes(gl, programInfo, buffers) {
      if (buffers.vertexArrayObject) {
        gl.bindVertexArray(buffers.vertexArrayObject);
      } else {
        setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);
        if (buffers.indices) {
          gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);
        }
      }
    }

    /**
     * @typedef {Object} ProgramInfo
     * @property {WebGLProgram} program A shader program
     * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,
     * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,
     * @property {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..
     * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks
     * @memberOf module:twgl
     */

    /**
     * Creates a ProgramInfo from an existing program.
     *
     * A ProgramInfo contains
     *
     *     programInfo = {
     *        program: WebGLProgram,
     *        uniformSetters: object of setters as returned from createUniformSetters,
     *        attribSetters: object of setters as returned from createAttribSetters,
     *     }
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext
     *        to use.
     * @param {WebGLProgram} program an existing WebGLProgram.
     * @return {module:twgl.ProgramInfo} The created ProgramInfo.
     * @memberOf module:twgl/programs
     */
    function createProgramInfoFromProgram(gl, program) {
      const uniformSetters = createUniformSetters(gl, program);
      const attribSetters = createAttributeSetters(gl, program);
      const programInfo = {
        program: program,
        uniformSetters: uniformSetters,
        attribSetters: attribSetters,
      };

      if (isWebGL2(gl)) {
        programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);
        programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);
      }

      return programInfo;
    }

    /**
     * Creates a ProgramInfo from 2 sources.
     *
     * A ProgramInfo contains
     *
     *     programInfo = {
     *        program: WebGLProgram,
     *        uniformSetters: object of setters as returned from createUniformSetters,
     *        attribSetters: object of setters as returned from createAttribSetters,
     *     }
     *
     * NOTE: There are 4 signatures for this function
     *
     *     twgl.createProgramInfo(gl, [vs, fs], options);
     *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);
     *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);
     *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext
     *        to use.
     * @param {string[]} shaderSources Array of sources for the
     *        shaders or ids. The first is assumed to be the vertex shader,
     *        the second the fragment shader.
     * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile
     * @memberOf module:twgl/programs
     */
    function createProgramInfo(
        gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
      const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
      let good = true;
      shaderSources = shaderSources.map(function(source) {
        // Lets assume if there is no \n it's an id
        if (source.indexOf("\n") < 0) {
          const script = getElementById(source);
          if (!script) {
            progOptions.errorCallback("no element with id: " + source);
            good = false;
          } else {
            source = script.text;
          }
        }
        return source;
      });
      if (!good) {
        return null;
      }
      const program = createProgramFromSources(gl, shaderSources, progOptions);
      if (!program) {
        return null;
      }
      return createProgramInfoFromProgram(gl, program);
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    const TRIANGLES                      = 0x0004;
    const UNSIGNED_SHORT$3                 = 0x1403;

    /**
     * Drawing related functions
     *
     * For backward compatibility they are available at both `twgl.draw` and `twgl`
     * itself
     *
     * See {@link module:twgl} for core functions
     *
     * @module twgl/draw
     */

    /**
     * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate
     *
     * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself
     * but calling this means if you switch from indexed data to non-indexed
     * data you don't have to remember to update your draw call.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or
     *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
     * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`
     * @param {number} [count] An optional count. Defaults to bufferInfo.numElements
     * @param {number} [offset] An optional offset. Defaults to 0.
     * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called
     * @memberOf module:twgl/draw
     */
    function drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {
      type = type === undefined ? TRIANGLES : type;
      const indices = bufferInfo.indices;
      const elementType = bufferInfo.elementType;
      const numElements = count === undefined ? bufferInfo.numElements : count;
      offset = offset === undefined ? 0 : offset;
      if (elementType || indices) {
        if (instanceCount !== undefined) {
          gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);
        } else {
          gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);
        }
      } else {
        if (instanceCount !== undefined) {
          gl.drawArraysInstanced(type, offset, numElements, instanceCount);
        } else {
          gl.drawArrays(type, offset, numElements);
        }
      }
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    const FRAMEBUFFER                    = 0x8d40;
    const RENDERBUFFER                   = 0x8d41;
    const TEXTURE_2D$2                     = 0x0de1;

    const UNSIGNED_BYTE$3                  = 0x1401;

    /* PixelFormat */
    const DEPTH_COMPONENT$1                = 0x1902;
    const RGBA$1                           = 0x1908;

    /* Framebuffer Object. */
    const RGBA4$1                          = 0x8056;
    const RGB5_A1$1                        = 0x8057;
    const RGB565$1                         = 0x8D62;
    const DEPTH_COMPONENT16$1              = 0x81A5;
    const STENCIL_INDEX                  = 0x1901;
    const STENCIL_INDEX8                 = 0x8D48;
    const DEPTH_STENCIL$1                  = 0x84F9;
    const COLOR_ATTACHMENT0              = 0x8CE0;
    const DEPTH_ATTACHMENT               = 0x8D00;
    const STENCIL_ATTACHMENT             = 0x8D20;
    const DEPTH_STENCIL_ATTACHMENT       = 0x821A;
    const CLAMP_TO_EDGE$1                  = 0x812F;
    const LINEAR$1                         = 0x2601;

    /**
     * The options for a framebuffer attachment.
     *
     * Note: For a `format` that is a texture include all the texture
     * options from {@link module:twgl.TextureOptions} for example
     * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}
     * `auto` defaults to `false` for attachment textures but `min` and `mag` default
     * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`
     *
     * @typedef {Object} AttachmentOptions
     * @property {number} [attach] The attachment point. Defaults
     *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type
     *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending
     *   on the format or attachment type.
     * @property {number} [format] The format. If one of `gl.RGBA4`,
     *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,
     *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a
     *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`
     * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.
     * @property {number} [target] The texture target for `gl.framebufferTexture2D`.
     *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.
     * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.
     * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.
     *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`
     * @property {WebGLObject} [attachment] An existing renderbuffer or texture.
     *    If provided will attach this Object. This allows you to share
     *    attachments across framebuffers.
     * @memberOf module:twgl
     * @mixes module:twgl.TextureOptions
     */

    const defaultAttachments = [
      { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },
      { format: DEPTH_STENCIL$1, },
    ];

    const attachmentsByFormat = {};
    attachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;
    attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;
    attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;
    attachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;
    attachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;

    function getAttachmentPointForFormat(format) {
      return attachmentsByFormat[format];
    }

    const renderbufferFormats = {};
    renderbufferFormats[RGBA4$1] = true;
    renderbufferFormats[RGB5_A1$1] = true;
    renderbufferFormats[RGB565$1] = true;
    renderbufferFormats[DEPTH_STENCIL$1] = true;
    renderbufferFormats[DEPTH_COMPONENT16$1] = true;
    renderbufferFormats[STENCIL_INDEX] = true;
    renderbufferFormats[STENCIL_INDEX8] = true;

    function isRenderbufferFormat(format) {
      return renderbufferFormats[format];
    }

    /**
     * @typedef {Object} FramebufferInfo
     * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo
     * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.
     * @property {number} width The width of the framebuffer and its attachments
     * @property {number} height The width of the framebuffer and its attachments
     * @memberOf module:twgl
     */

    /**
     * Creates a framebuffer and attachments.
     *
     * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.
     *
     * The simplest usage
     *
     *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
     *     const fbi = twgl.createFramebufferInfo(gl);
     *
     * More complex usage
     *
     *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
     *     const attachments = [
     *       { format: RGB565, mag: NEAREST },
     *       { format: STENCIL_INDEX8 },
     *     ]
     *     const fbi = twgl.createFramebufferInfo(gl, attachments);
     *
     * Passing in a specific size
     *
     *     const width = 256;
     *     const height = 256;
     *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);
     *
     * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.
     * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an
     *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.
     * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
     * @param {number} [height] the height for the attachments. Default = size of drawingBuffer
     * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.
     * @memberOf module:twgl/framebuffers
     */
    function createFramebufferInfo(gl, attachments, width, height) {
      const target = FRAMEBUFFER;
      const fb = gl.createFramebuffer();
      gl.bindFramebuffer(target, fb);
      width  = width  || gl.drawingBufferWidth;
      height = height || gl.drawingBufferHeight;
      attachments = attachments || defaultAttachments;
      let colorAttachmentCount = 0;
      const framebufferInfo = {
        framebuffer: fb,
        attachments: [],
        width: width,
        height: height,
      };
      attachments.forEach(function(attachmentOptions) {
        let attachment = attachmentOptions.attachment;
        const format = attachmentOptions.format;
        let attachmentPoint = getAttachmentPointForFormat(format);
        if (!attachmentPoint) {
          attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;
        }
        if (!attachment) {
          if (isRenderbufferFormat(format)) {
            attachment = gl.createRenderbuffer();
            gl.bindRenderbuffer(RENDERBUFFER, attachment);
            gl.renderbufferStorage(RENDERBUFFER, format, width, height);
          } else {
            const textureOptions = Object.assign({}, attachmentOptions);
            textureOptions.width = width;
            textureOptions.height = height;
            if (textureOptions.auto === undefined) {
              textureOptions.auto = false;
              textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;
              textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;
              textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;
              textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;
            }
            attachment = createTexture(gl, textureOptions);
          }
        }
        if (isRenderbuffer(gl, attachment)) {
          gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);
        } else if (isTexture(gl, attachment)) {
          if (attachmentOptions.layer !== undefined) {
            gl.framebufferTextureLayer(
              target,
              attachmentPoint,
              attachment,
              attachmentOptions.level || 0,
              attachmentOptions.layer);
          } else {
            gl.framebufferTexture2D(
                target,
                attachmentPoint,
                attachmentOptions.target || TEXTURE_2D$2,
                attachment,
                attachmentOptions.level || 0);
          }
        } else {
          throw new Error('unknown attachment type');
        }
        framebufferInfo.attachments.push(attachment);
      });
      return framebufferInfo;
    }

    /**
     * Binds a framebuffer
     *
     * This function pretty much solely exists because I spent hours
     * trying to figure out why something I wrote wasn't working only
     * to realize I forget to set the viewport dimensions.
     * My hope is this function will fix that.
     *
     * It is effectively the same as
     *
     *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);
     *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
     *   If falsy will bind the canvas.
     * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.
     * @memberOf module:twgl/framebuffers
     */

    function bindFramebufferInfo(gl, framebufferInfo, target) {
      target = target || FRAMEBUFFER;
      if (framebufferInfo) {
        gl.bindFramebuffer(target, framebufferInfo.framebuffer);
        gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);
      } else {
        gl.bindFramebuffer(target, null);
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
      }
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    const defaults$2$1 = {
      addExtensionsToContext: true,
    };

    const prefixRE = /^(.*?)_/;
    function addExtensionToContext(gl, extensionName) {
      glEnumToString(gl, 0);
      const ext = gl.getExtension(extensionName);
      if (ext) {
        const enums = {};
        const fnSuffix = prefixRE.exec(extensionName)[1];
        const enumSuffix = '_' + fnSuffix;
        for (const key in ext) {
          const value = ext[key];
          const isFunc = typeof (value) === 'function';
          const suffix = isFunc ? fnSuffix : enumSuffix;
          let name = key;
          // examples of where this is not true are WEBGL_compressed_texture_s3tc
          // and WEBGL_compressed_texture_pvrtc
          if (key.endsWith(suffix)) {
            name = key.substring(0, key.length - suffix.length);
          }
          if (gl[name] !== undefined) {
            if (!isFunc && gl[name] !== value) {
              warn(name, gl[name], value, key);
            }
          } else {
            if (isFunc) {
              gl[name] = function(origFn) {
                return function() {
                  return origFn.apply(ext, arguments);
                };
              }(value);
            } else {
              gl[name] = value;
              enums[name] = value;
            }
          }
        }
        // pass the modified enums to glEnumToString
        enums.constructor = {
          name: ext.constructor.name,
        };
        glEnumToString(enums, 0);
      }
      return ext;
    }

    /*
     * If you're wondering why the code doesn't just iterate
     * over all extensions using `gl.getExtensions` is that it's possible
     * some future extension is incompatible with this code. Rather than
     * have thing suddenly break it seems better to manually add to this
     * list.
     *
     */
    const supportedExtensions = [
      'ANGLE_instanced_arrays',
      'EXT_blend_minmax',
      'EXT_color_buffer_float',
      'EXT_color_buffer_half_float',
      'EXT_disjoint_timer_query',
      'EXT_disjoint_timer_query_webgl2',
      'EXT_frag_depth',
      'EXT_sRGB',
      'EXT_shader_texture_lod',
      'EXT_texture_filter_anisotropic',
      'OES_element_index_uint',
      'OES_standard_derivatives',
      'OES_texture_float',
      'OES_texture_float_linear',
      'OES_texture_half_float',
      'OES_texture_half_float_linear',
      'OES_vertex_array_object',
      'WEBGL_color_buffer_float',
      'WEBGL_compressed_texture_atc',
      'WEBGL_compressed_texture_etc1',
      'WEBGL_compressed_texture_pvrtc',
      'WEBGL_compressed_texture_s3tc',
      'WEBGL_compressed_texture_s3tc_srgb',
      'WEBGL_depth_texture',
      'WEBGL_draw_buffers',
    ];

    /**
     * Attempts to enable all of the following extensions
     * and add their functions and constants to the
     * `WebGLRenderingContext` using their normal non-extension like names.
     *
     *      ANGLE_instanced_arrays
     *      EXT_blend_minmax
     *      EXT_color_buffer_float
     *      EXT_color_buffer_half_float
     *      EXT_disjoint_timer_query
     *      EXT_disjoint_timer_query_webgl2
     *      EXT_frag_depth
     *      EXT_sRGB
     *      EXT_shader_texture_lod
     *      EXT_texture_filter_anisotropic
     *      OES_element_index_uint
     *      OES_standard_derivatives
     *      OES_texture_float
     *      OES_texture_float_linear
     *      OES_texture_half_float
     *      OES_texture_half_float_linear
     *      OES_vertex_array_object
     *      WEBGL_color_buffer_float
     *      WEBGL_compressed_texture_atc
     *      WEBGL_compressed_texture_etc1
     *      WEBGL_compressed_texture_pvrtc
     *      WEBGL_compressed_texture_s3tc
     *      WEBGL_compressed_texture_s3tc_srgb
     *      WEBGL_depth_texture
     *      WEBGL_draw_buffers
     *
     * For example if `ANGLE_instanced_arrays` exists then the functions
     * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`
     * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the
     * `WebGLRenderingContext`.
     *
     * Note that if you want to know if the extension exists you should
     * probably call `gl.getExtension` for each extension. Alternatively
     * you can check for the existence of the functions or constants that
     * are expected to be added. For example
     *
     *    if (gl.drawBuffers) {
     *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2
     *      ....
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @memberOf module:twgl
     */
    function addExtensionsToContext(gl) {
      for (let ii = 0; ii < supportedExtensions.length; ++ii) {
        addExtensionToContext(gl, supportedExtensions[ii]);
      }
    }

    /**
     * Creates a webgl context.
     *
     * Will return a WebGL2 context if possible.
     *
     * You can check if it's WebGL2 with
     *
     *     twgl.isWebGL2(gl);
     *
     * @param {HTMLCanvasElement} canvas The canvas tag to get
     *     context from. If one is not passed in one will be
     *     created.
     * @return {WebGLRenderingContext} The created context.
     */
    function createContext(canvas, opt_attribs) {
      const names = ["webgl2", "webgl", "experimental-webgl"];
      let context = null;
      for (let ii = 0; ii < names.length; ++ii) {
        context = canvas.getContext(names[ii], opt_attribs);
        if (context) {
          if (defaults$2$1.addExtensionsToContext) {
            addExtensionsToContext(context);
          }
          break;
        }
      }
      return context;
    }

    /**
     * Gets a WebGL context.  Will create a WebGL2 context if possible.
     *
     * You can check if it's WebGL2 with
     *
     *    function isWebGL2(gl) {
     *      return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0 ") == 0;
     *    }
     *
     * Note: For a WebGL1 context will attempt to enable Vertex Array Objects
     * and add WebGL2 entry points. (unless you first set defaults with
     * `twgl.setDefaults({enableVertexArrayObjects: false})`;
     *
     * @param {HTMLCanvasElement} canvas a canvas element.
     * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes
     * @return {WebGLRenderingContext} The created context.
     * @memberOf module:twgl
     */
    function getContext(canvas, opt_attribs) {
      const gl = createContext(canvas, opt_attribs);
      return gl;
    }

    /**
     * Resize a canvas to match the size it's displayed.
     * @param {HTMLCanvasElement} canvas The canvas to resize.
     * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.
     * @return {boolean} true if the canvas was resized.
     * @memberOf module:twgl
     */
    function resizeCanvasToDisplaySize(canvas, multiplier) {
      multiplier = multiplier || 1;
      multiplier = Math.max(0, multiplier);
      const width  = canvas.clientWidth  * multiplier | 0;
      const height = canvas.clientHeight * multiplier | 0;
      if (canvas.width !== width || canvas.height !== height) {
        canvas.width = width;
        canvas.height = height;
        return true;
      }
      return false;
    }

    // canvas for opengl to read from. this class creates a "layer" with it's own canvas from
    // an openlayers layer. layers will be synced as long as the same view is used

    var LayerObject = function LayerObject(olLayer, olView) {
      var _this = this;

      _classCallCheck(this, LayerObject);

      this._createCanvasElement = function () {
        var container = document.getElementById("tile_container");
        var boundingRect = container.getBoundingClientRect();
        var div = document.createElement("div");
        div.classList.add("layer_object");
        div.setAttribute("id", _this.containerId);
        div.width = boundingRect.width;
        div.height = boundingRect.height;
        div.style.width = "".concat(div.width, "px");
        div.style.height = "".concat(div.height, "px");
        div.style.position = "absolute";
        div.style.top = "0px";
        div.style.zIndex = "".concat(parseInt(_this.olLayer.ol_uid));
        container.appendChild(div);
        _this.container = div;
        _this.activeShaders = [];
      };

      this._createMap = function () {
        var map = new Map$1({
          target: _this.container,
          layers: [_this.olLayer],
          view: _this.olView
        });
        map.getView().setZoom(12); // render the map without animation - prevents artifacts and reduces gpu overhead

        _this.olLayer.getSource().tileOptions.transition = 0; // layers are not requested until they are used -> saves requests

        _this.olLayer.setVisible(false);

        _this.olMap = map;
      };

      this.type = 'layerObject';
      this.olLayer = olLayer;
      this.olView = olView;
      this.mapOrderId = parseInt(this.olLayer.ol_uid);
      this.containerId = Date.now() + Math.floor(Math.random() * 1000000);
      this.container;
      this.olMap;
      this.shaders = {};
      this.activeShader;

      this._createCanvasElement();

      this._createMap();
    };

    /* webgl-lint@1.6.0, license MIT */
    (function (factory) {
      typeof define === 'function' && define.amd ? define(factory) :
      factory();
    }((function () {
      function isBuiltIn(name) {
        return name.startsWith('gl_') || name.startsWith('webgl_');
      }

      function isWebGL2(gl) {
        // a proxy for if this is webgl
        return !!gl.texImage3D;
      }

      function isTypedArray(v) {
        return v && v.buffer && v.buffer instanceof ArrayBuffer;
      }

      function isArrayThatCanHaveBadValues(v) {
        return Array.isArray(v) ||
               v instanceof Float32Array ||
               v instanceof Float64Array;
      }

      function quotedStringOrEmpty(s) {
        return s ? `"${s}"` : '';
      }

      /**
       * Map of names to numbers.
       * @type {Object}
       */
      const enumStringToValue = {};

      function enumArrayToString(gl, enums) {
        const enumStrings = [];
        if (enums.length) {
          for (let i = 0; i < enums.length; ++i) {
            enums.push(glEnumToString(enums[i]));  // eslint-disable-line
          }
          return '[' + enumStrings.join(', ') + ']';
        }
        return enumStrings.toString();
      }

      function makeBitFieldToStringFunc(enums) {
        return function(gl, value) {
          let orResult = 0;
          const orEnums = [];
          for (let i = 0; i < enums.length; ++i) {
            const enumValue = enumStringToValue[enums[i]];
            if ((value & enumValue) !== 0) {
              orResult |= enumValue;
              orEnums.push(glEnumToString(enumValue));  // eslint-disable-line
            }
          }
          if (orResult === value) {
            return orEnums.join(' | ');
          } else {
            return glEnumToString(value);  // eslint-disable-line
          }
        };
      }

      /** @type Map<int, Set<string>> */
      const enumToStringsMap = new Map();
      function addEnumsFromAPI(api) {
        for (const key in api) {
          const value = api[key];
          if (typeof value === 'number') {
            if (!enumToStringsMap.has(value)) {
              enumToStringsMap.set(value, new Set());
            }
            enumToStringsMap.get(value).add(key);
          }
        }
      }

      /**
       * Gets an string version of an WebGL enum.
       *
       * Example:
       *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
       *
       * @param {number} value Value to return an enum for
       * @return {string} The string version of the enum.
       */
      function glEnumToString(value) {
        const matches = enumToStringsMap.get(value);
        return matches
            ? [...matches.keys()].map(v => `${v}`).join(' | ')
            : `/*UNKNOWN WebGL ENUM*/ ${typeof value === 'number' ? `0x${value.toString(16)}` : value}`;
      }

      // ---------------------------------
      const FLOAT                         = 0x1406;
      const FLOAT_VEC2                    = 0x8B50;
      const FLOAT_VEC3                    = 0x8B51;
      const FLOAT_VEC4                    = 0x8B52;
      const INT                           = 0x1404;
      const INT_VEC2                      = 0x8B53;
      const INT_VEC3                      = 0x8B54;
      const INT_VEC4                      = 0x8B55;
      const BOOL                          = 0x8B56;
      const BOOL_VEC2                     = 0x8B57;
      const BOOL_VEC3                     = 0x8B58;
      const BOOL_VEC4                     = 0x8B59;
      const FLOAT_MAT2                    = 0x8B5A;
      const FLOAT_MAT3                    = 0x8B5B;
      const FLOAT_MAT4                    = 0x8B5C;
      const SAMPLER_2D                    = 0x8B5E;
      const SAMPLER_CUBE                  = 0x8B60;
      const SAMPLER_3D                    = 0x8B5F;
      const SAMPLER_2D_SHADOW             = 0x8B62;
      const FLOAT_MAT2x3                  = 0x8B65;
      const FLOAT_MAT2x4                  = 0x8B66;
      const FLOAT_MAT3x2                  = 0x8B67;
      const FLOAT_MAT3x4                  = 0x8B68;
      const FLOAT_MAT4x2                  = 0x8B69;
      const FLOAT_MAT4x3                  = 0x8B6A;
      const SAMPLER_2D_ARRAY              = 0x8DC1;
      const SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;
      const SAMPLER_CUBE_SHADOW           = 0x8DC5;
      const UNSIGNED_INT                  = 0x1405;
      const UNSIGNED_INT_VEC2             = 0x8DC6;
      const UNSIGNED_INT_VEC3             = 0x8DC7;
      const UNSIGNED_INT_VEC4             = 0x8DC8;
      const INT_SAMPLER_2D                = 0x8DCA;
      const INT_SAMPLER_3D                = 0x8DCB;
      const INT_SAMPLER_CUBE              = 0x8DCC;
      const INT_SAMPLER_2D_ARRAY          = 0x8DCF;
      const UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;
      const UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;
      const UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;
      const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

      const uniformTypeMap = new Map([
        [FLOAT,                          { size:  1, name: 'float', }],
        [FLOAT_VEC2,                     { size:  2, name: 'vec2', }],
        [FLOAT_VEC3,                     { size:  3, name: 'vec3', }],
        [FLOAT_VEC4,                     { size:  4, name: 'vec4', }],
        [INT,                            { size:  1, name: 'int', }],
        [INT_VEC2,                       { size:  2, name: 'ivec2', }],
        [INT_VEC3,                       { size:  3, name: 'ivec3', }],
        [INT_VEC4,                       { size:  4, name: 'ivec4', }],
        [UNSIGNED_INT,                   { size:  1, name: 'uint', }],
        [UNSIGNED_INT_VEC2,              { size:  2, name: 'uvec2', }],
        [UNSIGNED_INT_VEC3,              { size:  3, name: 'uvec3', }],
        [UNSIGNED_INT_VEC4,              { size:  4, name: 'uvec4', }],
        [BOOL,                           { size:  1, name: 'bool', }],
        [BOOL_VEC2,                      { size:  2, name: 'bvec2', }],
        [BOOL_VEC3,                      { size:  3, name: 'bvec3', }],
        [BOOL_VEC4,                      { size:  4, name: 'bvec4', }],
        [FLOAT_MAT2,                     { size:  4, name: 'mat2', }],
        [FLOAT_MAT3,                     { size:  9, name: 'mat3', }],
        [FLOAT_MAT4,                     { size: 16, name: 'mat4', }],
        [FLOAT_MAT2x3,                   { size:  6, name: 'mat2x3', }],
        [FLOAT_MAT2x4,                   { size:  8, name: 'mat2x4', }],
        [FLOAT_MAT3x2,                   { size:  6, name: 'mat3x2', }],
        [FLOAT_MAT3x4,                   { size: 12, name: 'mat3x4', }],
        [FLOAT_MAT4x2,                   { size:  8, name: 'mat4x2', }],
        [FLOAT_MAT4x3,                   { size: 12, name: 'mat4x3', }],
        [SAMPLER_2D,                     { size:  1, name: 'sampler2D', }],
        [SAMPLER_CUBE,                   { size:  1, name: 'samplerCube', }],
        [SAMPLER_3D,                     { size:  1, name: 'sampler3D', }],
        [SAMPLER_2D_SHADOW,              { size:  1, name: 'sampler2DShadow', }],
        [SAMPLER_2D_ARRAY,               { size:  1, name: 'sampler2DArray', }],
        [SAMPLER_2D_ARRAY_SHADOW,        { size:  1, name: 'sampler2DArrayShadow', }],
        [SAMPLER_CUBE_SHADOW,            { size:  1, name: 'samplerCubeShadow', }],
        [INT_SAMPLER_2D,                 { size:  1, name: 'isampler2D', }],
        [INT_SAMPLER_3D,                 { size:  1, name: 'isampler3D', }],
        [INT_SAMPLER_CUBE,               { size:  1, name: 'isamplerCube', }],
        [INT_SAMPLER_2D_ARRAY,           { size:  1, name: 'isampler2DArray', }],
        [UNSIGNED_INT_SAMPLER_2D,        { size:  1, name: 'usampler2D', }],
        [UNSIGNED_INT_SAMPLER_3D,        { size:  1, name: 'usampler3D', }],
        [UNSIGNED_INT_SAMPLER_CUBE,      { size:  1, name: 'usamplerCube', }],
        [UNSIGNED_INT_SAMPLER_2D_ARRAY,  { size:  1, name: 'usampler2DArray', }],
      ]);

      function getUniformTypeInfo(type) {
        return uniformTypeMap.get(type);
      }

      // ---------------------------------


      const TEXTURE_BINDING_2D            = 0x8069;
      const TEXTURE_BINDING_CUBE_MAP      = 0x8514;
      const TEXTURE_BINDING_3D            = 0x806A;
      const TEXTURE_BINDING_2D_ARRAY      = 0x8C1D;


      const ARRAY_BUFFER                   = 0x8892;
      const ELEMENT_ARRAY_BUFFER           = 0x8893;
      const ARRAY_BUFFER_BINDING           = 0x8894;
      const ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;
      const TEXTURE_2D                     = 0x0DE1;
      const TEXTURE_3D                     = 0x806F;
      const TEXTURE_2D_ARRAY               = 0x8C1A;
      const TEXTURE_CUBE_MAP               = 0x8513;
      const FRAMEBUFFER                    = 0x8D40;
      const RENDERBUFFER                   = 0x8D41;
      const FRAMEBUFFER_BINDING            = 0x8CA6;
      const RENDERBUFFER_BINDING           = 0x8CA7;
      const TRANSFORM_FEEDBACK_BUFFER      = 0x8C8E;
      const TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
      const DRAW_FRAMEBUFFER               = 0x8CA9;
      const READ_FRAMEBUFFER               = 0x8CA8;
      const READ_FRAMEBUFFER_BINDING       = 0x8CAA;
      const UNIFORM_BUFFER                 = 0x8A11;
      const UNIFORM_BUFFER_BINDING         = 0x8A28;
      const TRANSFORM_FEEDBACK             = 0x8E22;
      const TRANSFORM_FEEDBACK_BINDING     = 0x8E25;

      const bindPointMap = new Map([
        [ARRAY_BUFFER, ARRAY_BUFFER_BINDING],
        [ELEMENT_ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER_BINDING],
        [TEXTURE_2D, TEXTURE_BINDING_2D],
        [TEXTURE_CUBE_MAP, TEXTURE_BINDING_CUBE_MAP],
        [TEXTURE_3D, TEXTURE_BINDING_3D],
        [TEXTURE_2D_ARRAY, TEXTURE_BINDING_2D_ARRAY],
        [RENDERBUFFER, RENDERBUFFER_BINDING],
        [FRAMEBUFFER, FRAMEBUFFER_BINDING],
        [DRAW_FRAMEBUFFER, FRAMEBUFFER_BINDING],
        [READ_FRAMEBUFFER, READ_FRAMEBUFFER_BINDING],
        [UNIFORM_BUFFER, UNIFORM_BUFFER_BINDING],
        [TRANSFORM_FEEDBACK_BUFFER, TRANSFORM_FEEDBACK_BUFFER_BINDING],
        [TRANSFORM_FEEDBACK, TRANSFORM_FEEDBACK_BINDING],
      ]);

      function getBindingQueryEnumForBindPoint(bindPoint) {
        return bindPointMap.get(bindPoint);
      }

      const BYTE                         = 0x1400;
      const SHORT                        = 0x1402;
      const UNSIGNED_BYTE                = 0x1401;
      const UNSIGNED_SHORT               = 0x1403;

      const glTypeToSizeMap = new Map([
        [BOOL           , 1],
        [BYTE           , 1],
        [UNSIGNED_BYTE  , 1],
        [SHORT          , 2],
        [UNSIGNED_SHORT , 2],
        [INT            , 4],
        [UNSIGNED_INT   , 4],
        [FLOAT          , 4],
      ]);

      function getBytesPerValueForGLType(type) {
        return glTypeToSizeMap.get(type) || 0;
      }

      const glTypeToTypedArrayMap = new Map([
        [UNSIGNED_BYTE,  Uint8Array],
        [UNSIGNED_SHORT, Uint16Array],
        [UNSIGNED_INT,   Uint32Array],
      ]);

      function glTypeToTypedArray(type) {
        return glTypeToTypedArrayMap.get(type);
      }

      const drawFuncsToArgs = {
        drawArrays(primType, startOffset, vertCount) {
          return {startOffset, vertCount, instances: 1};
        },
        drawElements(primType, vertCount, indexType, startOffset) {
          return {startOffset, vertCount, instances: 1, indexType};
        },
        drawArraysInstanced(primType, startOffset, vertCount, instances) {
          return {startOffset, vertCount, instances};
          },
        drawElementsInstanced(primType, vertCount, indexType, startOffset, instances) {
          return {startOffset, vertCount, instances, indexType};
          },
        drawArraysInstancedANGLE(primType, startOffset, vertCount, instances) {
          return {startOffset, vertCount, instances};
          },
        drawElementsInstancedANGLE(primType, vertCount, indexType, startOffset, instances) {
          return {startOffset, vertCount, instances, indexType};
          },
        drawRangeElements(primType, start, end, vertCount, indexType, startOffset) {
          return {startOffset, vertCount, instances: 1, indexType};
          },
      };

      function getDrawFunctionArgs(funcName, args) {
        return drawFuncsToArgs[funcName](...args);
      }

      function isDrawFunction(funcName) {
        return !!drawFuncsToArgs[funcName];
      }

      const attrTypeMap = new Map([
        [FLOAT,              { size:  4, }],
        [FLOAT_VEC2,         { size:  8, }],
        [FLOAT_VEC3,         { size: 12, }],
        [FLOAT_VEC4,         { size: 16, }],
        [INT,                { size:  4, }],
        [INT_VEC2,           { size:  8, }],
        [INT_VEC3,           { size: 12, }],
        [INT_VEC4,           { size: 16, }],
        [UNSIGNED_INT,       { size:  4, }],
        [UNSIGNED_INT_VEC2,  { size:  8, }],
        [UNSIGNED_INT_VEC3,  { size: 12, }],
        [UNSIGNED_INT_VEC4,  { size: 16, }],
        [BOOL,               { size:  4, }],
        [BOOL_VEC2,          { size:  8, }],
        [BOOL_VEC3,          { size: 12, }],
        [BOOL_VEC4,          { size: 16, }],
        [FLOAT_MAT2,         { size:  4, count: 2, }],
        [FLOAT_MAT3,         { size:  9, count: 3, }],
        [FLOAT_MAT4,         { size: 16, count: 4, }],
      ]);

      function getAttributeTypeInfo(type) {
        return attrTypeMap.get(type);
      }

      const VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;

      function computeLastUseIndexForDrawArrays(startOffset, vertCount/*, instances, errors*/) {
        return startOffset + vertCount - 1;
      }

      function getLastUsedIndexForDrawElements(gl, funcName, startOffset, vertCount, instances, indexType, getWebGLObjectString, getIndicesForBuffer, errors) {
        const elementBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
        if (!elementBuffer) {
          errors.push('No ELEMENT_ARRAY_BUFFER bound');
          return undefined;
        }
        const bytesPerIndex = getBytesPerValueForGLType(indexType);
        const bufferSize = gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE);
        const sizeNeeded = startOffset + vertCount * bytesPerIndex;
        if (sizeNeeded > bufferSize) {
          errors.push(`offset: ${startOffset} and count: ${vertCount} with index type: ${glEnumToString(indexType)} passed to ${funcName} are out of range for current ELEMENT_ARRAY_BUFFER.
Those parameters require ${sizeNeeded} bytes but the current ELEMENT_ARRAY_BUFFER ${getWebGLObjectString(elementBuffer)} only has ${bufferSize} bytes`);
          return undefined;
        }
        const buffer = getIndicesForBuffer(elementBuffer);
        const Type = glTypeToTypedArray(indexType);
        const view = new Type(buffer, startOffset);
        let maxIndex = view[0];
        for (let i = 1; i < vertCount; ++i) {
          maxIndex = Math.max(maxIndex, view[i]);
        }
        return maxIndex;
      }


      function checkAttributesForBufferOverflow(gl, funcName, args, getWebGLObjectString, getIndicesForBuffer) {
        const {vertCount, startOffset, indexType, instances} = getDrawFunctionArgs(funcName, args);
        if (vertCount <= 0 || instances <= 0) {
          return [];
        }
        const program = gl.getParameter(gl.CURRENT_PROGRAM);
        const errors = [];
        const nonInstancedLastIndex = indexType
            ? getLastUsedIndexForDrawElements(gl, funcName, startOffset, vertCount, instances, indexType, getWebGLObjectString, getIndicesForBuffer, errors)
            : computeLastUseIndexForDrawArrays(startOffset, vertCount);
        if (errors.length) {
          return errors;
        }

        const hasDivisor = isWebGL2(gl) || gl.getExtension('ANGLE_instanced_arrays');

        // get the attributes used by the current program
        const numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        const oldArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);
        for (let ii = 0; ii < numAttributes; ++ii) {
          const {name, type} = gl.getActiveAttrib(program, ii);
          if (isBuiltIn(name)) {
            continue;
          }
          const index = gl.getAttribLocation(program, name);
          const {count} = {count: 1, ...getAttributeTypeInfo(type)};
          for (let jj = 0; jj < count; ++jj) {
            const ndx = index + jj;
            const enabled = gl.getVertexAttrib(ndx, gl.VERTEX_ATTRIB_ARRAY_ENABLED);
            if (!enabled) {
              continue;
            }
            const buffer = gl.getVertexAttrib(ndx, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
            if (!buffer) {
              errors.push(`no buffer bound to attribute (${name}) location: ${index}`);
              continue;
            }
            const numComponents = gl.getVertexAttrib(ndx, gl.VERTEX_ATTRIB_ARRAY_SIZE);
            const type = gl.getVertexAttrib(ndx, gl.VERTEX_ATTRIB_ARRAY_TYPE);
            const bytesPerElement = getBytesPerValueForGLType(type) * numComponents;
            const offset = gl.getVertexAttribOffset(ndx, gl.VERTEX_ATTRIB_ARRAY_POINTER);
            const specifiedStride = gl.getVertexAttrib(ndx, gl.VERTEX_ATTRIB_ARRAY_STRIDE);
            const stride = specifiedStride ? specifiedStride : bytesPerElement;
            const divisor = hasDivisor
                ? gl.getVertexAttrib(ndx, VERTEX_ATTRIB_ARRAY_DIVISOR)
                : 0;
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            const bufferSize = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);
            const effectiveLastIndex = divisor > 0
                ? ((instances + divisor - 1) / divisor | 0) - 1
                : nonInstancedLastIndex;
            const sizeNeeded = offset + effectiveLastIndex * stride + bytesPerElement;
            if (sizeNeeded > bufferSize) {
              errors.push(`${getWebGLObjectString(buffer)} assigned to attribute ${ndx} used as attribute '${name}' in current program is too small for draw parameters.
index of highest vertex accessed: ${effectiveLastIndex}
attribute size: ${numComponents}, type: ${glEnumToString(type)}, stride: ${specifiedStride}, offset: ${offset}, divisor: ${divisor}
needs ${sizeNeeded} bytes for draw but buffer is only ${bufferSize} bytes`);
            }
          }
        }
        gl.bindBuffer(gl.ARRAY_BUFFER, oldArrayBuffer);
        return errors;
      }

      const SAMPLER_2D$1                    = 0x8B5E;
      const SAMPLER_CUBE$1                  = 0x8B60;
      const SAMPLER_3D$1                    = 0x8B5F;
      const SAMPLER_2D_SHADOW$1             = 0x8B62;
      const SAMPLER_2D_ARRAY$1              = 0x8DC1;
      const SAMPLER_2D_ARRAY_SHADOW$1       = 0x8DC4;
      const SAMPLER_CUBE_SHADOW$1           = 0x8DC5;
      const INT_SAMPLER_2D$1                = 0x8DCA;
      const INT_SAMPLER_3D$1                = 0x8DCB;
      const INT_SAMPLER_CUBE$1              = 0x8DCC;
      const INT_SAMPLER_2D_ARRAY$1          = 0x8DCF;
      const UNSIGNED_INT_SAMPLER_2D$1       = 0x8DD2;
      const UNSIGNED_INT_SAMPLER_3D$1       = 0x8DD3;
      const UNSIGNED_INT_SAMPLER_CUBE$1     = 0x8DD4;
      const UNSIGNED_INT_SAMPLER_2D_ARRAY$1 = 0x8DD7;

      const samplerTypes = new Map([
        [SAMPLER_2D$1,                    {uniformType: 'sampler2D',       numberType: 'float/normalized', bindPoint: '2D'}],
        [SAMPLER_CUBE$1,                  {uniformType: 'samplerCube',     numberType: 'float/normalized', bindPoint: 'CUBE'}],
        [SAMPLER_3D$1,                    {uniformType: 'sampler3D',       numberType: 'float/normalized', bindPoint: '3D'}],
        [SAMPLER_2D_SHADOW$1,             {uniformType: 'sampler2D',       numberType: 'float/normalized', bindPoint: '2D'}],
        [SAMPLER_2D_ARRAY$1,              {uniformType: 'sampler2DArray',  numberType: 'float/normalized', bindPoint: '2D_ARRAY'}],
        [SAMPLER_2D_ARRAY_SHADOW$1,       {uniformType: 'sampler2DArray',  numberType: 'float/normalized', bindPoint: '2D_ARRAY'}],
        [SAMPLER_CUBE_SHADOW$1,           {uniformType: 'samplerCube',     numberType: 'float/normalized', bindPoint: 'CUBE'}],
        [INT_SAMPLER_2D$1,                {uniformType: 'isampler2D',      numberType: 'int',              bindPoint: '2D'}],
        [INT_SAMPLER_3D$1,                {uniformType: 'isampler3D',      numberType: 'int',              bindPoint: '3D'}],
        [INT_SAMPLER_CUBE$1,              {uniformType: 'isamplerCube',    numberType: 'int',              bindPoint: 'CUBE'}],
        [INT_SAMPLER_2D_ARRAY$1,          {uniformType: 'isampler2DArray', numberType: 'int',              bindPoint: '2D_ARRAY'}],
        [UNSIGNED_INT_SAMPLER_2D$1,       {uniformType: 'usampler2D',      numberType: 'unsigned int',     bindPoint: '2D'}],
        [UNSIGNED_INT_SAMPLER_3D$1,       {uniformType: 'usampler3D',      numberType: 'unsigned int',     bindPoint: '3D'}],
        [UNSIGNED_INT_SAMPLER_CUBE$1,     {uniformType: 'usamplerCube',    numberType: 'unsigned int',     bindPoint: 'CUBE'}],
        [UNSIGNED_INT_SAMPLER_2D_ARRAY$1, {uniformType: 'usampler2DArray', numberType: 'unsigned int',     bindPoint: '2D_ARRAY'}],
      ]);

      function getBindPointForSampler(type) {
        return samplerTypes.get(type).bindPoint;
      }

      function uniformTypeIsSampler(type) {
        return samplerTypes.has(type);
      }

      function getNumberTypeForUniformSamplerType(type) {
        return samplerTypes.get(type).numberType;
      }

      function getUniformTypeForUniformSamplerType(type) {
        return samplerTypes.get(type).uniformType;
      }

      const TEXTURE_2D$1                     = 0x0DE1;
      const TEXTURE_3D$1                     = 0x806F;
      const TEXTURE_2D_ARRAY$1               = 0x8C1A;
      const TEXTURE_CUBE_MAP$1               = 0x8513;
      const TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
      const TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
      const TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
      const TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
      const TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
      const TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;

      const targetToBindPointMap = new Map([
        [TEXTURE_2D$1, '2D'],
        [TEXTURE_3D$1, '3D'],
        [TEXTURE_CUBE_MAP$1, 'CUBE'],
        [TEXTURE_CUBE_MAP_POSITIVE_X, 'CUBE'],
        [TEXTURE_CUBE_MAP_NEGATIVE_X, 'CUBE'],
        [TEXTURE_CUBE_MAP_POSITIVE_Y, 'CUBE'],
        [TEXTURE_CUBE_MAP_NEGATIVE_Y, 'CUBE'],
        [TEXTURE_CUBE_MAP_POSITIVE_Z, 'CUBE'],
        [TEXTURE_CUBE_MAP_NEGATIVE_Z, 'CUBE'],
        [TEXTURE_2D_ARRAY$1, '2D_ARRAY'],
      ]);

      function getBindPointForTarget(target) {
        return targetToBindPointMap.get(target);
      }

      const TEXTURE_BINDING_2D$1            = 0x8069;
      const TEXTURE_BINDING_CUBE_MAP$1      = 0x8514;
      const TEXTURE_BINDING_3D$1            = 0x806A;
      const TEXTURE_BINDING_2D_ARRAY$1      = 0x8C1D;

      const samplerTypeToBinding = new Map([
        [SAMPLER_2D$1, TEXTURE_BINDING_2D$1],
        [SAMPLER_2D_SHADOW$1, TEXTURE_BINDING_2D$1],
        [SAMPLER_3D$1, TEXTURE_BINDING_3D$1],
        [SAMPLER_2D_ARRAY$1, TEXTURE_BINDING_2D_ARRAY$1],
        [SAMPLER_2D_ARRAY_SHADOW$1, TEXTURE_BINDING_2D_ARRAY$1],
        [SAMPLER_CUBE$1, TEXTURE_BINDING_CUBE_MAP$1],
        [SAMPLER_CUBE_SHADOW$1, TEXTURE_BINDING_CUBE_MAP$1],
      ]);

      function getTextureForUnit(gl, unit, type) {
        gl.activeTexture(gl.TEXTURE0 + unit);
        const binding = samplerTypeToBinding.get(type);
        return gl.getParameter(binding);
      }

      /* global WebGLTexture */

      const MAX_COLOR_ATTACHMENTS = 0x8CDF;

      function getMaxColorAttachments(gl) {
        if (!isWebGL2(gl)) {
          const ext = gl.getExtension('WEBGL_draw_buffers');
          if (!ext) {
            return 1;
          }
        }
        return gl.getParameter(MAX_COLOR_ATTACHMENTS);
      }

      /**
       * slow non-cached version
       * @param {WebGLRenderingContext} gl
       * @param {number} attachment
       * @param {Map<WebGLTexture, [number]>} textureAttachments
       */
      function addTextureAttachment(gl, attachment, textureAttachments) {
        const type = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, attachment, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
        if (type === gl.NONE) {
          return;
        }
        const obj = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, attachment, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);
        if (obj instanceof WebGLTexture) {
          if (!textureAttachments.has(obj)) {
            textureAttachments.set(obj, []);
          }
          textureAttachments.get(obj).push(attachment);
        }
      }

      /**
       * slow non-cached version
       * @param {WebGLRenderingContext} gl
       */
      function checkFramebufferFeedback(gl, getWebGLObjectString) {
        const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
        if (!framebuffer) {
          // drawing to canvas
          return [];
        }

        // get framebuffer texture attachments
        const maxColorAttachments = getMaxColorAttachments(gl);
        const textureAttachments = new Map();
        for (let i = 0; i < maxColorAttachments; ++i) {
          addTextureAttachment(gl, gl.COLOR_ATTACHMENT0 + i, textureAttachments);
        }
        addTextureAttachment(gl, gl.DEPTH_ATTACHMENT, textureAttachments);
        addTextureAttachment(gl, gl.STENCIL_ATTACHMENT, textureAttachments);

        if (!isWebGL2(gl)) {
          addTextureAttachment(gl, gl.DEPTH_STENCIL_ATTACHMENT, textureAttachments);
        }

        const oldActiveTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
        const program = gl.getParameter(gl.CURRENT_PROGRAM);
        // get the texture units used by the current program
        const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        const errors = [];
        for (let ii = 0; ii < numUniforms; ++ii) {
          const {name, type, size} = gl.getActiveUniform(program, ii);
          if (isBuiltIn(name) || !uniformTypeIsSampler(type)) {
            continue;
          }

          if (size > 1) {
            const baseName = (name.substr(-3) === '[0]')
                ? name.substr(0, name.length - 3)
                : name;
            for (let t = 0; t < size; ++t) {
              errors.push(...checkTextureUsage(gl, framebuffer, textureAttachments, program, `${baseName}[${t}]`, type, getWebGLObjectString));
            }
          } else {
            errors.push(...checkTextureUsage(gl, framebuffer, textureAttachments, program, name, type, getWebGLObjectString));
          }
        }
        gl.activeTexture(oldActiveTexture);

        return errors;
      }

      function checkTextureUsage(gl, framebuffer, textureAttachments, program, uniformName, uniformType, getWebGLObjectString) {
        const location = gl.getUniformLocation(program, uniformName);
        const textureUnit = gl.getUniform(program, location);
        const texture = getTextureForUnit(gl, textureUnit, uniformType);
        const attachments = textureAttachments.get(texture);
        return attachments
           ? [`${getWebGLObjectString(texture)} on uniform: ${uniformName} bound to texture unit ${textureUnit} is also attached to ${getWebGLObjectString(framebuffer)} on attachment: ${attachments.map(a => glEnumToString(a)).join(', ')}`]
           : [];
      }

      /* global navigator */

      // adapted from http://stackoverflow.com/a/2401861/128511
      function getBrowser() {
        const userAgent = navigator.userAgent;
        let m = userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (/trident/i.test(m[1])) {
          m = /\brv[ :]+(\d+)/g.exec(userAgent) || [];
          return {
            name: 'IE',
            version: m[1],
          };
        }
        if (m[1] === 'Chrome') {
          const temp = userAgent.match(/\b(OPR|Edge)\/(\d+)/);
          if (temp) {
            return {
              name: temp[1].replace('OPR', 'Opera'),
              version: temp[2],
            };
          }
        }
        m = m[2] ? [m[1], m[2]] : [navigator.appName, navigator.appVersion, '-?'];
        const version = userAgent.match(/version\/(\d+)/i);
        if (version) {
          m.splice(1, 1, version[1]);
        }
        return {
          name: m[0],
          version: m[1],
        };
      }

      /**
       * @typedef {Object} StackInfo
       * @property {string} url Url of line
       * @property {number} lineNo line number of error
       * @property {number} colNo column number of error
       * @property {string} [funcName] name of function
       */

      /**
       * @parameter {string} stack A stack string as in `(new Error()).stack`
       * @returns {StackInfo}
       */
      const parseStack = function() {
        const browser = getBrowser();
        let lineNdx;
        let matcher;
        if ((/chrome|opera/i).test(browser.name)) {
          lineNdx = 3;
          matcher = function(line) {
            const m = /at ([^(]+)*\(*(.*?):(\d+):(\d+)/.exec(line);
            if (m) {
              let userFnName = m[1];
              let url = m[2];
              const lineNo = parseInt(m[3]);
              const colNo = parseInt(m[4]);
              if (url === '') {
                url = userFnName;
                userFnName = '';
              }
              return {
                url: url,
                lineNo: lineNo,
                colNo: colNo,
                funcName: userFnName,
              };
            }
            return undefined;
          };
        } else if ((/firefox|safari/i).test(browser.name)) {
          lineNdx = 2;
          matcher = function(line) {
            const m = /@(.*?):(\d+):(\d+)/.exec(line);
            if (m) {
              const url = m[1];
              const lineNo = parseInt(m[2]);
              const colNo = parseInt(m[3]);
              return {
                url: url,
                lineNo: lineNo,
                colNo: colNo,
              };
            }
            return undefined;
          };
        }

        return function stackParser(stack) {
          if (matcher) {
            try {
              const lines = stack.split('\n');
              // window.fooLines = lines;
              // lines.forEach(function(line, ndx) {
              //   origConsole.log("#", ndx, line);
              // });
              return matcher(lines[lineNdx]);
            } catch (e) {
              // do nothing
            }
          }
          return undefined;
        };
      }();

      function createTextureUnits(gl) {
        const textureUnits = [];
        const numUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
        for (let i = 0; i < numUnits; ++i) {
          textureUnits.push(new Map());
        }
        return textureUnits;
      }

      const TEXTURE0                       = 0x84C0;
      const TEXTURE_2D$2                     = 0x0DE1;
      const TEXTURE_3D$2                     = 0x806F;
      const TEXTURE_CUBE_MAP$2               = 0x8513;
      const TEXTURE_CUBE_MAP_POSITIVE_X$1    = 0x8515;
      const TEXTURE_CUBE_MAP_NEGATIVE_X$1    = 0x8516;
      const TEXTURE_CUBE_MAP_POSITIVE_Y$1    = 0x8517;
      const TEXTURE_CUBE_MAP_NEGATIVE_Y$1    = 0x8518;
      const TEXTURE_CUBE_MAP_POSITIVE_Z$1    = 0x8519;
      const TEXTURE_CUBE_MAP_NEGATIVE_Z$1    = 0x851A;
      const TEXTURE_MIN_FILTER             = 0x2801;
      const TEXTURE_MAG_FILTER             = 0x2800;
      const TEXTURE_BASE_LEVEL             = 0x813c;  // int
      const TEXTURE_MAX_LEVEL              = 0x813d;  // int
      const TEXTURE_WRAP_S                 = 0x2802;
      const TEXTURE_WRAP_T                 = 0x2803;
      const REPEAT                         = 0x2901;
      const TEXTURE_2D_ARRAY$2               = 0x8C1A;
      const CLAMP_TO_EDGE                  = 0x812F;
      const NEAREST                        = 0x2600;
      const LINEAR                         = 0x2601;
      const NEAREST_MIPMAP_LINEAR          = 0x2702;

      const texImage2DArgParersMap = new Map([
        [9, function([target, level, internalFormat, width, height, , format, type]) {
          return {target, level, internalFormat, width, height, format, type};
        }, ],
        [6, function([target, level, internalFormat, format, type, texImageSource]) {
          return {target, level, internalFormat, width: texImageSource.width, height: texImageSource.height, format, type};
        }, ],
        [10, function([target, level, internalFormat, width, height, , format, type]) {
          return {target, level, internalFormat, width, height, format, type};
        }, ],
      ]);

      const ALPHA                          = 0x1906;
      const RGB                            = 0x1907;
      const RGBA                           = 0x1908;
      const LUMINANCE                      = 0x1909;
      const LUMINANCE_ALPHA                = 0x190A;
      const DEPTH_COMPONENT                = 0x1902;
      const DEPTH_STENCIL                  = 0x84F9;

      const unsizedInternalFormats = new Set([
        ALPHA,
        LUMINANCE,
        LUMINANCE_ALPHA,
        RGB,
        RGBA,
      ]);

      function getInternalFormatStringForInternalFormatType(internalFormat, type) {
        return unsizedInternalFormats.has(internalFormat)
           ? `${glEnumToString(internalFormat)}/${glEnumToString(type)}`
           : glEnumToString(internalFormat);
      }

      const targetToFaceIndex = new Map([
        [TEXTURE_2D$2, 0],
        [TEXTURE_3D$2, 0],
        [TEXTURE_2D_ARRAY$2, 0],
        [TEXTURE_CUBE_MAP$2, 0],
        [TEXTURE_CUBE_MAP_POSITIVE_X$1, 0],
        [TEXTURE_CUBE_MAP_NEGATIVE_X$1, 1],
        [TEXTURE_CUBE_MAP_POSITIVE_Y$1, 2],
        [TEXTURE_CUBE_MAP_NEGATIVE_Y$1, 3],
        [TEXTURE_CUBE_MAP_POSITIVE_Z$1, 4],
        [TEXTURE_CUBE_MAP_NEGATIVE_Z$1, 5],
      ]);

      function getFaceTarget(face, type) {
        if (type === TEXTURE_CUBE_MAP$2) {
          return `(${glEnumToString(TEXTURE_CUBE_MAP_POSITIVE_X$1 + face)})`;
        } else {
          return '';
        }
      }

      /*
      const targetToBindPointMap = new Map([
        [TEXTURE_2D, TEXTURE_2D],
        [TEXTURE_3D, TEXTURE_3D],
        [TEXTURE_2D_ARRAY, TEXTURE_2D_ARRAY],
        [TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP],
        [TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP],
        [TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_MAP],
        [TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP],
        [TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP],
        [TEXTURE_CUBE_MAP_NEGATIVE_Z, TEXTURE_CUBE_MAP],
      ]);
      */

      const R8                           = 0x8229;
      const R8_SNORM                     = 0x8F94;
      const R16F                         = 0x822D;
      const R32F                         = 0x822E;
      const R8UI                         = 0x8232;
      const R8I                          = 0x8231;
      const RG16UI                       = 0x823A;
      const RG16I                        = 0x8239;
      const RG32UI                       = 0x823C;
      const RG32I                        = 0x823B;
      const RG8                          = 0x822B;
      const RG8_SNORM                    = 0x8F95;
      const RG16F                        = 0x822F;
      const RG32F                        = 0x8230;
      const RG8UI                        = 0x8238;
      const RG8I                         = 0x8237;
      const R16UI                        = 0x8234;
      const R16I                         = 0x8233;
      const R32UI                        = 0x8236;
      const R32I                         = 0x8235;
      const RGB8                         = 0x8051;
      const SRGB8                        = 0x8C41;
      const RGB565                       = 0x8D62;
      const RGB8_SNORM                   = 0x8F96;
      const R11F_G11F_B10F               = 0x8C3A;
      const RGB9_E5                      = 0x8C3D;
      const RGB16F                       = 0x881B;
      const RGB32F                       = 0x8815;
      const RGB8UI                       = 0x8D7D;
      const RGB8I                        = 0x8D8F;
      const RGB16UI                      = 0x8D77;
      const RGB16I                       = 0x8D89;
      const RGB32UI                      = 0x8D71;
      const RGB32I                       = 0x8D83;
      const RGBA8                        = 0x8058;
      const SRGB8_ALPHA8                 = 0x8C43;
      const RGBA8_SNORM                  = 0x8F97;
      const RGB5_A1                      = 0x8057;
      const RGBA4                        = 0x8056;
      const RGB10_A2                     = 0x8059;
      const RGBA16F                      = 0x881A;
      const RGBA32F                      = 0x8814;
      const RGBA8UI                      = 0x8D7C;
      const RGBA8I                       = 0x8D8E;
      const RGB10_A2UI                   = 0x906F;
      const RGBA16UI                     = 0x8D76;
      const RGBA16I                      = 0x8D88;
      const RGBA32I                      = 0x8D82;
      const RGBA32UI                     = 0x8D70;

      const DEPTH_COMPONENT16            = 0x81A5;
      const DEPTH_COMPONENT24            = 0x81A6;
      const DEPTH_COMPONENT32F           = 0x8CAC;
      const DEPTH32F_STENCIL8            = 0x8CAD;
      const DEPTH24_STENCIL8             = 0x88F0;

      /* DataType */
      const BYTE$1                         = 0x1400;
      const UNSIGNED_BYTE$1                = 0x1401;
      const SHORT$1                        = 0x1402;
      const UNSIGNED_SHORT$1               = 0x1403;
      const INT$1                          = 0x1404;
      const UNSIGNED_INT$1                 = 0x1405;
      const FLOAT$1                        = 0x1406;
      const UNSIGNED_SHORT_4_4_4_4       = 0x8033;
      const UNSIGNED_SHORT_5_5_5_1       = 0x8034;
      const UNSIGNED_SHORT_5_6_5         = 0x8363;
      const HALF_FLOAT                   = 0x140B;
      const HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(
      const UNSIGNED_INT_2_10_10_10_REV  = 0x8368;
      const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
      const UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;
      const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
      const UNSIGNED_INT_24_8            = 0x84FA;

      const RG                           = 0x8227;
      const RG_INTEGER                   = 0x8228;
      const RED                          = 0x1903;
      const RED_INTEGER                  = 0x8D94;
      const RGB_INTEGER                  = 0x8D98;
      const RGBA_INTEGER                 = 0x8D99;

      function createTextureInternalFormatInfoMap() {
        const textureInternalFormatInfoMap = new Map([
            // unsized formats
           [ALPHA,              { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1], }],
           [LUMINANCE,          { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1], }],
           [LUMINANCE_ALPHA,    { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$1], }],
           [RGB,                { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_6_5], }],
           [RGBA,               { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], }],

            // sized formats
           [R8,                 { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], }],
           [R8_SNORM,           { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$1], }],
           [R16F,               { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$1, HALF_FLOAT], }],
           [R32F,               { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], }],
           [R8UI,               { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], }],
           [R8I,                { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$1], }],
           [R16UI,              { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$1], }],
           [R16I,               { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$1], }],
           [R32UI,              { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], }],
           [R32I,               { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$1], }],
           [RG8,                { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], }],
           [RG8_SNORM,          { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$1], }],
           [RG16F,              { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$1, HALF_FLOAT], }],
           [RG32F,              { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$1], }],
           [RG8UI,              { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], }],
           [RG8I,               { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$1], }],
           [RG16UI,             { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$1], }],
           [RG16I,              { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$1], }],
           [RG32UI,             { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$1], }],
           [RG32I,              { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$1], }],
           [RGB8,               { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], }],
           [SRGB8,              { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], }],
           [RGB565,             { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_6_5], }],
           [RGB8_SNORM,         { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$1], }],
           [R11F_G11F_B10F,     { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], }],
           [RGB9_E5,            { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], }],
           [RGB16F,             { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$1, HALF_FLOAT], }],
           [RGB32F,             { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$1], }],
           [RGB8UI,             { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], }],
           [RGB8I,              { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$1], }],
           [RGB16UI,            { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$1], }],
           [RGB16I,             { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$1], }],
           [RGB32UI,            { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$1], }],
           [RGB32I,             { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$1], }],
           [RGBA8,              { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], }],
           [SRGB8_ALPHA8,       { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], }],
           [RGBA8_SNORM,        { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$1], }],
           [RGB5_A1,            { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], }],
           [RGBA4,              { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_4_4_4_4], }],
           [RGB10_A2,           { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], }],
           [RGBA16F,            { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$1, HALF_FLOAT], }],
           [RGBA32F,            { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$1], }],
           [RGBA8UI,            { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], }],
           [RGBA8I,             { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$1], }],
           [RGB10_A2UI,         { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], }],
           [RGBA16UI,           { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$1], }],
           [RGBA16I,            { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$1], }],
           [RGBA32I,            { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$1], }],
           [RGBA32UI,           { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$1], }],
            // Sized Internal
           [DEPTH_COMPONENT16,  { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$1, UNSIGNED_INT$1], }],
           [DEPTH_COMPONENT24,  { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], }],
           [DEPTH_COMPONENT32F, { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], }],
           [DEPTH24_STENCIL8,   { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], }],
           [DEPTH32F_STENCIL8,  { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], }],
        ]);

        textureInternalFormatInfoMap.forEach((info) =>{
          info.bytesPerElementMap = {};
          info.bytesPerElement.forEach(function(bytesPerElement, ndx) {
            const type = info.type[ndx];
            info.bytesPerElementMap[type] = bytesPerElement;
          });
        });

        const internalFormatStringToFormatInfoMap = new Map();
        textureInternalFormatInfoMap.forEach((info, internalFormat) => {
          if (unsizedInternalFormats.has(internalFormat)) {
            info.type.forEach(type => {
              internalFormatStringToFormatInfoMap.set(
                  getInternalFormatStringForInternalFormatType(internalFormat, type),
                  info);
            });
          } else {
            internalFormatStringToFormatInfoMap.set(
                getInternalFormatStringForInternalFormatType(internalFormat),
                info);
          }
        });

        return {
          textureInternalFormatInfoMap,
          internalFormatStringToFormatInfoMap,
        };
      }

      function isPowerOf2(value) {
        return (value & (value - 1)) === 0;
      }

      function computeNumMipsNeeded(width, height = 0, depth = 0) {
        return (Math.log2(Math.max(width, height, depth)) | 0) + 1;
      }

      function insertIf(condition, ...elements) {
        return condition ? elements : [];
      }

      function getNPotIssues(width, height) {
        return [
          ...insertIf(!isPowerOf2(width), `width(${width}) is not a power of 2`),
          ...insertIf(!isPowerOf2(height), `height(${height}) is not a power of 2`),
        ].join(' and ');
      }

      function getClampToEdgeIssues(wrapS, wrapT) {
        return [
          ...insertIf(wrapS !== CLAMP_TO_EDGE, `TEXTURE_WRAP_S (${glEnumToString(wrapS)}) is not CLAMP_TO_EDGE`),
          ...insertIf(wrapT !== CLAMP_TO_EDGE, `TEXTURE_WRAP_T (${glEnumToString(wrapT)}) is not CLAMP_TO_EDGE`),
        ].join(' and ');
      }

      function getNumberTypeForInternalFormat(internalFormat) {
        const str = glEnumToString(internalFormat);
        if (str.endsWith('UI')) {
          return 'unsigned int';
        }
        if (str.endsWith('I')) {
          return 'int';
        }
        return 'float/normalized';
      }

      function getDimensionsString(type, width, height, depth) {
        return (type === TEXTURE_2D$2 || type === TEXTURE_CUBE_MAP$2)
           ? `${width}x${height}`
           : `${width}x${height}x${depth}`;
      }

      class TextureManager {
        constructor(gl) {
          const isWebGL2$1 = isWebGL2(gl);
          const needPOT = !isWebGL2$1;
          const extensions = new Set();
          const textureToTextureInfoMap = new Map();
          const samplerToParametersMap = new Map();
          const textureUnits = createTextureUnits(gl);
          const maxMips = computeNumMipsNeeded(gl.getParameter(gl.MAX_TEXTURE_SIZE));
          const {internalFormatStringToFormatInfoMap} = createTextureInternalFormatInfoMap();
          let activeTextureUnitIndex = 0;
          let activeTextureUnit = textureUnits[0];
          this.numTextureUnits = textureUnits.length;

          function recomputeRenderability(textureInfo) {
            textureInfo.notRenderable = computeRenderability(textureInfo, textureInfo.parameters);
          }

          function recomputeAllTextureUnrenderability() {
            textureToTextureInfoMap.forEach(recomputeRenderability);
          }

          function computeRenderability(textureInfo, parameters) {
            const {type, mips} = textureInfo;
            const baseLevel = parameters.get(TEXTURE_BASE_LEVEL) || 0;
            const maxLevel = parameters.get(TEXTURE_MAX_LEVEL) || maxMips;
            if (maxLevel < baseLevel) {
              return `TEXTURE_MAX_LEVEL(${maxLevel}) is less than TEXTURE_BASE_LEVEL(${baseLevel})`;
            }
            const baseLevelFaces = mips[baseLevel];
            if (!baseLevelFaces) {
              return 'no base level mip ${baseLevel}';
            }
            const baseMipFace = baseLevelFaces[0];
            if (!baseMipFace) {
              return 'TEXTURE_CUBE_MAP_POSITIVE_X face does not exist';
            }
            const {
              width: baseWidth,
              height: baseHeight,
              depth: baseDepth,
              // internalFormat: baseInternalFormat,
              internalFormatString: baseInternalFormatString,
            } = baseMipFace;
            const numFaces = type === TEXTURE_CUBE_MAP$2 ? 6 : 1;
            const minFilter = parameters.get(TEXTURE_MIN_FILTER);
            const internalFormatInfo = internalFormatStringToFormatInfoMap.get(baseInternalFormatString);
            // there is no format info for compressed texture ATM.
            // we could add it but AFAIK compressed textures are colorFilterable
            // so for now let's just not do the check if we don't know about the format
            if (internalFormatInfo) {
              const textureFilterable = internalFormatInfo.textureFilterable;
              if (!textureFilterable) {
                if (minFilter !== NEAREST) {
                  return `texture of type (${baseInternalFormatString}) is not filterable but TEXTURE_MIN_FILTER is set to ${glEnumToString(minFilter)}`;
                } else {
                  const magFilter = parameters.get(TEXTURE_MAG_FILTER);
                  if (magFilter !== NEAREST) {
                    return `texture of type (${baseInternalFormatString}) is not filterable but TEXTURE_MAG_FILTER is set to ${glEnumToString(magFilter)}`;
                  }
                }
              }
            }

            const numMipsNeeded = (minFilter === LINEAR || minFilter === NEAREST)
               ? 1
               : computeNumMipsNeeded(baseWidth, baseHeight, baseDepth);
            {
              let mipWidth = baseWidth;
              let mipHeight = baseHeight;
              let mipDepth = baseDepth;
              const lastMip = Math.min(maxLevel, baseLevel + numMipsNeeded - 1);
              for (let mipLevel = baseLevel; mipLevel <= lastMip; ++mipLevel) {
                const faceMips = mips[mipLevel];
                if (!faceMips) {
                  return `filtering is set to use mips (TEXTURE_MIN_FILTER = ${glEnumToString(minFilter)}) but mip level ${mipLevel} does not exist`;
                }
                for (let face = 0; face < numFaces; ++face) {
                  const mip = faceMips[face];
                  if (!mip) {
                    return `filtering is set to use mips (TEXTURE_MIN_FILTER = ${glEnumToString(minFilter)}) but mip level ${mipLevel}${getFaceTarget(face, type)} does not exist`;
                  }
                  if (mip.width !== mipWidth ||
                      mip.height !== mipHeight ||
                      mip.depth !== mipDepth) {
                    return `mip level ${mipLevel}${getFaceTarget(face, type)} needs to be ${getDimensionsString(type, mipWidth, mipHeight, mipDepth)} but it is ${getDimensionsString(type, mip.width, mip.height, mip.depth)}`;
                  }
                  if (mip.internalFormatString !== baseInternalFormatString) {
                    return `mip level ${mipLevel}${getFaceTarget(face, type)}'s internal format ${mip.internalFormatString} does not match mip level 0's internal format ${baseInternalFormatString}`;
                  }
                }
                mipWidth = Math.max(1, mipWidth / 2 | 0);
                mipHeight = Math.max(1, mipHeight / 2 | 0);
                if (type !== TEXTURE_2D_ARRAY$2) {
                  mipDepth = Math.max(1, mipDepth / 2 | 0);
                }
              }
            }

            if (needPOT) {
              if (!isPowerOf2(baseWidth) || !isPowerOf2(baseHeight)) {
                if (numMipsNeeded > 1) {
                  return `texture's ${getNPotIssues(baseWidth, baseHeight)} but TEXTURE_MIN_FILTER (${glEnumToString(minFilter)}) is set to need mips`;
                }
                const wrapS = parameters.get(TEXTURE_WRAP_S);
                const wrapT = parameters.get(TEXTURE_WRAP_T);
                if (wrapS !== CLAMP_TO_EDGE || wrapT !== CLAMP_TO_EDGE) {
                  return `texture's ${getNPotIssues(baseWidth, baseHeight)} but ${getClampToEdgeIssues(wrapS, wrapT)}.`;
                }
              }
            }

            if (type === TEXTURE_CUBE_MAP$2) {
              if (baseWidth !== baseHeight) {
                return `texture is CUBE_MAP but dimensions ${baseWidth}x${baseHeight} are not square`;
              }
            }

            return undefined;
          }

          function getTextureInfoForTarget(target) {
            const bindPoint = getBindPointForTarget(target);
            const texture = activeTextureUnit.get(bindPoint);
            return textureToTextureInfoMap.get(texture);
          }

          function getMipInfoForTarget(target, level) {
            const textureInfo = getTextureInfoForTarget(target);
            const faceIndex = targetToFaceIndex.get(target);
            return textureInfo.mips[level][faceIndex];
          }

          function setTexParameterForTarget(target, pname, value) {
            const textureInfo = getTextureInfoForTarget(target);
            textureInfo.parameters.set(pname, value);
            recomputeRenderability(textureInfo);
          }

          function removeFromTextureUnits(type, obj) {
            for (let i = 0; i < textureUnits.length; ++i) {
              const unit = textureUnits[i];
              if (unit.get(type) === obj) {
                unit.set(type, null);
              }
            }
          }

          function getInternalFormatStringForTextureInfo(textureInfo) {
            const {mips, parameters} = textureInfo;
            const baseLevel = parameters.get(TEXTURE_BASE_LEVEL) || 0;
            const baseFaces = mips[baseLevel];
            if (!baseFaces) {
              return '';
            }
            const baseMipFace = baseFaces[0];
            if (!baseMipFace) {
              return '';
            }
            return baseMipFace.internalFormatString;
          }

          function addInternalFormatStringInfos(type, textureFilterableExtensionName) {
            const textureFilterable = extensions.has(textureFilterableExtensionName);
            [
              RGBA,
              RGB,
              LUMINANCE,
              LUMINANCE_ALPHA,
              ALPHA,
            ].forEach(internalFormat => {
              internalFormatStringToFormatInfoMap.set(
                  getInternalFormatStringForInternalFormatType(internalFormat, type),
                  { textureFormat: gl.RGBA, textureFilterable });
            });
          }

          function markInternalFormatsAsTextureFilterable(internalFormats) {
            for (const internalFormat of internalFormats) {
              const info = internalFormatStringToFormatInfoMap.get(
                  getInternalFormatStringForInternalFormatType(internalFormat));
              info.textureFilterable = true;
            }
          }

          this.addExtension = function(extensionName) {
            extensions.add(extensionName);
            switch (extensionName) {
              case 'oes_texture_float':
                addInternalFormatStringInfos(FLOAT$1, 'oes_texture_float_linear');
                break;
              case 'oes_texture_float_linear':
                if (isWebGL2$1) {
                  markInternalFormatsAsTextureFilterable([
                      R32F,
                      RG32F,
                      RGB32F,
                      RGBA32F,
                  ]);
                } else {
                  if (extensions.has('oes_texture_float')) {
                    addInternalFormatStringInfos(FLOAT$1, 'oes_texture_float_linear');
                  }
                }
                recomputeAllTextureUnrenderability();
                break;
              case 'oes_texture_half_float':
                addInternalFormatStringInfos(HALF_FLOAT, 'oes_texture_half_float_linear');
                addInternalFormatStringInfos(HALF_FLOAT_OES, 'oes_texture_half_float_linear');
                break;
              case 'oes_texture_half_float_linear':
                if (isWebGL2$1) {
                  markInternalFormatsAsTextureFilterable([
                      R16F,
                      RG16F,
                      RGB16F,
                      RGBA16F,
                  ]);
                } else {
                  if (extensions.has('oes_texture_half_float')) {
                    addInternalFormatStringInfos(HALF_FLOAT, 'oes_texture_half_float_linear');
                    addInternalFormatStringInfos(HALF_FLOAT_OES, 'oes_texture_half_float_linear');
                  }
                }
                recomputeAllTextureUnrenderability();
                break;
              default:
                return;
            }
          };

          this.getTextureForTextureUnit = function(texUnit, target) {
            return textureUnits[texUnit].get(target);
          };

          this.getTextureUnitUnrenderableReason = function(uniformType, texUnit, target, getWebGLObjectString) {
            const texture = textureUnits[texUnit].get(target);
            if (!texture) {
              return `no texture bound to texture unit ${texUnit} ${target}`;
            }
            const textureInfo = textureToTextureInfoMap.get(texture);
            const {mips, parameters} = textureInfo;
            const baseLevel = parameters.get(TEXTURE_BASE_LEVEL) || 0;
            const baseLevelFaces = mips[baseLevel];
            if (!baseLevelFaces) {
              return 'no mip level 0';
            }
            const baseMipFace = baseLevelFaces[0];
            if (!baseMipFace) {
              return 'TEXTURE_CUBE_MAP_POSITIVE_X face does not exist';
            }
            const textureNumberType = getNumberTypeForInternalFormat(baseMipFace.internalFormat);
            const neededNumberType = getNumberTypeForUniformSamplerType(uniformType);
            if (textureNumberType !== neededNumberType) {
              return `uniform ${getUniformTypeForUniformSamplerType(uniformType)} needs a ${neededNumberType} texture but ${getWebGLObjectString(texture)} on texture unit ${texUnit} is ${textureNumberType} texture (${getInternalFormatStringForTextureInfo(textureInfo)})`;
            }
            const sampler = textureUnits[texUnit].get('SAMPLER');
            if (sampler) {
              const parameters = samplerToParametersMap.get(sampler);
              const reason = computeRenderability(textureInfo, parameters);
              return reason
                 ? `${reason} with sampler ${getWebGLObjectString(sampler)} bound to texture unit ${texUnit}`
                 : reason;
            } else {
              return textureInfo.notRenderable;
            }
          };

          function setMipFaceInfoForTarget(target, level, internalFormat, width, height, depth, type = 0) {
            const internalFormatString = getInternalFormatStringForInternalFormatType(internalFormat, type);
            const textureInfo = getTextureInfoForTarget(target);
            const {mips} = textureInfo;
            if (!mips[level]) {
              mips[level] = [];
            }
            const faceIndex = targetToFaceIndex.get(target);
            mips[level][faceIndex] = {width, height, depth, internalFormatString, internalFormat, type};
            recomputeRenderability(textureInfo);
          }

          this.postChecks = {
            activeTexture(ctx, funcName, args) {
              const unit = args[0] - TEXTURE0;
              activeTextureUnitIndex = unit;
              activeTextureUnit = textureUnits[activeTextureUnitIndex];
            },

            bindTexture(ctx, funcName, args) {
              const [target, texture] = args;
              activeTextureUnit.set(getBindPointForTarget(target), texture);
              if (texture) {
                const textureInfo = textureToTextureInfoMap.get(texture);
                if (textureInfo.type) {
                  if (textureInfo.type !== target) {
                    throw new Error('should never get here');
                  }
                } else {
                  textureInfo.type = target;
                }
              }
            },

            createTexture(ctx, funcName, args, result) {
              // class TextureInfo {
              //   mips: Array<Array<MipInfo>>  // indexed by face index
              //   parameters: Map<number, number>
              //   renderable: bool,
              //   target: type of texture (ie, TEXTURE_2D)
              // }
              const textureInfo = {
                mips: [],
                parameters: new Map([
                  [TEXTURE_MIN_FILTER, NEAREST_MIPMAP_LINEAR],
                  [TEXTURE_MAG_FILTER, LINEAR],
                  [TEXTURE_WRAP_S, REPEAT],
                  [TEXTURE_WRAP_T, REPEAT],
                ]),
                renderable: false,
              };
              textureToTextureInfoMap.set(result, textureInfo);
            },

            deleteTexture(ctx, funcName, args) {
              const [texture] = args;
              const {type} = textureToTextureInfoMap.get(texture);
              textureToTextureInfoMap.delete(texture);
              removeFromTextureUnits(type, texture);
            },

            createSampler(ctx, funcName, args, sampler) {
              samplerToParametersMap.set(sampler, new Map());
            },

            deleteSampler(ctx, funcName, args) {
              const [sampler] = args;
              samplerToParametersMap.delete(sampler);
              removeFromTextureUnits('SAMPLER', sampler);
            },

            bindSampler(ctx, funcName, args) {
              const [unit, sampler] = args;
              textureUnits[unit].set('SAMPLER', sampler);
            },

            samplerParameteri(ctx, funcName, args) {
              const [sampler, pname, value] = args;
              const parameters = samplerToParametersMap.get(sampler);
              parameters.set(pname, value);
            },

            copyTexImage2D(ctx, funcName, args) {
              const [target, level, internalFormat, width, height] = args;
              // TODO: In order to know the type do we need to know the
              // format of the current framebuffer for when internalFormat is unsized?
              const type = ctx.UNSIGNED_BYTE;
              setMipFaceInfoForTarget(target, level, internalFormat, width, height, 1, type);
            },

            texImage2D(ctx, funcName, args) {
              const parseFunc = texImage2DArgParersMap.get(args.length);
              const {target, level, internalFormat, width, height, type} = parseFunc(args);
              setMipFaceInfoForTarget(target, level, internalFormat, width, height, 1, type);
            },

            texImage3D(ctx, funcName, args) {
              const [target, level, internalFormat, width, height, depth, , , type] = args;
              setMipFaceInfoForTarget(target, level, internalFormat, width, height, depth, type);
            },

            texStorage2D(ctx, funcName, args) {
              const [target, levels, internalFormat, width, height] = args;
              let w = width;
              let h = height;
              for (let level = 0; level < levels; ++level) {
                setMipFaceInfoForTarget(target, level, internalFormat, w, h, 1);
                w = Math.max(1, (w / 2) | 0);
                h = Math.max(1, (h / 2) | 0);
              }
            },

            texStorage3D(ctx, funcName, args) {
              const [target, levels, internalFormat, width, height, depth] = args;
              let w = width;
              let h = height;
              let d = depth;
              for (let level = 0; level < levels; ++level) {
                setMipFaceInfoForTarget(target, level, internalFormat, w, h, d);
                w = Math.max(1, (w / 2) | 0);
                h = Math.max(1, (h / 2) | 0);
                // If it's not TEXTURE_2D it's TEXTURE_2D_ARRAY
                if (target === TEXTURE_3D$2) {
                  d = Math.max(1, (d / 2) | 0);
                }
              }
            },

            generateMipmap(ctx, funcName, args) {
              const [target] = args;
              const {width, height, depth, internalFormat, type} = getMipInfoForTarget(target, 0);
              const numMipsNeeded = computeNumMipsNeeded(width, height, depth);
              const numFaces = target === TEXTURE_CUBE_MAP$2 ? 6 : 1;
              let w = width;
              let h = height;
              let d = depth;
              for (let level = 0; level < numMipsNeeded; ++level) {
                w = Math.max(1, (w / 2) | 0);
                h = Math.max(1, (h / 2) | 0);
                // If it's not TEXTURE_2D it's TEXTURE_2D_ARRAY
                if (target === TEXTURE_3D$2) {
                  d = Math.max(1, (d / 2) | 0);
                }
                for (let face = 0; face < numFaces; ++face) {
                  const faceTarget =  target === TEXTURE_CUBE_MAP$2
                     ? TEXTURE_CUBE_MAP_POSITIVE_X$1 + face
                     : target;
                  setMipFaceInfoForTarget(faceTarget, level, internalFormat, w, h, d, type);
                }
              }
            },

            compressedTexImage2D(ctx, funcName, args) {
              const [target, level, internalFormat, width, height] = args;
              setMipFaceInfoForTarget(target, level, internalFormat, width, height, 1);
            },

            compressedTexImage3D(ctx, funcName, args) {
              const [target, level, internalFormat, width, height, depth] = args;
              setMipFaceInfoForTarget(target, level, internalFormat, width, height, depth);
            },

            texParameteri(ctx, funcName, args) {
              const [target, pname, value] = args;
              setTexParameterForTarget(target, pname, value);
            },
          };
        }
      }

      /*
      The MIT License (MIT)

      Copyright (c) 2019 Gregg Tavares

      Permission is hereby granted, free of charge, to any person obtaining a copy of
      this software and associated documentation files (the "Software"), to deal in
      the Software without restriction, including without limitation the rights to
      use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      the Software, and to permit persons to whom the Software is furnished to do so,
      subject to the following conditions:

      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
      FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
      COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
      IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
      CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      */

      /* global console */
      /* global WebGL2RenderingContext */
      /* global WebGLUniformLocation */

      //------------ [ from https://github.com/KhronosGroup/WebGLDeveloperTools ]

      /*
      ** Copyright (c) 2012 The Khronos Group Inc.
      **
      ** Permission is hereby granted, free of charge, to any person obtaining a
      ** copy of this software and/or associated documentation files (the
      ** "Materials"), to deal in the Materials without restriction, including
      ** without limitation the rights to use, copy, modify, merge, publish,
      ** distribute, sublicense, and/or sell copies of the Materials, and to
      ** permit persons to whom the Materials are furnished to do so, subject to
      ** the following conditions:
      **
      ** The above copyright notice and this permission notice shall be included
      ** in all copies or substantial portions of the Materials.
      **
      ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
      ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
      ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
      ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
      ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
      */


      const destBufferBitFieldToString = makeBitFieldToStringFunc([
        'COLOR_BUFFER_BIT',
        'DEPTH_BUFFER_BIT',
        'STENCIL_BUFFER_BIT',
      ]);

      function convertToObjectIfArray(obj, key) {
        if (Array.isArray(obj[key])) {
          obj[key] = Object.fromEntries(obj[key].map(ndx => [Math.abs(ndx), ndx]));
        }
      }

      /*
      function indexedBindHelper(gl, funcName, args, value) {
        const [target, index] = args;
        switch (target) {
          case gl.TRANSFORM_FEEDBACK_BUFFER:
            return gl.getIndexedBinding(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, index);
            break;
          case gl.UNIFORM_BUFFER:
            return gl.getIndexedBinding(gl.UNIFORM_BUFFER_BINDING, index);
            break;
        }
      }
      */

      function getUniformNameErrorMsg(ctx, funcName, args, sharedState) {
        const location = args[0];
        const name = sharedState.locationsToNamesMap.get(location);
        const prg = ctx.getParameter(ctx.CURRENT_PROGRAM);
        const msgs = [];
        if (name) {
          msgs.push(`trying to set uniform '${name}'`);
        }
        if (prg) {
          const name = sharedState.webglObjectToNamesMap.get(prg);
          if (name) {
            msgs.push(`on WebGLProgram(${quotedStringOrEmpty(name)})`);
          }
        } else {
          msgs.push('on ** no current program **');
        }
        return msgs.length ? `: ${msgs.join(' ')}` : '';
      }


      /**
       * Given a WebGL context replaces all the functions with wrapped functions
       * that call gl.getError after every command
       *
       * @param {WebGLRenderingContext|Extension} ctx The webgl context to wrap.
       * @param {string} nameOfClass (eg, webgl, webgl2, OES_texture_float)
       */
      function augmentAPI(ctx, nameOfClass, options = {}) {
        const origGLErrorFn = options.origGLErrorFn || ctx.getError;
        addEnumsFromAPI(ctx);

        function createSharedState(ctx) {
          const sharedState = {
            baseContext: ctx,
            config: options,
            apis: {
              // custom extension
              gman_debug_helper: {
                ctx: {
                  tagObject(webglObject, name) {
                    // There's no easy way to check if it's a WebGLObject
                    // and I guess we mostly don't care but a minor check is probably
                    // okay
                    if (Array.isArray(webglObject) || isTypedArray(webglObject) || typeof webglObject !== 'object') {
                      throw new Error('not a WebGLObject');
                    }
                    sharedState.webglObjectToNamesMap.set(webglObject, name);
                  },
                  getTagForObject(webglObject) {
                    return sharedState.webglObjectToNamesMap.get(webglObject);
                  },
                  disable() {
                    removeChecks();
                  },
                  setConfiguration(config) {
                    for (const [key, value] of Object.entries(config)) {
                      if (!(key in sharedState.config)) {
                        throw new Error(`unknown configuration option: ${key}`);
                      }
                      sharedState.config[key] = value;
                    }
                    for (const name of sharedState.config.ignoreUniforms) {
                      sharedState.ignoredUniforms.add(name);
                    }
                  },
                },
              },
            },
            textureManager: new TextureManager(ctx),
            bufferToIndices: new Map(),
            ignoredUniforms: new Set(),
            // Okay or bad? This is a map of all WebGLUniformLocation object looked up
            // by the user via getUniformLocation. We use this to map a location back to
            // a name and unfortunately a WebGLUniformLocation is not unique, by which
            // I mean if you call get getUniformLocation twice for the same uniform you'll
            // get 2 different WebGLUniformLocation objects referring to the same location.
            //
            // So, that means I can't look up the locations myself and know what they are
            // unless I passed the location objects I looked up back to the user but if I
            // did that then technically I'd have changed the semantics (though I suspect
            // no one ever takes advantage of that quirk)
            //
            // In any case this is all uniforms for all programs. That means in order
            // to clean up later I have to track all the uniforms (see programToUniformMap)
            // so that makes me wonder if I should track names per program instead.
            //
            // The advantage to this global list is given a WebGLUniformLocation and
            // no other info I can lookup the name where as if I switch it to per-program
            // then I need to know the program. That's generally available but it's indirect.
            locationsToNamesMap: new Map(),
            webglObjectToNamesMap: new Map(),
            // @typedef {Object} UnusedUniformRef
            // @property {number} index the index of this name. for foo[3] it's 3
            // @property {Map<string, number>} altNames example <foo,0>, <foo[0],0>, <foo[1],1>, <foo[2],2>, <foo[3],3>  for `uniform vec4 foo[3]`
            // @property {Set<number>} unused this is size so for the example above it's `Set<[0, 1, 2, 3]`

            // Both the altName array and the unused Set are shared with an entry in `programToUnsetUniformsMap`
            // by each name (foo, foo[0], foo[1], foo[2]). That we we can unused.delete each element of set
            // and if set is empty then delete all altNames entries from programToUnsetUniformsMap.
            // When programsToUniformsMap is empty all uniforms have been set.
            // @typedef {Map<WebGLProgram, Map<string, UnusedUniformRef>}
            programToUnsetUniformsMap: new Map(),
            // class UniformInfo {
            //   index: the index of this name. for foo[3] it's 3
            //   size: this is the array size for this uniform
            //   type: the enum for the type like FLOAT_VEC4
            // }
            /** @type {WebGLProgram, Map<UniformInfo>} */
            programToUniformInfoMap: new Map(),
            /** @type {WebGLProgram, Set<WebGLUniformLocation>} */
            programToLocationsMap: new Map(),
            // class UniformSamplerInfo {
            //   type: the enum for the uniform type like SAMPLER_2D
            //   values: number[],
            //   name: string
            // }
            /** @type {WebGLProgram, UniformSamplerInfo[]} */
            programToUniformSamplerValues: new Map(),
          };
          return sharedState;
        }

        const sharedState = options.sharedState || createSharedState(ctx);
        options.sharedState = sharedState;

        const {
          apis,
          baseContext,
          bufferToIndices,
          config,
          ignoredUniforms,
          locationsToNamesMap,
          programToLocationsMap,
          programToUniformInfoMap,
          programToUniformSamplerValues,
          programToUnsetUniformsMap,
          textureManager,
          webglObjectToNamesMap,
        } = sharedState;

        const extensionFuncs = {
          oes_texture_float(...args) {
            textureManager.addExtension(...args);
          },
          oes_texture_float_linear(...args) {
            textureManager.addExtension(...args);
          },
          OES_texture_half_float(...args) {
            textureManager.addExtension(...args);
          },
          oes_texture_half_float_linear(...args) {
            textureManager.addExtension(...args);
          },
        };
        (extensionFuncs[nameOfClass] || noop)(nameOfClass);

        /**
         * Info about functions based on the number of arguments to the function.
         *
         * enums specifies which arguments are enums
         *
         *    'texImage2D': {
         *       9: { enums: [0, 2, 6, 7 ] },
         *       6: { enums: [0, 2, 3, 4 ] },
         *    },
         *
         * means if there are 9 arguments then 6 and 7 are enums, if there are 6
         * arguments 3 and 4 are enums. You can provide a function instead in
         * which case you should use object format. For example
         *
         *     `clear`: {
         *       1: { enums: { 0: convertClearBitsToString }},
         *     },
         *
         * numbers specifies which arguments are numbers, if an argument is negative that
         * argument might not be a number so we can check only check for NaN
         * arrays specifies which arguments are arrays
         *
         * @type {!Object.<number, (!Object.<number, string>|function)}
         */
        const glFunctionInfos = {
          // Generic setters and getters

          'enable': {1: { enums: [0] }},
          'disable': {1: { enums: [0] }},
          'getParameter': {1: { enums: [0] }},

          // Rendering

          'drawArrays': {3:{ enums: [0], numbers: [1, 2] }},
          'drawElements': {4:{ enums: [0, 2], numbers: [1, 3] }},
          'drawArraysInstanced': {4: { enums: [0], numbers: [1, 2, 3] }},
          'drawElementsInstanced': {5: { enums: [0, 2], numbers: [1, 3, 4] }},
          'drawRangeElements': {6: { enums: [0, 4], numbers: [1, 2, 3, 5] }},

          // Shaders

          'createShader': {1: { enums: [0] }},
          'getActiveAttrib': {2: { numbers: [1] }},
          'getActiveUniform': {2: { numbers: [1] }},
          'getShaderParameter': {2: { enums: [1] }},
          'getProgramParameter': {2: { enums: [1] }},
          'getShaderPrecisionFormat': {2: { enums: [0, 1] }},
          'bindAttribLocation': {3: {numbers: [1]}},

          // Vertex attributes

          'getVertexAttrib': {2: { enums: [1], numbers: [0] }},
          'vertexAttribPointer': {6: { enums: [2], numbers: [0, 1, 4, 5] }},
          'vertexAttribIPointer': {5: { enums: [2], numbers: [0, 1, 3, 4] }},  // WebGL2
          'vertexAttribDivisor': {2: { numbers: [0, 1] }}, // WebGL2
          'disableVertexAttribArray': {1: {numbers: [0] }},
          'enableVertexAttribArray': {1: {numbers: [0] }},

          // Textures

          'bindTexture': {2: { enums: [0] }},
          'activeTexture': {1: { enums: [0, 1] }},
          'getTexParameter': {2: { enums: [0, 1] }},
          'texParameterf': {3: { enums: [0, 1] }},
          'texParameteri': {3: { enums: [0, 1, 2] }},
          'texImage2D': {
            9: { enums: [0, 2, 6, 7], numbers: [1, 3, 4, 5], arrays: [-8], },
            6: { enums: [0, 2, 3, 4], },
            10: { enums: [0, 2, 6, 7], numbers: [1, 3, 4, 5, 9], arrays: {8: checkOptionalTypedArrayWithOffset }, }, // WebGL2
          },
          'texImage3D': {
            10: { enums: [0, 2, 7, 8], numbers: [1, 3, 4, 5] },  // WebGL2
            11: { enums: [0, 2, 7, 8], numbers: [1, 3, 4, 5, 10], arrays: {9: checkTypedArrayWithOffset}},  // WebGL2
          },
          'texSubImage2D': {
            9: { enums: [0, 6, 7], numbers: [1, 2, 3, 4, 5] },
            7: { enums: [0, 4, 5], numbers: [1, 2, 3] },
            10: { enums: [0, 6, 7], numbers: [1, 2, 3, 4, 5, 9], arrays: {9: checkTypedArrayWithOffset} },  // WebGL2
          },
          'texSubImage3D': {
            11: { enums: [0, 8, 9], numbers: [1, 2, 3, 4, 5, 6, 7] },  // WebGL2
            12: { enums: [0, 8, 9], numbers: [1, 2, 3, 4, 5, 6, 7, 11], arrays: {10: checkTypedArrayWithOffset} },  // WebGL2
          },
          'texStorage2D': { 5: { enums: [0, 2], numbers: [1, 3, 4] }},  // WebGL2
          'texStorage3D': { 6: { enums: [0, 2], numbers: [1, 3, 4, 6] }},  // WebGL2
          'copyTexImage2D': {8: { enums: [0, 2], numbers: [1, 3, 4, 5, 6, 7] }},
          'copyTexSubImage2D': {8: { enums: [0], numbers: [1, 2, 3, 4, 5, 6, 7]}},
          'copyTexSubImage3D': {9: { enums: [0], numbers: [1, 2, 3, 4, 5, 6, 7, 8] }},  // WebGL2
          'generateMipmap': {1: { enums: [0] }},
          'compressedTexImage2D': {
            7: { enums: [0, 2], numbers: [1, 3, 4, 5] },
            8: { enums: [0, 2], numbers: [1, 3, 4, 5, 7] },  // WebGL2
            9: { enums: [0, 2], numbers: [1, 3, 4, 5, 7, 8] },  // WebGL2
          },
          'compressedTexSubImage2D': {
            8: { enums: [0, 6], numbers: [1, 2, 3, 4, 5] },
            9: { enums: [0, 6], numbers: [1, 2, 3, 4, 5, 8] },  // WebGL2
            10: { enums: [0, 6], numbers: [1, 2, 3, 4, 5, 8, 9] },  // WebGL2
          },
          'compressedTexImage3D': {
            8: { enums: [0, 2], numbers: [1, 3, 4, 5, 6] },  // WebGL2
            9: { enums: [0, 2], numbers: [1, 3, 4, 5, 6, -7, 8] },  // WebGL2
            10: { enums: [0, 2], numbers: [1, 3, 4, 5, 6, 8, 9] },  // WebGL2
          },
          'compressedTexSubImage3D': {
            12: { enums: [0, 8], numbers: [1, 2, 3, 4, 5, 6, 7, 8, 10, 11] },  // WebGL2
            11: { enums: [0, 8], numbers: [1, 2, 3, 4, 5, 6, 7, 8, -9, 10] },  // WebGL2
            10: { enums: [0, 8], numbers: [1, 2, 3, 4, 5, 6, 7, 8] },  // WebGL2
          },

          // Buffer objects

          'bindBuffer': {2: { enums: [0] }},
          'bufferData': {
            3: { enums: [0, 2], numbers: [-1], arrays: [-1] },
            4: { enums: [0, 2], numbers: [-1, 3], arrays: { 1: checkBufferSourceWithOffset } },  // WebGL2
            5: { enums: [0, 2], numbers: [-1, 3, 4], arrays: { 1: checkBufferSourceWithOffsetAndLength } },  // WebGL2
          },
          'bufferSubData': {
            3: { enums: [0], numbers: [1], arrays: [2] },
            4: { enums: [0], numbers: [1, 3], arrays: {2: checkBufferSourceWithOffset} },  // WebGL2
            5: { enums: [0], numbers: [1, 3, 4], arrays: {2: checkBufferSourceWithOffsetAndLength} },  // WebGL2
          },
          'copyBufferSubData': {
            5: { enums: [0], numbers: [2, 3, 4] },  // WebGL2
          },
          'getBufferParameter': {2: { enums: [0, 1] }},
          'getBufferSubData': {
            3: { enums: [0], numbers: [1] },  // WebGL2
            4: { enums: [0], numbers: [1, 3] },  // WebGL2
            5: { enums: [0], numbers: [1, 3, 4] },  // WebGL2
          },

          // Renderbuffers and framebuffers

          'pixelStorei': {2: { enums: [0, 1], numbers: [1] }},
          'readPixels': {
            7: { enums: [4, 5], numbers: [0, 1, 2, 3, -6] },
            8: { enums: [4, 5], numbers: [0, 1, 2, 3, 7] },  // WebGL2
          },
          'bindRenderbuffer': {2: { enums: [0] }},
          'bindFramebuffer': {2: { enums: [0] }},
          'blitFramebuffer': {10: { enums: { 8: destBufferBitFieldToString, 9:true }, numbers: [0, 1, 2, 3, 4, 5, 6, 7]}},  // WebGL2
          'checkFramebufferStatus': {1: { enums: [0] }},
          'framebufferRenderbuffer': {4: { enums: [0, 1, 2], }},
          'framebufferTexture2D': {5: { enums: [0, 1, 2], numbers: [4] }},
          'framebufferTextureLayer': {5: { enums: [0, 1], numbers: [3, 4] }},  // WebGL2
          'getFramebufferAttachmentParameter': {3: { enums: [0, 1, 2] }},
          'getInternalformatParameter': {3: { enums: [0, 1, 2] }},  // WebGL2
          'getRenderbufferParameter': {2: { enums: [0, 1] }},
          'invalidateFramebuffer': {2: { enums: { 0: true, 1: enumArrayToString, } }},  // WebGL2
          'invalidateSubFramebuffer': {6: { enums: { 0: true, 1: enumArrayToString, }, numbers: [2, 3, 4, 5] }},  // WebGL2
          'readBuffer': {1: { enums: [0] }},  // WebGL2
          'renderbufferStorage': {4: { enums: [0, 1], numbers: [2, 3] }},
          'renderbufferStorageMultisample': {5: { enums: [0, 2], numbers: [1, 3, 4] }},  // WebGL2

          // Frame buffer operations (clear, blend, depth test, stencil)

          'lineWidth': {1: {numbers: [0]}},
          'polygonOffset': {2: {numbers: [0, 1]}},
          'scissor': {4: { numbers: [0, 1, 2, 3]}},
          'viewport': {4: { numbers: [0, 1, 2, 3]}},
          'clear': {1: { enums: { 0: destBufferBitFieldToString } }},
          'clearColor': {4: { numbers: [0, 1, 2, 3]}},
          'clearDepth': {1: { numbers: [0]}},
          'clearStencil': {1: { numbers: [0]}},
          'depthFunc': {1: { enums: [0] }},
          'depthRange': {2: { numbers: [0, 1]}},
          'blendColor': {4: { numbers: [0, 1, 2, 3]}},
          'blendFunc': {2: { enums: [0, 1] }},
          'blendFuncSeparate': {4: { enums: [0, 1, 2, 3] }},
          'blendEquation': {1: { enums: [0] }},
          'blendEquationSeparate': {2: { enums: [0, 1] }},
          'stencilFunc': {3: { enums: [0], numbers: [1, 2] }},
          'stencilFuncSeparate': {4: { enums: [0, 1], numberS: [2, 3] }},
          'stencilMask': {1: { numbers: [0] }},
          'stencilMaskSeparate': {2: { enums: [0], numbers: [1] }},
          'stencilOp': {3: { enums: [0, 1, 2] }},
          'stencilOpSeparate': {4: { enums: [0, 1, 2, 3] }},

          // Culling

          'cullFace': {1: { enums: [0] }},
          'frontFace': {1: { enums: [0] }},

          // ANGLE_instanced_arrays extension

          'drawArraysInstancedANGLE': {4: { enums: [0], numbers: [1, 2, 3] }},
          'drawElementsInstancedANGLE': {5: { enums: [0, 2], numbers: [1, 3, 4] }},

          // EXT_blend_minmax extension

          'blendEquationEXT': {1: { enums: [0] }},

          // Multiple Render Targets

          'drawBuffersWebGL': {1: { enums: { 0: enumArrayToString, }, arrays: [0] }},  // WEBGL_draw_buffers
          'drawBuffers': {1: { enums: { 0: enumArrayToString, }, arrays: [0] }},  // WebGL2
          'clearBufferfv': {
            3: { enums: [0], numbers: [1], arrays: [2] },  // WebGL2
            4: { enums: [0], numbers: [1, 2], arrays: [2] },  // WebGL2
          },
          'clearBufferiv': {
            3: { enums: [0], numbers: [1], arrays: [2] },  // WebGL2
            4: { enums: [0], numbers: [1, 2], arrays: [2] },  // WebGL2
          },
          'clearBufferuiv': {
            3: { enums: [0], numbers: [1], arrays: [2] },  // WebGL2
            4: { enums: [0], numbers: [1, 2], arrays: [2] },  // WebGL2
          },
          'clearBufferfi': { 4: { enums: [0], numbers: [1, 2, 3] }},  // WebGL2

          // uniform value setters
          'uniform1f': { 2: {numbers: [1]} },
          'uniform2f': { 3: {numbers: [1, 2]} },
          'uniform3f': { 4: {numbers: [1, 2, 3]} },
          'uniform4f': { 5: {numbers: [1, 2, 3, 4]} },

          'uniform1i': { 2: {numbers: [1]} },
          'uniform2i': { 3: {numbers: [1, 2]} },
          'uniform3i': { 4: {numbers: [1, 2, 3]} },
          'uniform4i': { 5: {numbers: [1, 2, 3, 4]} },

          'uniform1fv': {
            2: {arrays: {1: checkArrayForUniform(1)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(1)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(1)}, numbers: [2, 3]},
          },
          'uniform2fv': {
            2: {arrays: {1: checkArrayForUniform(2)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(2)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(2)}, numbers: [2, 3]},
          },
          'uniform3fv': {
            2: {arrays: {1: checkArrayForUniform(3)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(3)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(3)}, numbers: [2, 3]},
          },
          'uniform4fv': {
            2: {arrays: {1: checkArrayForUniform(4)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(4)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(4)}, numbers: [2, 3]},
          },

          'uniform1iv': {
            2: {arrays: {1: checkArrayForUniform(1)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(1)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(1)}, numbers: [2, 3]},
          },
          'uniform2iv': {
            2: {arrays: {1: checkArrayForUniform(2)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(2)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(2)}, numbers: [2, 3]},
          },
          'uniform3iv': {
            2: {arrays: {1: checkArrayForUniform(3)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(3)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(3)}, numbers: [2, 3]},
          },
          'uniform4iv': {
            2: {arrays: {1: checkArrayForUniform(4)}},
            3: {arrays: {1: checkArrayForUniformWithOffset(4)}, numbers: [2]},
            4: {arrays: {1: checkArrayForUniformWithOffsetAndLength(4)}, numbers: [2, 3]},
          },

          'uniformMatrix2fv': {
            3: {arrays: {2: checkArrayForUniform(4)}},
            4: {arrays: {2: checkArrayForUniformWithOffset(4)}, numbers: [3]},
            5: {arrays: {2: checkArrayForUniformWithOffsetAndLength(4)}, numbers: [3, 4]},
          },
          'uniformMatrix3fv': {
            3: {arrays: {2: checkArrayForUniform(9)}},
            4: {arrays: {2: checkArrayForUniformWithOffset(9)}, numbers: [3]},
            5: {arrays: {2: checkArrayForUniformWithOffsetAndLength(9)}, numbers: [3, 4]},
          },
          'uniformMatrix4fv': {
            3: {arrays: {2: checkArrayForUniform(16)}},
            4: {arrays: {2: checkArrayForUniformWithOffset(16)}, numbers: [3]},
            5: {arrays: {2: checkArrayForUniformWithOffsetAndLength(16)}, numbers: [3, 4]},
          },

          'uniform1ui': { 2: {numbers: [1]} },  // WebGL2
          'uniform2ui': { 3: {numbers: [1, 2]} },  // WebGL2
          'uniform3ui': { 4: {numbers: [1, 2, 3]} },  // WebGL2
          'uniform4ui': { 5: {numbers: [1, 2, 3, 4]} },  // WebGL2

          'uniform1uiv': {  // WebGL2
            2: { arrays: {1: checkArrayForUniform(1)}, },
            3: { arrays: {1: checkArrayForUniformWithOffset(1)}, numbers: [2] },
            4: { arrays: {1: checkArrayForUniformWithOffsetAndLength(1)}, numbers: [2, 3] },
          },
          'uniform2uiv': {  // WebGL2
            2: { arrays: {1: checkArrayForUniform(2)}, },
            3: { arrays: {1: checkArrayForUniformWithOffset(2)}, numbers: [2] },
            4: { arrays: {1: checkArrayForUniformWithOffsetAndLength(2)}, numbers: [2, 3] },
          },
          'uniform3uiv': {  // WebGL2
            2: { arrays: {1: checkArrayForUniform(3)}, },
            3: { arrays: {1: checkArrayForUniformWithOffset(3)}, numbers: [2] },
            4: { arrays: {1: checkArrayForUniformWithOffsetAndLength(3)}, numbers: [2, 3] },
          },
          'uniform4uiv': {  // WebGL2
            2: { arrays: {1: checkArrayForUniform(4)}, },
            3: { arrays: {1: checkArrayForUniformWithOffset(4)}, numbers: [2] },
            4: { arrays: {1: checkArrayForUniformWithOffsetAndLength(4)}, numbers: [2, 3] },
          },
          'uniformMatrix3x2fv': {  // WebGL2
            3: { arrays: {2: checkArrayForUniform(6)}, },
            4: { arrays: {2: checkArrayForUniformWithOffset(6)}, numbers: [3] },
            5: { arrays: {2: checkArrayForUniformWithOffsetAndLength(6)}, numbers: [3, 4] },
          },
          'uniformMatrix4x2fv': {  // WebGL2
            3: { arrays: {2: checkArrayForUniform(8)}, },
            4: { arrays: {2: checkArrayForUniformWithOffset(8)}, numbers: [3] },
            5: { arrays: {2: checkArrayForUniformWithOffsetAndLength(8)}, numbers: [3, 4] },
          },

          'uniformMatrix2x3fv': {  // WebGL2
            3: { arrays: {2: checkArrayForUniform(6)}, },
            4: { arrays: {2: checkArrayForUniformWithOffset(6)}, numbers: [3] },
            5: { arrays: {2: checkArrayForUniformWithOffsetAndLength(6)}, numbers: [3, 4] },
          },
          'uniformMatrix4x3fv': {  // WebGL2
            3: { arrays: {2: checkArrayForUniform(12)}, },
            4: { arrays: {2: checkArrayForUniformWithOffset(12)}, numbers: [3] },
            5: { arrays: {2: checkArrayForUniformWithOffsetAndLength(12)}, numbers: [3, 4] },
          },

          'uniformMatrix2x4fv': {  // WebGL2
            3: { arrays: {2: checkArrayForUniform(8)}, },
            4: { arrays: {2: checkArrayForUniformWithOffset(8)}, numbers: [3] },
            5: { arrays: {2: checkArrayForUniformWithOffsetAndLength(8)}, numbers: [3, 4] },
          },
          'uniformMatrix3x4fv': {  // WebGL2
            3: { arrays: {2: checkArrayForUniform(12)}, },
            4: { arrays: {2: checkArrayForUniformWithOffset(12)}, numbers: [3] },
            5: { arrays: {2: checkArrayForUniformWithOffsetAndLength(12)}, numbers: [3, 4] },
          },

          // attribute value setters
          'vertexAttrib1f': { 2: {numbers: [0, 1]}},
          'vertexAttrib2f': { 3: {numbers: [0, 1, 2]}},
          'vertexAttrib3f': { 4: {numbers: [0, 1, 2, 3]}},
          'vertexAttrib4f': { 5: {numbers: [0, 1, 2, 3, 4]}},

          'vertexAttrib1fv': { 2: {numbers: [0], arrays: [1]}},
          'vertexAttrib2fv': { 2: {numbers: [0], arrays: [1]}},
          'vertexAttrib3fv': { 2: {numbers: [0], arrays: [1]}},
          'vertexAttrib4fv': { 2: {numbers: [0], arrays: [1]}},

          'vertexAttribI4i': { 5: {numbers: [0, 1, 2, 3, 4]}},  // WebGL2
          'vertexAttribI4iv': {2: {numbers: [0], arrays: [1]}},  // WebGL2
          'vertexAttribI4ui': {5: {numbers: [0, 1, 2, 3, 4]}},  // WebGL2
          'vertexAttribI4uiv': {2: {numbers: [0], arrays: [1]}},  // WebGL2

          // QueryObjects

          'beginQuery': { 2: { enums: [0] }},  // WebGL2
          'endQuery': { 1: { enums: [0] }},  // WebGL2
          'getQuery': { 2: { enums: [0, 1] }},  // WebGL2
          'getQueryParameter': { 2: { enums: [1] }},  // WebGL2

          //  Sampler Objects

          'samplerParameteri': { 3: { enums: [1] }},  // WebGL2
          'samplerParameterf': { 3: { enums: [1] }},  // WebGL2
          'getSamplerParameter': { 2: { enums: [1] }},  // WebGL2

          //  Sync objects

          'clientWaitSync': { 3: { enums: { 1: makeBitFieldToStringFunc(['SYNC_FLUSH_COMMANDS_BIT']) }, numbers: [2] }},  // WebGL2
          'fenceSync': { 2: { enums: [0] }},  // WebGL2
          'getSyncParameter': { 2: { enums: [1] }},  // WebGL2

          //  Transform Feedback

          'bindTransformFeedback': { 2: { enums: [0] }},  // WebGL2
          'beginTransformFeedback': { 1: { enums: [0] }},  // WebGL2

          // Uniform Buffer Objects and Transform Feedback Buffers
          'bindBufferBase': { 3: { enums: [0], numbers: [1]}},  // WebGL2
          'bindBufferRange': { 5: { enums: [0], numbers: [1, 3, 4]}},  // WebGL2
          'getIndexedParameter': { 2: { enums: [0], numbers: [1] }},  // WebGL2
          'getActiveUniforms': { 3: { enums: [2] }, arrays: [1]},  // WebGL2
          'getActiveUniformBlockParameter': { 3: { enums: [2], numbers: [1] }},  // WebGL2
          'getActiveUniformBlockName': { 2: {numbers: [1]}}, // WebGL2
          'uniformBlockBinding': { 3: { numbers: [1, 2]}}, // WebGL2
        };
        for (const [name, fnInfos] of Object.entries(glFunctionInfos)) {
          for (const fnInfo of Object.values(fnInfos)) {
            convertToObjectIfArray(fnInfo, 'enums');
            convertToObjectIfArray(fnInfo, 'numbers');
            convertToObjectIfArray(fnInfo, 'arrays');
          }
          if (/uniform(\d|Matrix)/.test(name)) {
            fnInfos.errorHelper = getUniformNameErrorMsg;
          }
        }

        // Holds booleans for each GL error so after we get the error ourselves
        // we can still return it to the client app.
        const glErrorShadow = { };
        const origFuncs = {};

        function discardInfoForProgram(program) {
          const oldLocations = programToLocationsMap.get(program);
          if (oldLocations) {
            oldLocations.forEach(loc => locationsToNamesMap.delete(loc));
          }
          programToLocationsMap.set(program, new Set());
          programToUnsetUniformsMap.delete(program);
          programToUniformInfoMap.delete(program);
          programToUniformSamplerValues.delete(program);
        }

        function removeChecks() {
          for (const {ctx, origFuncs} of Object.values(apis)) {
            Object.assign(ctx, origFuncs);
          }
          for (const key of [...Object.keys(sharedState)]) {
            delete sharedState[key];
          }
        }

        function checkMaxDrawCallsAndZeroCount(gl, funcName, args) {
          const {vertCount, instances} = getDrawFunctionArgs(funcName, args);
          if (vertCount === 0) {
            console.warn(generateFunctionError(gl, funcName, args, `count for ${funcName} is 0!`));
          }

          if (instances === 0) {
            console.warn(generateFunctionError(gl, funcName, args, `instanceCount for ${funcName} is 0!`));
          }

          --config.maxDrawCalls;
          if (config.maxDrawCalls === 0) {
            removeChecks();
          }
        }

        function noop() {
        }

        function reportError(errorMsg) {
          const errorInfo = parseStack((new Error()).stack);
          const msg = errorInfo
              ? `${errorInfo.url}:${errorInfo.lineNo}: ${errorMsg}`
              : errorMsg;
          if (config.throwOnError) {
            throw new Error(msg);
          } else {
            console.error(msg);
          }
        }

        function throwOrWarn(throws, warns, msg) {
          if (throws) {
            reportError(msg);
          } else if (warns) {
            console.warn(msg);
          }
        }

        // I know ths is not a full check
        function isNumber(v) {
          return typeof v === 'number';
        }

        const VERTEX_ARRAY_BINDING = 0x85B5;

        function getCurrentVertexArray() {
          const gl = baseContext;
          return (gl instanceof WebGL2RenderingContext || apis.oes_vertex_array_object)
             ? gl.getParameter(VERTEX_ARRAY_BINDING)
             : null;
        }

        function checkUnsetUniforms(ctx, funcName, args) {
          const unsetUniforms = programToUnsetUniformsMap.get(sharedState.currentProgram);
          if (unsetUniforms) {
            const uniformNames = [];
            for (const [name, {index, unset}] of unsetUniforms) {
              if (unset.has(index)) {
                uniformNames.push(name);
              }
            }
            reportFunctionError(ctx, funcName, args, `uniforms "${uniformNames.join('", "')}" have not been set\nSee docs at https://github.com/greggman/webgl-list/ for how to turn off this check`);
          }
        }

        function getUniformElementName(name, size, index) {
          return (size > 1 || index > 1)
             ? `${name}[${index}]`
             : name;
        }

        function checkUnRenderableTextures(ctx, funcName, args) {
          if (!config.failUnrenderableTextures) {
            return;
          }
          const uniformSamplerInfos = programToUniformSamplerValues.get(sharedState.currentProgram);
          const numTextureUnits = textureManager.numTextureUnits;
          for (const {type, values, name} of uniformSamplerInfos) {
            const bindPoint = getBindPointForSampler(type);
            for (let i = 0; i < values.length; ++i) {
              const texUnit = values[i];
              if (texUnit >= numTextureUnits) {
                reportFunctionError(ctx, funcName, args, `uniform ${getUniformTypeInfo(type).name} ${getUniformElementName(name, values.length, i)} is set to ${texUnit} which is out of range. There are only ${numTextureUnits} texture units`);
                return;
              }
              const unrenderableReason = textureManager.getTextureUnitUnrenderableReason(type, texUnit, bindPoint, getWebGLObjectString);
              if (unrenderableReason) {
                // TODO:
                //   * is the type of texture compatible with the sampler?
                //     int textures for int samplers, unsigned for unsigned.
                //   *
                const texture = textureManager.getTextureForTextureUnit(texUnit, bindPoint);
                reportFunctionError(
                    ctx,
                    funcName,
                    args,
                    texture
                        ? `texture ${getWebGLObjectString(texture)} on texture unit ${texUnit} referenced by uniform ${getUniformTypeForUniformSamplerType(type)} ${getUniformElementName(name, values.length, i)} is not renderable: ${unrenderableReason}`
                        : `no texture on texture unit ${texUnit} referenced by uniform ${getUniformElementName(name, values.length, i)}`);
                return;
              }
            }
          }
        }

        function checkUnsetUniformsAndUnrenderableTextures(ctx, funcName, args) {
          if (!sharedState.currentProgram) {
            reportFunctionError(ctx, funcName, args, 'no current program');
            return;
          }
          checkUnsetUniforms(ctx, funcName, args);
          checkUnRenderableTextures(ctx, funcName, args);
        }

        const preChecks = {
          drawArrays: checkUnsetUniformsAndUnrenderableTextures,
          drawElements: checkUnsetUniformsAndUnrenderableTextures,
          drawArraysInstanced: checkUnsetUniformsAndUnrenderableTextures,
          drawElementsInstanced: checkUnsetUniformsAndUnrenderableTextures,
          drawArraysInstancedANGLE: checkUnsetUniformsAndUnrenderableTextures,
          drawElementsInstancedANGLE: checkUnsetUniformsAndUnrenderableTextures,
          drawRangeElements: checkUnsetUniformsAndUnrenderableTextures,
        };

        function markUniformRangeAsSet(webGLUniformLocation, count) {
          if (!webGLUniformLocation) {
            throwOrWarn(config.failUndefinedUniforms, config.warnUndefinedUniforms, `attempt to set non-existent uniform on ${getWebGLObjectString(sharedState.currentProgram)}`);
            return;
          }
          const unsetUniforms = programToUnsetUniformsMap.get(sharedState.currentProgram);
          if (!unsetUniforms) {
            // no unset uniforms
            return;
          }
          const uniformName = locationsToNamesMap.get(webGLUniformLocation);
          const info = unsetUniforms.get(uniformName);
          if (!info) {
            // this uniform already set
            return;
          }
          // remove unset
          for (let i = 0; i < count; ++i) {
            info.unset.delete(info.index + i);
          }
          // have all values for this uniform been set?
          if (!info.unset.size) {
            // yes, so no checking for this uniform needed anymore
            for (const [name] of info.altNames) {
              unsetUniforms.delete(name);
            }
            // have all uniforms in this program been set?
            if (!unsetUniforms.size) {
              // yes, so no checking needed for this program anymore
              programToUnsetUniformsMap.delete(sharedState.currentProgram);
            }
          }
        }

        function markUniformSetV(numValuesPer) {
          return function(gl, funcName, args) {
            const [webGLUniformLocation, data, srcOffset = 0, srcLength = 0] = args;
            const length = srcLength ? srcLength : data.length - srcOffset;
            markUniformRangeAsSet(webGLUniformLocation, length / numValuesPer | 0);
          };
        }

        function isUniformNameIgnored(name) {
          return ignoredUniforms.has(name);
        }

        function isUniformIgnored(webglUniformLocation) {
          return isUniformNameIgnored(locationsToNamesMap.get(webglUniformLocation));
        }

        function markUniformSetMatrixV(numValuesPer) {
          return function(gl, funcName, args) {
            const [webGLUniformLocation, transpose, data, srcOffset = 0, srcLength = 0] = args;
            const length = srcLength ? srcLength : data.length - srcOffset;
            const count = length / numValuesPer | 0;
            if (config.failZeroMatrixUniforms && !isUniformIgnored(webGLUniformLocation)) {
              for (let c = 0; c < count; ++c) {
                let allZero = true;
                const baseOffset = srcOffset + numValuesPer * c;
                for (let i = 0; i < numValuesPer; ++i) {
                  if (data[baseOffset + i]) {
                    allZero = false;
                    break;
                  }
                }
                if (allZero) {
                  reportFunctionError(gl, funcName, [webGLUniformLocation, transpose, ...args], 'matrix is all zeros\nSee docs at https://github.com/greggman/webgl-lint/ for how to turn off this check');
                  return;
                }
              }
            }
            markUniformRangeAsSet(webGLUniformLocation, count);
          };
        }

        function markUniformSetAndRecordSamplerValueV(numValuesPer) {
          const markUniformSetFn = markUniformSetV(numValuesPer);
          return function(gl, funcName, args) {
            markUniformSetFn(gl, funcName, args);
            const [webglUniformLocation, array] = args;
            recordSamplerValues(webglUniformLocation, array);
          };
        }

        function markUniformSet(gl, funcName, args) {
          const [webGLUniformLocation] = args;
          markUniformRangeAsSet(webGLUniformLocation, 1);
        }

        function markUniformSetAndRecordSamplerValue(gl, funcName, args) {
          markUniformSet(gl, funcName, args);
          const [webglUniformLocation, value] = args;
          recordSamplerValues(webglUniformLocation, [value]);
        }

        function recordSamplerValues(webglUniformLocation, newValues) {
          const name = locationsToNamesMap.get(webglUniformLocation);
          const uniformInfos = programToUniformInfoMap.get(sharedState.currentProgram);
          const {index, type, values} = uniformInfos.get(name);
          if (!uniformTypeIsSampler(type)) {
            return;
          }
          const numToCopy = Math.min(newValues.length, values.length - index);
          for (let i = 0; i < numToCopy; ++i) {
            values[i] = newValues[i];
          }
        }

        function makeDeleteWrapper(ctx, funcName, args) {
          const [obj] = args;
          webglObjectToNamesMap.delete(obj);
        }

        const postChecks = {
          // WebGL1
          //   void bufferData(GLenum target, GLsizeiptr size, GLenum usage);
          //   void bufferData(GLenum target, [AllowShared] BufferSource? srcData, GLenum usage);
          // WebGL2:
          //   void bufferData(GLenum target, [AllowShared] ArrayBufferView srcData, GLenum usage, GLuint srcOffset,
          //                   optional GLuint length = 0);
          bufferData(gl, funcName, args) {
            const [target, src, /* usage */, srcOffset = 0, length = 0] = args;
            if (target !== gl.ELEMENT_ARRAY_BUFFER) {
              return;
            }
            const buffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
            if (isNumber(src)) {
              bufferToIndices.set(buffer, new ArrayBuffer(src));
            } else {
              const isDataView = src instanceof DataView;
              const copyLength = length ? length : isDataView
                 ? src.byteLength - srcOffset
                 : src.length - srcOffset;
              const elemSize = isDataView ? 1 : src.BYTES_PER_ELEMENT;
              const bufSize = copyLength * elemSize;
              const arrayBuffer = src.buffer ? src.buffer : src;
              bufferToIndices.set(buffer, arrayBuffer.slice(srcOffset * elemSize, bufSize));
            }
          },
          // WebGL1
          //   void bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] BufferSource srcData);
          // WebGL2
          //   void bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] ArrayBufferView srcData,
          //                      GLuint srcOffset, optional GLuint length = 0);
          bufferSubData(gl, funcName, args) {
            const [target, dstByteOffset, src, srcOffset, length = 0] = args;
            if (target !== gl.ELEMENT_ARRAY_BUFFER) {
              return;
            }
            const buffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
            const data = bufferToIndices.get(buffer);
            const view = new Uint8Array(data);
            const isDataView = src instanceof DataView;
            const copyLength = length ? length : isDataView
               ? src.byteLength - srcOffset
               : src.length - srcOffset;
            const elemSize = isDataView ? 1 : src.BYTES_PER_ELEMENT;
            const copySize = copyLength * elemSize;
            const arrayBuffer = src.buffer ? src.buffer : src;
            const newView = new Uint8Array(arrayBuffer, srcOffset * elemSize, copySize);
            view.set(newView, dstByteOffset);
          },

          drawArrays: checkMaxDrawCallsAndZeroCount,
          drawElements: checkMaxDrawCallsAndZeroCount,
          drawArraysInstanced: checkMaxDrawCallsAndZeroCount,
          drawElementsInstanced: checkMaxDrawCallsAndZeroCount,
          drawArraysInstancedANGLE: checkMaxDrawCallsAndZeroCount,
          drawElementsInstancedANGLE: checkMaxDrawCallsAndZeroCount,
          drawRangeElements: checkMaxDrawCallsAndZeroCount,

          uniform1f: markUniformSet,
          uniform2f: markUniformSet,
          uniform3f: markUniformSet,
          uniform4f: markUniformSet,

          uniform1i: markUniformSetAndRecordSamplerValue,
          uniform2i: markUniformSet,
          uniform3i: markUniformSet,
          uniform4i: markUniformSet,

          uniform1fv: markUniformSetV(1),
          uniform2fv: markUniformSetV(2),
          uniform3fv: markUniformSetV(3),
          uniform4fv: markUniformSetV(4),

          uniform1iv: markUniformSetAndRecordSamplerValueV(1),
          uniform2iv: markUniformSetV(2),
          uniform3iv: markUniformSetV(3),
          uniform4iv: markUniformSetV(4),

          uniformMatrix2fv: markUniformSetMatrixV(4),
          uniformMatrix3fv: markUniformSetMatrixV(9),
          uniformMatrix4fv: markUniformSetMatrixV(16),

          uniform1ui: markUniformSet,
          uniform2ui: markUniformSet,
          uniform3ui: markUniformSet,
          uniform4ui: markUniformSet,

          uniform1uiv: markUniformSetV(1),
          uniform2uiv: markUniformSetV(2),
          uniform3uiv: markUniformSetV(3),
          uniform4uiv: markUniformSetV(4),

          uniformMatrix3x2fv: markUniformSetMatrixV(6),
          uniformMatrix4x2fv: markUniformSetMatrixV(8),

          uniformMatrix2x3fv: markUniformSetMatrixV(6),
          uniformMatrix4x3fv: markUniformSetMatrixV(12),

          uniformMatrix2x4fv: markUniformSetMatrixV(8),
          uniformMatrix3x4fv: markUniformSetMatrixV(12),

          getSupportedExtensions(ctx, funcName, args, result) {
            result.push('GMAN_debug_helper');
          },

          getUniformLocation(ctx, funcName, args, location) {
            const [program, name] = args;
            if (location) {
              locationsToNamesMap.set(location, name);
              programToLocationsMap.get(program).add(location);
            } else {
              if (!isUniformNameIgnored(name)) {
                warnOrThrowFunctionError(
                    ctx,
                    funcName,
                    args,
                    `uniform '${name}' does not exist in ${getWebGLObjectString(program)}`,
                    config.failUndefinedUniforms,
                    config.warnUndefinedUniforms);
              }
            }
          },

          linkProgram(gl, funcName, args) {
            const [program] = args;
            const success = gl.getProgramParameter(program, gl.LINK_STATUS);
            if (success) {
              discardInfoForProgram(program);
              const unsetUniforms = new Map();
              const uniformInfos = new Map();
              const uniformSamplerValues = [];
              const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
              for (let ii = 0; ii < numUniforms; ++ii) {
                const {name, type, size} = gl.getActiveUniform(program, ii);
                if (isBuiltIn(name)) {
                  continue;
                }
                // skip uniform block uniforms
                const location = gl.getUniformLocation(program, name);
                if (!location) {
                  continue;
                }
                const altNames = new Map([[name, 0]]);
                let baseName = name;
                if (name.endsWith('[0]')) {
                  baseName = name.substr(0, name.length - 3);
                  altNames.set(baseName, 0);
                }
                if (size > 1) {
                  for (let s = 0; s < size; ++s) {
                    altNames.set(`${baseName}[${s}]`, s);
                  }
                }

                const addUnsetUniform =
                    (!uniformTypeIsSampler(type) || config.failUnsetSamplerUniforms)
                    && !ignoredUniforms.has(name);

                const values = uniformTypeIsSampler(type) ? new Array(size).fill(0) : undefined;
                if (values) {
                  uniformSamplerValues.push({type, values, name: baseName});
                }

                const unset = new Set(range(0, size));
                for (const [name, index] of altNames) {
                  if (addUnsetUniform) {
                    unsetUniforms.set(name, {
                      index,
                      unset,
                      altNames,
                    });
                  }
                  uniformInfos.set(name, {
                    index,
                    type,
                    size,
                    ...(values && {values}),
                  });
                }
              }
              programToUniformSamplerValues.set(program, uniformSamplerValues);
              programToUniformInfoMap.set(program, uniformInfos);
              if (unsetUniforms.size) {
                programToUnsetUniformsMap.set(program, unsetUniforms);
              }
            }
          },

          useProgram(ctx, funcName, args) {
            const [program] = args;
            sharedState.currentProgram = program;
          },

          deleteProgram(ctx, funcName, args) {
            const [program] = args;
            if (sharedState.currentProgram === program) {
              sharedState.currentProgram = undefined;
            }
            discardInfoForProgram(program);
          },

          deleteBuffer(ctx, funcName, args) {
            const [buffer] = args;
            // meh! technically this doesn't work because buffers
            // are ref counted so if you have an index buffer on
            // vao you can still use it. Sigh!
            bufferToIndices.delete(buffer);
          },

          deleteFramebuffer: makeDeleteWrapper,
          deleteRenderbuffer: makeDeleteWrapper,
          deleteTexture: makeDeleteWrapper,
          deleteShader: makeDeleteWrapper,
          deleteQuery: makeDeleteWrapper,
          deleteSampler: makeDeleteWrapper,
          deleteSync: makeDeleteWrapper,
          deleteTransformFeedback: makeDeleteWrapper,
          deleteVertexArray: makeDeleteWrapper,
          deleteVertexArrayOES: makeDeleteWrapper,
        };
        Object.entries(textureManager.postChecks).forEach(([funcName, func]) => {
          const existingFn = postChecks[funcName] || noop;
          postChecks[funcName] = function(...args) {
            existingFn(...args);
            if (config.failUnrenderableTextures) {
              func(...args);
            }
          };
        });

        /*
        function getWebGLObject(gl, funcName, args, value) {
          const funcInfos = glFunctionInfos[funcName];
          if (funcInfos && funcInfos.bindHelper) {
            return funcInfos.bindHelper(gl, value);
          }
          const binding = bindPointMap.get(value);
          return binding ? gl.getParameter(binding) : null;
        }
        */

        function getWebGLObjectString(webglObject) {
          const name = webglObjectToNamesMap.get(webglObject) || '*unnamed*';
          return `${webglObject.constructor.name}(${quotedStringOrEmpty(name)})`;
        }

        function getIndicesForBuffer(buffer) {
          return bufferToIndices.get(buffer);
        }

        /**
         * Returns the string version of a WebGL argument.
         * Attempts to convert enum arguments to strings.
         * @param {string} funcName the name of the WebGL function.
         * @param {number} numArgs the number of arguments passed to the function.
         * @param {number} argumentIndx the index of the argument.
         * @param {*} value The value of the argument.
         * @return {string} The value as a string.
         */
        function glFunctionArgToString(gl, funcName, numArgs, argumentIndex, value) {
          // there's apparently no easy to find out if something is a WebGLObject
          // as `WebGLObject` has been hidden. We could check all the types but lets
          // just check if the user mapped something
          const name = webglObjectToNamesMap.get(value);
          if (name) {
            return `${value.constructor.name}("${name}")`;
          }
          if (value instanceof WebGLUniformLocation) {
            const name = locationsToNamesMap.get(value);
            return `WebGLUniformLocation("${name}")`;
          }
          const funcInfos = glFunctionInfos[funcName];
          if (funcInfos !== undefined) {
            const funcInfo = funcInfos[numArgs];
            if (funcInfo !== undefined) {
              const argTypes = funcInfo.enums;
              if (argTypes) {
                const argType = argTypes[argumentIndex];
                if (argType !== undefined) {
                  if (typeof argType === 'function') {
                    return argType(gl, value);
                  } else {
                    // is it a bind point
                    //
                    // I'm not sure what cases there are. At first I thought I'd
                    // translate every enum representing a bind point into its corresponding
                    // WebGLObject but that fails for `bindXXX` and for `framebufferTexture2D`'s
                    // 3rd argument.
                    //
                    // Maybe it only works if it's not `bindXXX` and if its the first argument?
                    //
                    // issues:
                    //   * bindBufferBase, bindBufferRange, indexed
                    //
                    // should we do something about these?
                    //   O vertexAttrib, enable, vertex arrays implicit, buffer is implicit
                    //       Example: could print
                    //            'Error setting attrib 4 of WebGLVertexArrayObject("sphere") to WebGLBuffer("sphere positions")
                    //   O drawBuffers implicit
                    //       Example: 'Error trying to set drawBuffers on WebGLFrameBuffer('post-processing-fb)
                    if (!funcName.startsWith('bind') && argumentIndex === 0) {
                      const binding = getBindingQueryEnumForBindPoint(value);
                      if (binding) {
                        const webglObject = gl.getParameter(binding);
                        if (webglObject) {
                          return `${glEnumToString(value)}{${getWebGLObjectString(webglObject)}}`;
                        }
                      }
                    }
                    return glEnumToString(value);
                  }
                }
              }
            }
          }
          if (value === null) {
            return 'null';
          } else if (value === undefined) {
            return 'undefined';
          } else if (Array.isArray(value) || isTypedArray(value)) {
            if (value.length <= 32) {
              return `[${Array.from(value.slice(0, 32)).join(', ')}]`;
            } else {
              return `${value.constructor.name}(${value.length !== undefined ? value.length : value.byteLength})`;
            }
          } else {
            return value.toString();
          }
        }

        function checkTypedArray(ctx, funcName, args, arg, ndx, offset, length) {
          if (!isTypedArray(arg)) {
            reportFunctionError(ctx, funcName, args, `argument ${ndx} must be a TypedArray`);
            return;
          }
          if (!isArrayThatCanHaveBadValues(arg)) {
            return;
          }
          const start = offset;
          const end = offset + length;
          for (let i = start; i < end; ++i) {
            if (arg[i] === undefined) {
              reportFunctionError(ctx, funcName, args, `element ${i} of argument ${ndx} is undefined`);
              return;
            } else if (isNaN(arg[i])) {
              reportFunctionError(ctx, funcName, args, `element ${i} of argument ${ndx} is NaN`);
              return;
            }
          }
          return;
        }

        function checkTypedArrayWithOffset(ctx, funcName, args, arg, ndx) {
          const offset = args[args.length - 1];
          const length = arg.length - offset;
          checkTypedArray(ctx, funcName, args, arg, ndx, offset, length);
        }

        function checkBufferSourceWithOffset(ctx, funcName, args, arg, ndx) {
          if (isTypedArray(arg) && isArrayThatCanHaveBadValues(arg)) {
            const offset = args[args.length - 1];
            const length = arg.length - offset;
            checkTypedArray(ctx, funcName, args, arg, ndx, offset, length);
          } else {
            if (Array.isArray(arg)) {
              reportFunctionError(ctx, funcName, args, `argument ${ndx} is not an ArrayBufferView or ArrayBuffer`);
            }
          }
        }

        function checkBufferSourceWithOffsetAndLength(ctx, funcName, args, arg, ndx) {
          if (isTypedArray(arg) && isArrayThatCanHaveBadValues(arg)) {
            const offset = args[args.length - 2];
            const length = args[args.length - 1];
            checkTypedArray(ctx, funcName, args, arg, ndx, offset, length);
          } else {
            if (Array.isArray(arg)) {
              reportFunctionError(ctx, funcName, args, `argument ${ndx} is not an ArrayBufferView or ArrayBuffer`);
            }
          }
        }

        function checkOptionalTypedArrayWithOffset(ctx, funcName, args, arg, ndx) {
          if (Array.isArray(arg) || isTypedArray(arg)) {
            const offset = args[args.length - 1];
            const length = arg.length - offset;
            checkTypedArray(ctx, funcName, args, arg, ndx, offset, length);
          }
        }

        function checkArrayForUniformImpl(ctx, funcName, args, arg, ndx, offset, length, valuesPerElementFunctionRequires) {
          const webglUniformLocation = args[0];
          if (!webglUniformLocation) {
            return;
          }
          const uniformInfos = programToUniformInfoMap.get(sharedState.currentProgram);
          if (!uniformInfos) {
            return;
          }
          // The uniform info type might be 'vec3' but they
          // might be calling uniform2fv. WebGL itself will catch that error but we might
          // report the wrong error here if we check for vec3 amount of data
          const name = locationsToNamesMap.get(webglUniformLocation);
          const {type, size, index} = uniformInfos.get(name);
          const valuesPerElementUniformRequires = getUniformTypeInfo(type).size;
          if (valuesPerElementFunctionRequires !== valuesPerElementUniformRequires) {
            reportFunctionError(ctx, funcName, args, `uniform "${name}" is ${getUniformTypeInfo(type).name} which is wrong for ${funcName}`);
          }
          const maxElementsToReadFromArray = size - index;
          const numElementsToCheck = Math.min(length / valuesPerElementFunctionRequires | 0, maxElementsToReadFromArray);
          const numValuesToCheck = numElementsToCheck * valuesPerElementFunctionRequires;

          const start = offset;
          const end = offset + numValuesToCheck;
          for (let i = start; i < end; ++i) {
            if (arg[i] === undefined) {
              reportFunctionError(ctx, funcName, args, `element ${i} of argument ${ndx} is undefined`);
              return;
            } else if (isNaN(arg[i])) {
              reportFunctionError(ctx, funcName, args, `element ${i} of argument ${ndx} is NaN`);
              return;
            }
          }
        }

        function checkArrayForUniformWithOffsetAndLength(valuesPerElementFunctionRequires) {
          return function(ctx, funcName, args, arg, ndx) {
            const offset = args[args.length - 2];
            const length = args[args.length - 1];
            checkArrayForUniformImpl(ctx, funcName, args, arg, ndx, offset, length, valuesPerElementFunctionRequires);
          };
        }

        function checkArrayForUniformWithOffset(valuesPerElementFunctionRequires) {
          return function(ctx, funcName, args, arg, ndx) {
            const offset = args[args.length - 1];
            const length = arg.length - offset;
            checkArrayForUniformImpl(ctx, funcName, args, arg, ndx, offset, length, valuesPerElementFunctionRequires);
          };
        }

        function checkArrayForUniform(valuesPerElementFunctionRequires) {
          return function(ctx, funcName, args, arg, ndx) {
            const offset = 0;
            const length = arg.length;
            checkArrayForUniformImpl(ctx, funcName, args, arg, ndx, offset, length, valuesPerElementFunctionRequires);
          };
        }

        /**
         * Converts the arguments of a WebGL function to a string.
         * Attempts to convert enum arguments to strings.
         *
         * @param {string} funcName the name of the WebGL function.
         * @param {number} args The arguments.
         * @return {string} The arguments as a string.
         */
        function glFunctionArgsToString(ctx, funcName, args) {
          const numArgs = args.length;
          const stringifiedArgs = args.map(function(arg, ndx) {
            let str = glFunctionArgToString(ctx, funcName, numArgs, ndx, arg);
            // shorten because of long arrays
            if (str.length > 200) {
              str = str.substring(0, 200) + '...';
            }
            return str;
          });
          return stringifiedArgs.join(', ');
        }

        function generateFunctionError(ctx, funcName, args, msg) {
          const gl = baseContext;
          const msgs = [msg];
          const funcInfos = glFunctionInfos[funcName];
          if (funcInfos && funcInfos.errorHelper) {
            msgs.push(funcInfos.errorHelper(ctx, funcName, args, sharedState));
          }
          if (funcName.includes('draw')) {
            const program = gl.getParameter(gl.CURRENT_PROGRAM);
            if (!program) {
              msgs.push('no shader program in use!');
            } else {
              msgs.push(`with ${getWebGLObjectString(program)} as current program`);
            }
          }
          if (funcName.includes('vertexAttrib') || isDrawFunction(funcName)) {
            const vao = getCurrentVertexArray();
            const name = webglObjectToNamesMap.get(vao);
            const vaoName = `WebGLVertexArrayObject(${quotedStringOrEmpty(name || '*unnamed*')})`;
            msgs.push(`with ${vao ? vaoName : 'the default vertex array'} bound`);
          }
          const stringifiedArgs = glFunctionArgsToString(ctx, funcName, args);
          return `error in ${funcName}(${stringifiedArgs}): ${msgs.join('\n')}`;
        }

        function warnOrThrowFunctionError(ctx, funcName, args, msg, throws, warns) {
          throwOrWarn(throws, warns, generateFunctionError(ctx, funcName, args, msg));
        }

        function reportFunctionError(ctx, funcName, args, msg) {
          reportError(generateFunctionError(ctx, funcName, args, msg));
        }


        function checkArgs(ctx, funcName, args) {
          const funcInfos = glFunctionInfos[funcName];
          if (funcInfos) {
            const funcInfo = funcInfos[args.length];
            if (!funcInfo) {
              reportFunctionError(ctx, funcName, args, `no version of function '${funcName}' takes ${args.length} arguments`);
              return;
            } else {
              const {numbers = {}, arrays = {}} = funcInfo;
              for (let ndx = 0; ndx < args.length; ++ndx) {
                const arg = args[ndx];
                // check the no arguments are undefined
                if (arg === undefined) {
                  reportFunctionError(ctx, funcName, args, `argument ${ndx} is undefined`);
                  return;
                }
                if (numbers[ndx] !== undefined) {
                  if (numbers[ndx] >= 0)  {
                    // check that argument that is number (positive) is a number
                    if ((typeof arg !== 'number' && !(arg instanceof Number) && arg !== false && arg !== true) || isNaN(arg)) {
                      reportFunctionError(ctx, funcName, args, `argument ${ndx} is not a number`);
                      return;
                    }
                  } else {
                    // check that argument that maybe is a number (negative) is not NaN
                    if (!(arg instanceof Object) && isNaN(arg)) {
                      reportFunctionError(ctx, funcName, args, `argument ${ndx} is NaN`);
                      return;
                    }
                  }
                }
                // check that an argument that is supposed to be an array of numbers is an array and has no NaNs in the array and no undefined
                const arraySetting = arrays[ndx];
                if (arraySetting !== undefined) {
                  const isArrayLike = Array.isArray(arg) || isTypedArray(arg);
                  if (arraySetting >= 0) {
                    if (!isArrayLike) {
                      reportFunctionError(ctx, funcName, args, `argument ${ndx} is not a array or typedarray`);
                      return;
                    }
                  }
                  if (isArrayLike && isArrayThatCanHaveBadValues(arg)) {
                    if (typeof arraySetting === 'function') {
                      arraySetting(ctx, funcName, args, arg, ndx);
                    } else {
                      for (let i = 0; i < arg.length; ++i) {
                        if (arg[i] === undefined) {
                          reportFunctionError(ctx, funcName, args, `element ${i} of argument ${ndx} is undefined`);
                          return;
                        } else if (isNaN(arg[i])) {
                          reportFunctionError(ctx, funcName, args, `element ${i} of argument ${ndx} is NaN`);
                          return;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        const extraWrappers = {
          getExtension(ctx, propertyName) {
            const origFn = ctx[propertyName];
            ctx[propertyName] = function(...args) {
              const extensionName = args[0].toLowerCase();
              const api = apis[extensionName];
              if (api) {
                return api.ctx;
              }
              const ext = origFn.call(ctx, ...args);
              if (ext) {
                augmentAPI(ext, extensionName, {...options, origGLErrorFn});
              }
              return ext;
            };
          },
        };

        // Makes a function that calls a WebGL function and then calls getError.
        function makeErrorWrapper(ctx, funcName) {
          const origFn = ctx[funcName];
          const preCheck = preChecks[funcName] || noop;
          const postCheck = postChecks[funcName] || noop;
          ctx[funcName] = function(...args) {
            preCheck(ctx, funcName, args);
            checkArgs(ctx, funcName, args);
            if (sharedState.currentProgram && isDrawFunction(funcName)) {
              const msgs = checkAttributesForBufferOverflow(baseContext, funcName, args, getWebGLObjectString, getIndicesForBuffer);
              if (msgs.length) {
                reportFunctionError(ctx, funcName, args, msgs.join('\n'));
              }
            }
            const result = origFn.call(ctx, ...args);
            const gl = baseContext;
            const err = origGLErrorFn.call(gl);
            if (err !== 0) {
              glErrorShadow[err] = true;
              const msgs = [glEnumToString(err)];
              if (isDrawFunction(funcName)) {
                if (sharedState.currentProgram) {
                  msgs.push(...checkFramebufferFeedback(gl, getWebGLObjectString));
                }
              }
              reportFunctionError(ctx, funcName, args, msgs.join('\n'));
            } else {
              postCheck(ctx, funcName, args, result);
            }
            return result;
          };
          const extraWrapperFn = extraWrappers[funcName];
          if (extraWrapperFn) {
            extraWrapperFn(ctx, funcName, origGLErrorFn);
          }
        }

        function range(start, end) {
          const array = [];
          for (let i = start; i < end; ++i) {
            array.push(i);
          }
          return array;
        }

        // Wrap each function
        for (const propertyName in ctx) {
          if (typeof ctx[propertyName] === 'function') {
            origFuncs[propertyName] = ctx[propertyName];
            makeErrorWrapper(ctx, propertyName);
          }
        }

        // Override the getError function with one that returns our saved results.
        if (ctx.getError) {
          ctx.getError = function() {
            for (const err of Object.keys(glErrorShadow)) {
              if (glErrorShadow[err]) {
                glErrorShadow[err] = false;
                return err;
              }
            }
            return ctx.NO_ERROR;
          };
        }

        apis[nameOfClass.toLowerCase()] = { ctx, origFuncs };
      }

      /*
      The MIT License (MIT)

      Copyright (c) 2019 Gregg Tavares

      Permission is hereby granted, free of charge, to any person obtaining a copy of
      this software and associated documentation files (the "Software"), to deal in
      the Software without restriction, including without limitation the rights to
      use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      the Software, and to permit persons to whom the Software is furnished to do so,
      subject to the following conditions:

      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
      FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
      COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
      IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
      CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      */

      /* global console */
      /* global document */
      /* global HTMLCanvasElement */
      /* global OffscreenCanvas */

      console.log('webgl-lint running');

      function wrapGetContext(Ctor) {
        const oldFn = Ctor.prototype.getContext;
        Ctor.prototype.getContext = function(type, ...args) {
          const ctx = oldFn.call(this, type, ...args);
          // Using bindTexture to see if it's WebGL. Could check for instanceof WebGLRenderingContext
          // but that might fail if wrapped by debugging extension
          if (ctx && ctx.bindTexture) {
            const config = {
              maxDrawCalls: 1000,
              throwOnError: true,
              failUnsetUniforms: true,
              failUnsetSamplerUniforms: false,
              failZeroMatrixUniforms: true,
              failUnrenderableTextures: true,
              failUndefinedUniforms: false,
              warnUndefinedUniforms: true,
              ignoreUniforms: [],
            };
            augmentAPI(ctx, type, config);
            const ext = ctx.getExtension('GMAN_debug_helper');
            document.querySelectorAll('[data-gman-debug-helper]').forEach(elem => {
              const str = elem.dataset.gmanDebugHelper;
              let config;
              try {
                config = JSON.parse(str);
              } catch (e) {
                e.message += `\n${str}\nfailed to parse data-gman-debug-helper as JSON in: ${elem.outerHTML}`;
                throw e;
              }
              if (config) {
                ext.setConfiguration(config);
              }
            });
          }
          return ctx;
        };
      }

      if (typeof HTMLCanvasElement !== 'undefined') {
        wrapGetContext(HTMLCanvasElement);
      }
      if (typeof OffscreenCanvas !== 'undefined') {
        wrapGetContext(OffscreenCanvas);
      }

    })));

    var PseudoLayer = function PseudoLayer(shaderName, inputs, shader, _variables) {
      var _this = this;

      _classCallCheck(this, PseudoLayer);

      this._getMaps = function (thisLayer) {
        for (var _i = 0, _Object$keys = Object.keys(thisLayer.inputs); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];

          if (thisLayer.inputs[key].type === "pseudolayer") {
            _this._getMaps(thisLayer.inputs[key]);
          } else {
            var map = thisLayer.inputs[key].olMap;
            var mapId = thisLayer.inputs[key].mapOrderId;

            _this.maps.push({
              mapId: mapId,
              map: map
            });
          }
        }
      };

      this._getLayers = function () {
        for (var x = 0; x < _this.maps.length; x++) {
          var thisLayer = _this.maps[x].getLayers().getArray()[0];

          _this.layers.push(thisLayer);
        }
      };

      this._getShaderPasses = function (thisLayer) {
        for (var _i2 = 0, _Object$keys2 = Object.keys(thisLayer.inputs); _i2 < _Object$keys2.length; _i2++) {
          var key = _Object$keys2[_i2];
          var nextLayer = thisLayer.inputs[key];

          if (nextLayer.type === "layerObject") {
            _this.shaderPasses++;
          } else {
            _this.shaderPasses++;

            _this._getShaderPasses(nextLayer);
          }
        }
      };

      this.updateVariables = function (variables) {
        for (var _i3 = 0, _Object$keys3 = Object.keys(variables); _i3 < _Object$keys3.length; _i3++) {
          var key = _Object$keys3[_i3];
          _this.variables[key] = variables[key];
        }
      };

      this.type = 'pseudolayer';
      this.id = Date.now() + Math.floor(Math.random() * 1000000);
      this.inputs = inputs;
      this.shaderName = shaderName;
      this.shader = shader;
      this.variables = _variables;
      this.maps = [];
      this.layers = [];

      this._getMaps(this); // base number of shader passes for every layer is 1 (gets vertically flipped at the end).
      // a pass is then done for every new program that is added


      this.shaderPasses = 1;

      this._getShaderPasses(this);

      this.maps.sort(function (x, y) {
        return x.mapId - y.mapId;
      });
      this.maps = this.maps.map(function (_ref) {
        var map = _ref.map;
        return map;
      });

      this._getLayers();
    };

    var ShaderPassEvent = function ShaderPassEvent(callback) {
      var _this = this;

      _classCallCheck(this, ShaderPassEvent);

      this.increment = function () {
        _this._passes++;

        _this._callback(_this._passes);
      };

      this.reset = function () {
        _this._passes = 0;
      };

      this._passes = 0;
      this._callback = callback;
    }; // export class CanvasReadyEvent{
    //     constructor(callback) {
    //     }
    // }

    // contains hard-coded shaders for rendering a pseudo layer "as is", and for flipping an image
    // also contains state that controls how often the canvas can be rendered to -> prevents rendering before current pseudolayer is rendered
    // uses twgl which makes everyone's life a million times easier. https://twgljs.org/docs/.

    var WebGLCanvas = function WebGLCanvas(canvas) {
      var _this = this;

      _classCallCheck(this, WebGLCanvas);

      this._compileShaders = function (fragmentShader) {
        return createProgramInfo(_this.gl, [_this._baseVertexShader, fragmentShader]);
      };

      this._createFramebuffers = function (number) {
        var framebuffers = [];

        for (var x = 0; x < number; x++) {
          var fbo = createFramebufferInfo(_this.gl);
          framebuffers.push(fbo);

          _this._cleanupTracker._framebuffers.push(fbo); // adding the framebuffer object texture to the textures cleanup collection seems to prevent
          // the gpu memory leak


          _this._cleanupTracker._textures.push(fbo.attachments[0]); // doesnt seem to have an effect, but for completeness


          _this._cleanupTracker._renderbuffers.push(fbo.attachments[1]);
        }

        return framebuffers;
      };

      this._generateTexture = function (source) {
        var texture = createTexture(_this.gl, {
          src: source
        });

        _this._cleanupTracker._textures.push(texture);

        return texture;
      };

      this.activatePseudolayer = function (pseudolayer) {
        // remove the maps used to render the previous pseudolayer and their handlers
        _this.deactivatePseudolayer(); // set maps used to generate pseudolayer to visible. also fires the postrender event


        for (var x = 0; x < pseudolayer.layers.length; x++) {
          pseudolayer.layers[x].setVisible(true);

          _this._mapsUsed.push(pseudolayer.layers[x]);
        } // sets the current event handlers. from this point until activatePseudolayer is called again, every frame update
        // attempts to render the pseudolayer. allows for smooth movement of the map


        var frameRender = pseudolayer.maps[pseudolayer.maps.length - 1].on("postrender", function () {
          // tries to render the pseudolayer. if the canvas is still in the previous render pass, will return
          // check if the canvas has finished passing all buffers from the previous frame to the gpu. if it hasn't, skip rendering this pseudolayer
          if (_this._canvasReady) {
            _this._canvasReady = false;

            _this._renderPseudoLayer(pseudolayer);
          }
        });

        _this._canvasEvents.push(frameRender);
      };

      this.deactivatePseudolayer = function () {
        // set maps previously used to generate pseudolayer to invisible -> prevent unnecessary tile calls
        if (_this._mapsUsed.length > 0) {
          for (var x = 0; x < _this._mapsUsed.length; x++) {
            _this._mapsUsed[x].setVisible(false);
          } // empties map array to be written to by the next pseudolayer


          _this._mapsUsed = [];
        } // remove the current event handler if it exists


        for (var _x = 0; _x < _this._canvasEvents.length; _x++) {
          var currentEvent = _this._canvasEvents[_x];
          unByKey(currentEvent);
        } // unbind all references to canvas events


        _this._canvasEvents = [];
      };

      this.clearCanvas = function () {
        // clear the canvas
        _this.gl.clear(_this.gl.COLOR_BUFFER_BIT);
      };

      this._checkIfShaderPassesFinished = function (shaderPasses) {
        if (shaderPasses === _this._requiredShaderPasses) {
          _this._cleanUpGpuMemory();
        }
      };

      this._cleanUpGpuMemory = function () {
        var numTextureUnits = _this.gl.getParameter(_this.gl.MAX_TEXTURE_IMAGE_UNITS);

        for (var unit = 0; unit < numTextureUnits; ++unit) {
          _this.gl.activeTexture(_this.gl.TEXTURE0 + unit);

          _this.gl.bindTexture(_this.gl.TEXTURE_2D, null);

          _this.gl.bindTexture(_this.gl.TEXTURE_CUBE_MAP, null);
        }

        _this.gl.bindBuffer(_this.gl.ARRAY_BUFFER, null);

        _this.gl.bindBuffer(_this.gl.ELEMENT_ARRAY_BUFFER, null);

        _this.gl.bindRenderbuffer(_this.gl.RENDERBUFFER, null);

        _this.gl.bindFramebuffer(_this.gl.FRAMEBUFFER, null);

        for (var x = 0; x < _this._cleanupTracker._framebuffers.length; x++) {
          var framebufferToDelete = _this._cleanupTracker._framebuffers[x];

          _this.gl.deleteFramebuffer(framebufferToDelete.framebuffer);
        }

        for (var _x2 = 0; _x2 < _this._cleanupTracker._renderbuffers.length; _x2++) {
          var renderBufferToDelete = _this._cleanupTracker._renderbuffers[_x2];

          _this.gl.deleteRenderbuffer(renderBufferToDelete);
        }

        for (var _x3 = 0; _x3 < _this._cleanupTracker._textures.length; _x3++) {
          var textureToDelete = _this._cleanupTracker._textures[_x3];

          _this.gl.deleteTexture(textureToDelete);
        }

        for (var _x4 = 0; _x4 < _this._cleanupTracker._arrayBuffers.length; _x4++) {
          var bufferToDelete = _this._cleanupTracker._arrayBuffers[_x4];

          _this.gl.bindBuffer(_this.gl.ARRAY_BUFFER, bufferToDelete);

          _this.gl.bufferData(_this.gl.ARRAY_BUFFER, 1, _this.gl.STATIC_DRAW);

          _this.gl.deleteBuffer(bufferToDelete);
        }

        for (var _x5 = 0; _x5 < _this._cleanupTracker._elementArrayBuffers.length; _x5++) {
          var _bufferToDelete = _this._cleanupTracker._elementArrayBuffers[_x5];

          _this.gl.bindBuffer(_this.gl.ELEMENT_ARRAY_BUFFER, _bufferToDelete);

          _this.gl.bufferData(_this.gl.ELEMENT_ARRAY_BUFFER, 1, _this.gl.STATIC_DRAW);

          _this.gl.deleteBuffer(_bufferToDelete);
        }

        _this._framebufferTracker = {};
        _this._cleanupTracker = {
          _textures: [],
          _framebuffers: [],
          _renderbuffers: [],
          _arrayBuffers: [],
          _elementArrayBuffers: []
        };

        _this._shaderPassEvent.reset();

        setTimeout(function () {
          _this._canvasReady = true;
        }, _this.frameLimiter);
      };

      this._renderPseudoLayer = function (pseudolayer) {
        _this._requiredShaderPasses = pseudolayer.shaderPasses; // get all child pseudolayers

        _this._recurseThroughChildLayers(pseudolayer, pseudolayer); // render the target pseudolayer


        var framebuffer = _this._generatePseudoLayer(pseudolayer); // flip the output of the current operation


        _this._runvFlipProgram(framebuffer.attachments[0]);
      };

      this._recurseThroughChildLayers = function (thisLayer, originalLayer) {
        for (var _i = 0, _Object$keys = Object.keys(thisLayer.inputs); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          var nextLayer = thisLayer.inputs[key];

          if (nextLayer.type === "layerObject") {
            if (!(thisLayer.id === originalLayer.id)) {
              var framebuffer = _this._generatePseudoLayer(thisLayer);

              _this._framebufferTracker[thisLayer.id] = framebuffer;
            }
          } else {
            _this._recurseThroughChildLayers(nextLayer, originalLayer);

            if (!(thisLayer.id === originalLayer.id)) {
              var _framebuffer = _this._generatePseudoLayer(thisLayer);

              _this._framebufferTracker[thisLayer.id] = _framebuffer;
            }
          }
        }
      };

      this._generatePseudoLayer = function (pseudolayer) {
        var framebuffer = _this._createFramebuffers(1)[0];

        var renderInputs = {};
        var inputs = pseudolayer.inputs;
        var renderVariables = pseudolayer.variables;
        var renderShader = pseudolayer.shader;

        for (var _i2 = 0, _Object$keys2 = Object.keys(inputs); _i2 < _Object$keys2.length; _i2++) {
          var key = _Object$keys2[_i2];

          if (inputs[key].type === "layerObject") {
            var textureId = _this._generateTexture(inputs[key].container.querySelector("canvas"));

            renderInputs[key] = textureId;
          } else {
            renderInputs[key] = _this._framebufferTracker[inputs[key].id].attachments[0];
          }
        }

        _this._startRendering(renderInputs, renderVariables, renderShader, framebuffer);

        return framebuffer;
      };

      this._runvFlipProgram = function (framebufferTexture) {
        _this.gl.bindFramebuffer(_this.gl.FRAMEBUFFER, null);

        _this._startRendering({
          f_image: framebufferTexture
        }, {}, _this._vFlipProgram);
      };

      this._startRendering = function (inputs, variables, programInfo, currentFramebuffer) {
        var gl = _this.gl;
        var webglCanvas = _this;
        requestAnimationFrame(render);

        function render() {
          resizeCanvasToDisplaySize(gl.canvas);
          gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
          var quadVertices = primitives.createXYQuadBufferInfo(gl);

          webglCanvas._cleanupTracker._arrayBuffers.push(quadVertices.attribs.normal.buffer);

          webglCanvas._cleanupTracker._arrayBuffers.push(quadVertices.attribs.position.buffer);

          webglCanvas._cleanupTracker._arrayBuffers.push(quadVertices.attribs.texcoord.buffer);

          webglCanvas._cleanupTracker._elementArrayBuffers.push(quadVertices.indices);

          setBuffersAndAttributes(gl, programInfo, quadVertices);
          gl.useProgram(programInfo.program);
          setUniforms(programInfo, inputs);
          setUniforms(programInfo, variables);
          bindFramebufferInfo(gl, currentFramebuffer);
          drawBufferInfo(gl, quadVertices, gl.TRIANGLES);

          webglCanvas._shaderPassEvent.increment();
        }
      };

      this.generatePseudoLayer = function (layer) {
        return new PseudoLayer("baseProgram", {
          f_image: layer
        }, _this._baseProgram, {});
      };

      this.processPseudoLayer = function (args) {
        var dynamicShader = _this._addDynamicsToShader(args.shader, args.dynamics);

        var compiledShader = _this._compileShaders(dynamicShader);

        return new PseudoLayer(args.shaderName, args.inputs, compiledShader, args.variables);
      };

      this._addDynamicsToShader = function (shader, dynamics) {
        if (dynamics === {}) {
          return shader;
        } else {
          for (var _i3 = 0, _Object$keys3 = Object.keys(dynamics); _i3 < _Object$keys3.length; _i3++) {
            var key = _Object$keys3[_i3];
            var regex = new RegExp("{" + key + "}", "g");
            shader = shader.replace(regex, dynamics[key].toString());
          }
        }

        return shader;
      };

      // restricts the framerate to a maximum of this value. will probably bounce back off canvas ready events
      this.frameLimiter = 1000 / 100; // whether the canvas is ready to rendered to. if false, pseudolayer will not be rendered, since the canvas is currently rendering a different
      // pseudolayer. allows textures and framebuffers from current pseudolayer to be removed, preventing memory issues

      this._canvasReady = true; // tracks how many shader passes have been done while rendering this pseudolayer. each pseudolayer has a predefined number of shader passes
      // that need to be completed to render it. once this number is reached, we know all data that needs to has gone to the gpu, and we can
      // start rendering a new layer. if updates with "set", will check how many shader passes have completed.

      this._requiredShaderPasses = 0;
      this._shaderPassEvent = new ShaderPassEvent(this._checkIfShaderPassesFinished); // webgl context

      this.gl = getContext(document.getElementById(canvas)); // webgl lint for more descriptive webgl errors

      this._lint = this.gl.getExtension('GMAN_debug_helper'); // height and width of the webgl canvas

      this._width = this.gl.canvas.width;
      this._height = this.gl.canvas.height; // base vertex shader, with position and texture quads. stored for use in other shader programs, as these only require fragment shader

      var baseVertexShader = "#version 300 es\r\n\r\nin vec2 position;\r\nin vec2 texcoord;\r\n\r\nout vec2 o_texCoord;\r\n\r\nvoid main() {\r\n   gl_Position = vec4(position, 0, 1);\r\n   o_texCoord = texcoord;\r\n}";
      this._baseVertexShader = baseVertexShader; // flips the output, for converting from texture coordinates to clip coordinates

      var vFlipVertexShader = "#version 300 es\r\n\r\nin vec2 position;\r\nin vec2 texcoord;\r\n\r\nout vec2 o_texCoord;\r\n\r\nvoid main() {\r\n   gl_Position = vec4(position.x, position.y * -1.0, 0, 1);\r\n   o_texCoord = texcoord;\r\n}"; // base fragment shader, for rendering a pseudolayer "as is"

      var baseFragmentShader = "#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 o_texCoord;\r\n\r\nuniform sampler2D f_image;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n   o_colour = texture(f_image, o_texCoord);\r\n}"; // the base program. pre-compiled as used for every pseudolayer

      this._baseProgram = createProgramInfo(this.gl, [baseVertexShader, baseFragmentShader]); // the vertical flip program. pre-compiled as used for every pseudolayer

      this._vFlipProgram = createProgramInfo(this.gl, [vFlipVertexShader, baseFragmentShader]); // key = id of the pseudolayer, value = framebuffer containing the pseudolayer. allows multiple effects to be stacked

      this._framebufferTracker = {}; // all textures, framebuffers, renderbuffers, arraybuffers and elementarraybuffers relating to each pseudolayer. allows these to be deleted once
      // a pseudolayer has been rendered, preventing memory issues.

      this._cleanupTracker = {
        _textures: [],
        _framebuffers: [],
        _renderbuffers: [],
        _arrayBuffers: [],
        _elementArrayBuffers: []
      }; // the base openlayers maps for each layer. allows these to be made visible when needed

      this._mapsUsed = []; // the current events bound to the exiting pseudolayer

      this._canvasEvents = [];
    } // compiles webgl shaders from string
    ;

    var UiLayer = function UiLayer(pseudolayer, layerNumber) {
      _classCallCheck(this, UiLayer);

      // same id as the pseudolayer, can be used to get the DOM element, the pseudolayer or the uiLayer by id. 
      this.id = pseudolayer.id; // the pseudolayer that is rendered -> updated every time a parameter is updated. reset to originalPseudolayer on reset.

      this.pseudolayer = pseudolayer; // the original layer -> should never change

      this.originalPseudolayer = pseudolayer; // tracks state for all of the guis -> checked whenever a gui is initialised, so the gui can have the
      // same value as the last input by the user

      this.state = {}; // html required to add the layer to the layer panel of the ui

      var html = "<div class=\"layer\" id=\"".concat(this.id, "\" data-id=\"").concat(this.id, "\">\n                        <button class=\"delete_layer\" data-id=\"").concat(this.id, "\">&#10060</button>\n                        <span id=\"Test layer ").concat(layerNumber, "\" class=\"layer_text\" data-id=\"").concat(this.id, "\">Test layer ").concat(layerNumber, "</span>\n                     </div>");
      this.html = document.createElement("div");
      this.html.innerHTML = html;
    };
    var Ui = function Ui(webgl, constructor) {
      var _this = this;

      _classCallCheck(this, Ui);

      this.addUiLayer = function (pseudolayer) {
        // the number of the uiLayer -> for naming
        var layerNumber = _this._uiLayersOrder.length + 1; // creates a new uiLayer

        var uiLayer = new UiLayer(pseudolayer, layerNumber); // adds the uiLayer to the layer tracker, where the uiLayer can directly be called via the id of the layer

        _this._uiLayers[uiLayer.id] = uiLayer; // update the uiLayersOrder -> adds to the end by default, therefore this layer is rendered last

        _this._uiLayersOrder.push(uiLayer.id); // adds the html from the uiLayer to update the map


        document.getElementById("layers_holder").appendChild(uiLayer.html); // determines which of the current uiLayers should be rendered

        _this._renderActiveUiLayer();
      };

      this.removeUiLayer = function (uiLayer) {
        // gets the id of the uiLayer to be removed
        var uiLayerDeleteId = uiLayer.dataset.id; // removes the uiLayer from the uiLayers object

        delete _this._uiLayers[uiLayerDeleteId]; // removes the uiLayer from uiLayersOrder array

        _this._uiLayersOrder = _this._uiLayersOrder.filter(function (item) {
          return item !== parseInt(uiLayerDeleteId);
        }); // updates the active uiLayer with the first element in the uiLayersOrder array if a uiLayer exists

        if (_this._uiLayersOrder.length > 0) {
          var newActiveUiLayerId = _this._uiLayersOrder[0];
          var newActiveUiLayer = _this._uiLayers[newActiveUiLayerId]; // sets the active layer

          _this.activeUiLayer = newActiveUiLayer; // update the css

          document.getElementById(newActiveUiLayerId).classList.add("selected");
        } else {
          _this.activeUiLayer = false;

          _this._webgl.clearCanvas();
        } // deletes the uiLayer from the DOM


        document.getElementById(uiLayerDeleteId).remove(); // determines which of the current uiLayers should be rendered

        _this._renderActiveUiLayer();
      };

      this.updateUiLayer = function (uiLayer, pseudolayer) {
        uiLayer.pseudolayer = pseudolayer; // determines which of the current uiLayers should be rendered

        _this._renderActiveUiLayer();
      };

      this.resetUiLayer = function () {
        // gets the DOM element id of the currently active gui
        var activeGuiId = _this.activeGui.id; // gets the method required to build that gui

        var buildGui = _this.guis[activeGuiId]; // sets the pseudolayer of the uiLayer to the original pseudolayer

        _this.activeUiLayer.pseudolayer = _this.activeUiLayer.originalPseudolayer; // resets the state object of the uiLayer

        _this.activeUiLayer.state = {}; // removes the current gui

        _this.removeGui(); // rebuilds the current gui, with reset values


        buildGui(); // determines which of the current layers should be rendered

        _this._renderActiveUiLayer();
      };

      this.activateUiLayer = function (clickedLayer) {
        // remove selected class from any element that is currently selected
        var selectedElements = document.getElementsByClassName("selected");

        for (var x = 0; x < selectedElements.length; x++) {
          selectedElements[x].classList.remove("selected");
        } // get id of the layer that was clicked


        var uiLayerId = clickedLayer.dataset.id;
        var uiLayerDiv = document.getElementById(uiLayerId);
        var uiLayer = _this._uiLayers[uiLayerId]; // set the layer as the active uiLayer

        _this.activeUiLayer = uiLayer; // applies the selected class for css

        uiLayerDiv.classList.add("selected"); // updates the uiLayer array, to move the active uiLayer to the front of the array

        _this._uiLayersOrder = _this._uiLayersOrder.filter(function (item) {
          return item !== parseInt(uiLayerId);
        });

        _this._uiLayersOrder.unshift(parseInt(uiLayerId)); // determines which of the current layers should be rendered (which should be this one)


        _this._renderActiveUiLayer();
      };

      this._renderActiveUiLayer = function () {
        // if there is currently a uiLayer
        if (_this.activeUiLayer) {
          // render the pseudolayer of the active uiLayer
          var pseudoLayerToRender = _this.activeUiLayer.pseudolayer;

          _this._webgl.activatePseudolayer(pseudoLayerToRender);
        } else if (_this._uiLayersOrder.length > 0) {
          // if it's the first layer to be added, render and set as active
          var uiLayerIdToActivate = _this._uiLayersOrder[0];
          var uiLayerToActivate = _this._uiLayers[uiLayerIdToActivate];
          var _pseudoLayerToRender = uiLayerToActivate.pseudolayer;
          document.getElementById(uiLayerIdToActivate).classList.add("selected");
          _this.activeUiLayer = uiLayerToActivate;

          _this._webgl.activatePseudolayer(_pseudoLayerToRender);
        } else {
          // otherwise stop rendering
          _this._webgl.activatePseudolayer();
        }
      };

      this._addGuiToDOM = function (string) {
        // creates an html element, appends the html then gets rid of the parent div
        var htmlElement = document.createElement("div");
        htmlElement.innerHTML = string;
        htmlElement = htmlElement.firstChild; // appends the div to the  correct place in the DOM

        var processingGui = document.getElementById("processing_gui");
        processingGui.style.visibility = "visible";
        var insertPoint = document.getElementById("processing_gui_actions");
        insertPoint.insertAdjacentElement('beforebegin', htmlElement);
        return htmlElement;
      };

      this.removeGui = function () {
        // remove the gui placeholder
        var processingGui = document.getElementById("processing_gui");
        processingGui.style.visibility = "hidden"; // remove the gui

        processingGui.removeChild(_this.activeGui); // event listeners *should* be garbage collected
      };

      this.restoreGuiState = function (uiLayer, thisGui) {
        var guiOrder = {};
        var targetPseudolayer = uiLayer.originalPseudolayer; // order the arguments so processing is applied in the correct order

        for (var _i = 0, _Object$keys = Object.keys(uiLayer.state); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          var processingPosition = uiLayer.state[key].guiOrder;

          if (key === thisGui) {
            guiOrder[processingPosition] = false;
          } else {
            guiOrder[processingPosition] = uiLayer.state[key];
          }
        }

        for (var x = 0; x < Object.keys(guiOrder).length; x++) {
          var inputArguments = guiOrder[x];

          if (inputArguments) {
            var functionName = inputArguments.stateFunction; // deep copy the state variables -> prevents issues with mutation when state is changed by the guis

            var inputArguments = JSON.parse(JSON.stringify(inputArguments));
            inputArguments[inputArguments["inputName"]] = targetPseudolayer;
            inputArguments["webgl"] = _this._webgl;
            targetPseudolayer = functionName(inputArguments);
          }
        }

        return targetPseudolayer;
      };

      this.rgbaManipulationGui = function () {
        var targetUiLayer = _this.activeUiLayer; // check if the ui layer has been changed by this gui before -> if so, restore these values to populate gui
        // also need to record the number of this gui, so that processing can be re-applied in order

        if ("rgbaManipulation" in targetUiLayer.state) {
          var rgbam_multiplier = targetUiLayer.state.rgbaManipulation.rgbam_multiplier;
        } else {
          var rgbam_multiplier = [1.0, 1.0, 1.0, 1.0];
          targetUiLayer.state["rgbaManipulation"] = {
            "rgbam_multiplier": rgbam_multiplier,
            "inputName": "rgbam_image",
            // the function to be called when rebuilding the layer
            "stateFunction": _this._constructor.rgbaManipulation,
            // the order in which processing should be re-applied when constructing the layer
            "guiOrder": Object.keys(targetUiLayer.state).length
          };
        } // we now need to re-construct the target pseudolayer from it's state, maintaining order


        var targetPseudolayer = _this.restoreGuiState(targetUiLayer, "rgbaManipulation"); // generate gui -> can be unstyled, as will resize to fit generic gui container, or can be styled in guis.css


        var html = "<div id=\"rgbaManipulation\" class=\"inner_gui\">\n                          <p class=\"gui_title\">Multiply RGBA</p>\n                          <p class=\"gui_text\">Red: <span id=\"red_value\">".concat(rgbam_multiplier[0], "</span></p>\n                          <input type=\"range\" min=\"0\" max=\"300\" value=\"").concat(rgbam_multiplier[0] * 100, "\" class=\"gui_slider\" id=\"red_slider\">\n                          <p class=\"gui_text\">Green: <span id=\"green_value\">").concat(rgbam_multiplier[1], "</span></p>\n                          <input type=\"range\" min=\"0\" max=\"300\" value=\"").concat(rgbam_multiplier[1] * 100, "\" class=\"gui_slider\" id=\"green_slider\">\n                          <p class=\"gui_text\">Blue: <span id=\"blue_value\">").concat(rgbam_multiplier[2], "</span></p>\n                          <input type=\"range\" min=\"0\" max=\"300\" value=\"").concat(rgbam_multiplier[2] * 100, "\" class=\"gui_slider\" id=\"blue_slider\">\n                      </div>");

        var gui = _this._addGuiToDOM(html);

        _this.activeGui = gui; // add event handlers -> these should be garbage collected when the gui is removed

        function addSliderEvent(sliderId, valueId, index, targetUiLayer, targetPseudolayer, ui) {
          document.getElementById(sliderId).oninput = function () {
            var state = targetUiLayer.state.rgbaManipulation;
            var thisSlider = document.getElementById(sliderId);
            state.rgbam_multiplier[index] = thisSlider.value / 100;
            document.getElementById(valueId).innerHTML = thisSlider.value / 100;

            var pseudolayer = ui._constructor.rgbaManipulation({
              webgl: ui._webgl,
              rgbam_image: targetPseudolayer,
              rgbam_multiplier: state.rgbam_multiplier
            });

            ui.updateUiLayer(targetUiLayer, pseudolayer);
          };
        }

        addSliderEvent("red_slider", "red_value", 0, targetUiLayer, targetPseudolayer, _this);
        addSliderEvent("green_slider", "green_value", 1, targetUiLayer, targetPseudolayer, _this);
        addSliderEvent("blue_slider", "blue_value", 2, targetUiLayer, targetPseudolayer, _this);
      };

      this.rgbFilteringGui = function () {
        var targetUiLayer = _this.activeUiLayer;

        if ("rgbFiltering" in targetUiLayer.state) {
          var rgbf_filter = targetUiLayer.state.rgbFiltering.rgbf_filter;
          var rgbf_removed = targetUiLayer.state.rgbFiltering.rgbf_removed;
          var rgbfd1_remove = targetUiLayer.state.rgbFiltering.rgbfd1_remove;
        } else {
          var rgbf_filter = [1.0, 1.0, 1.0];
          var rgbf_removed = [0.0, 0.0, 0.0, 1.0];
          var rgbfd1_remove = ">";
          targetUiLayer.state["rgbFiltering"] = {
            "rgbf_filter": rgbf_filter,
            "rgbf_removed": rgbf_removed,
            "rgbfd1_remove": rgbfd1_remove,
            "inputName": "rgbf_image",
            "stateFunction": _this._constructor.rgbFiltering,
            "guiOrder": Object.keys(targetUiLayer.state).length
          };
        }

        var targetPseudolayer = _this.restoreGuiState(targetUiLayer, "rgbFiltering");

        var html = "<div id=\"rgbFiltering\" class=\"inner_gui\">\n                          <p class=\"gui_title\">Filter RGB</p>\n                          <p class=\"gui_text\">Value to filter:</p>\n                          <p class=\"gui_text\">Red: <span id=\"red_value\">".concat(rgbf_filter[0] * 255, "</span></p>\n                          <input type=\"range\" min=\"0\" max=\"255\" value=\"").concat(rgbf_filter[0] * 255, "\" class=\"gui_slider\" id=\"red_slider\">\n                          <p class=\"gui_text\">Green: <span id=\"green_value\">").concat(rgbf_filter[1] * 255, "</span></p>\n                          <input type=\"range\" min=\"0\" max=\"255\" value=\"").concat(rgbf_filter[1] * 255, "\" class=\"gui_slider\" id=\"green_slider\">\n                          <p class=\"gui_text\">Blue: <span id=\"blue_value\">").concat(rgbf_filter[2] * 255, "</span></p>\n                          <input type=\"range\" min=\"0\" max=\"255\" value=\"").concat(rgbf_filter[2] * 255, "\" class=\"gui_slider\" id=\"blue_slider\">\n                          <p class=\"gui_text\">Operator:</p>\n                          <select name=\"operator\" id=\"operator\">\n                            <option value=\"&gt\" selected>&gt</option>\n                            <option value=\"&lt\">&lt</option>\n                          </select><br><br>\n                      </div>");

        var gui = _this._addGuiToDOM(html);

        _this.activeGui = gui;

        function addSliderEvent(sliderId, valueId, index, targetUiLayer, targetPseudolayer, ui) {
          document.getElementById(sliderId).oninput = function () {
            var state = targetUiLayer.state.rgbFiltering;
            var thisSlider = document.getElementById(sliderId);
            state.rgbf_filter[index] = thisSlider.value / 255;
            document.getElementById(valueId).innerHTML = thisSlider.value;

            var pseudolayer = ui._constructor.rgbFiltering({
              webgl: ui._webgl,
              rgbf_image: targetPseudolayer,
              rgbf_filter: state.rgbf_filter,
              rgbf_removed: state.rgbf_removed,
              rgbfd1_remove: state.rgbfd1_remove
            });

            ui.updateUiLayer(targetUiLayer, pseudolayer);
          };
        }

        addSliderEvent("red_slider", "red_value", 0, targetUiLayer, targetPseudolayer, _this);
        addSliderEvent("green_slider", "green_value", 1, targetUiLayer, targetPseudolayer, _this);
        addSliderEvent("blue_slider", "blue_value", 2, targetUiLayer, targetPseudolayer, _this); // event listener on operator to use

        document.getElementById("operator").onchange = function () {
          var state = targetUiLayer.state.rgbFiltering;
          var thisInput = document.getElementById("operator");
          state.rgbfd1_remove = thisInput.value;

          var pseudolayer = _this._constructor.rgbFiltering({
            webgl: _this._webgl,
            rgbf_image: targetPseudolayer,
            rgbf_filter: state.rgbf_filter,
            rgbf_removed: state.rgbf_removed,
            rgbfd1_remove: state.rgbfd1_remove
          });

          _this.updateUiLayer(targetUiLayer, pseudolayer);
        };
      };

      this.rgbPercentageFilteringGui = function () {
        var targetUiLayer = _this.activeUiLayer;

        if ("rgbPercentageFiltering" in targetUiLayer.state) {
          var rgbfp_filter = targetUiLayer.state.rgbPercentageFiltering.rgbfp_filter;
          var rgbfp_removed = targetUiLayer.state.rgbPercentageFiltering.rgbfp_removed;
          var rgbfpd1_remove = targetUiLayer.state.rgbPercentageFiltering.rgbfpd1_remove;
        } else {
          var rgbfp_filter = [1.0, 1.0, 1.0];
          var rgbfp_removed = [0.0, 0.0, 0.0, 1.0];
          var rgbfpd1_remove = ">";
          targetUiLayer.state["rgbPercentageFiltering"] = {
            "rgbfp_filter": rgbfp_filter,
            "rgbfp_removed": rgbfp_removed,
            "rgbfpd1_remove": rgbfpd1_remove,
            "inputName": "rgbfp_image",
            "stateFunction": _this._constructor.rgbPercentageFiltering,
            "guiOrder": Object.keys(targetUiLayer.state).length
          };
        }

        var targetPseudolayer = _this.restoreGuiState(targetUiLayer, "rgbPercentageFiltering");

        var html = "<div id=\"rgbPercentageFiltering\" class=\"inner_gui\">\n                          <p class=\"gui_title\">Filter RGB by %</p>\n                          <p class=\"gui_text\">Value to filter:</p>\n                          <p class=\"gui_text\">Red: <span id=\"red_value\">".concat(rgbfp_filter[0] * 100, "%</span></p>\n                          <input type=\"range\" min=\"0\" max=\"100\" value=\"").concat(rgbfp_filter[0] * 100, "\" class=\"gui_slider\" id=\"red_slider\">\n                          <p class=\"gui_text\">Green: <span id=\"green_value\">").concat(rgbfp_filter[1] * 100, "%</span></p>\n                          <input type=\"range\" min=\"0\" max=\"100\" value=\"").concat(rgbfp_filter[1] * 100, "\" class=\"gui_slider\" id=\"green_slider\">\n                          <p class=\"gui_text\">Blue: <span id=\"blue_value\">").concat(rgbfp_filter[2] * 100, "%</span></p>\n                          <input type=\"range\" min=\"0\" max=\"100\" value=\"").concat(rgbfp_filter[2] * 100, "\" class=\"gui_slider\" id=\"blue_slider\">\n                          <p class=\"gui_text\">Operator:</p>\n                          <select name=\"operator\" id=\"operator\">\n                            <option value=\"&gt\" selected>&gt</option>\n                            <option value=\"&lt\">&lt</option>\n                          </select><br><br>\n                      </div>");

        var gui = _this._addGuiToDOM(html);

        _this.activeGui = gui;

        function addSliderEvent(sliderId, valueId, index, targetUiLayer, targetPseudolayer, ui) {
          document.getElementById(sliderId).oninput = function () {
            var state = targetUiLayer.state.rgbPercentageFiltering;
            var thisSlider = document.getElementById(sliderId);
            state.rgbfp_filter[index] = thisSlider.value / 100;
            document.getElementById(valueId).innerHTML = thisSlider.value + "%";

            var pseudolayer = ui._constructor.rgbPercentageFiltering({
              webgl: ui._webgl,
              rgbfp_image: targetPseudolayer,
              rgbfp_filter: state.rgbfp_filter,
              rgbfp_removed: state.rgbfp_removed,
              rgbfpd1_remove: state.rgbfpd1_remove
            });

            ui.updateUiLayer(targetUiLayer, pseudolayer);
          };
        }

        addSliderEvent("red_slider", "red_value", 0, targetUiLayer, targetPseudolayer, _this);
        addSliderEvent("green_slider", "green_value", 1, targetUiLayer, targetPseudolayer, _this);
        addSliderEvent("blue_slider", "blue_value", 2, targetUiLayer, targetPseudolayer, _this); // event listener on operator to use

        document.getElementById("operator").onchange = function () {
          var state = targetUiLayer.state.rgbPercentageFiltering;
          var thisInput = document.getElementById("operator");
          state.operator = thisInput.value;

          var pseudolayer = _this._constructor.rgbPercentageFiltering({
            webgl: _this._webgl,
            rgbfp_image: targetPseudolayer,
            rgbfp_filter: state.rgbfp_filter,
            rgbfp_removed: state.rgbfp_removed,
            rgbfpd1_remove: state.rgbfpd1_remove
          });

          _this.updateUiLayer(targetUiLayer, pseudolayer);
        };
      };

      this.apply3x3KernelGui = function () {
        var targetUiLayer = _this.activeUiLayer;

        if ("apply3x3Kernel" in targetUiLayer.state) {
          var a3k_kernel = targetUiLayer.state.apply3x3Kernel.a3k_kernel;
          var a3k_kernelWeight = targetUiLayer.state.apply3x3Kernel.multiplier;
        } else {
          var a3k_kernel = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
          var a3k_kernelWeight = 1.0;
          targetUiLayer.state["apply3x3Kernel"] = {
            "a3k_kernel": a3k_kernel,
            "a3k_kernelWeight": a3k_kernelWeight,
            "inputName": "a3k_image",
            "stateFunction": _this._constructor.apply3x3Kernel,
            "guiOrder": Object.keys(targetUiLayer.state).length
          };
        }

        var targetPseudolayer = _this.restoreGuiState(targetUiLayer, "apply3x3Kernel");

        var html = "<div id=\"apply3x3Kernel\" class=\"inner_gui\">\n                        <p class=\"gui_title\">Apply 3x3 kernel</p>\n                        <table id=\"kernel_table\">\n                            <tr>\n                                <td><div class=\"kernel_input\" data-index=\"0\" contenteditable>".concat(a3k_kernel[0], "</div></td>\n                                <td><div class=\"kernel_input\" data-index=\"1\" contenteditable>").concat(a3k_kernel[1], "</div></td>\n                                <td><div class=\"kernel_input\" data-index=\"2\" contenteditable>").concat(a3k_kernel[2], "</div></td>\n                            </tr>\n                            <tr>\n                                <td><div class=\"kernel_input\" data-index=\"3\" contenteditable>").concat(a3k_kernel[3], "</div></td>\n                                <td><div class=\"kernel_input\" data-index=\"4\" contenteditable>").concat(a3k_kernel[4], "</div></td>\n                                <td><div class=\"kernel_input\" data-index=\"5\" contenteditable>").concat(a3k_kernel[5], "</div></td>\n                            </tr>\n                            <tr>\n                                <td><div class=\"kernel_input\" data-index=\"6\" contenteditable>").concat(a3k_kernel[6], "</div></td>\n                                <td><div class=\"kernel_input\" data-index=\"7\" contenteditable>").concat(a3k_kernel[7], "</div></td>\n                                <td><div class=\"kernel_input\" data-index=\"8\" contenteditable>").concat(a3k_kernel[8], "</div></td>\n                            </tr>\n                        </table>\n                        <p class=\"gui_text\">Multiplier</p>\n                        <input id=\"kernel_multiplier\" type=\"number\" min=\"1\" max=\"16\" value=\"").concat(a3k_kernelWeight, "\">\n                        <br><br>\n                        <input id=\"apply_kernel\" type=\"button\" value=\"Apply\">\n                        <br><br>\n                    </div>");

        var gui = _this._addGuiToDOM(html);

        _this.activeGui = gui;

        document.getElementById("apply_kernel").onclick = function () {
          var state = targetUiLayer.state.apply3x3Kernel;
          var kernelInputs = document.getElementsByClassName("kernel_input");

          for (var x = 0; x < kernelInputs.length; x++) {
            var kernelInput = kernelInputs[x];
            var kernelInputIndex = parseInt(kernelInput.dataset.index);
            state.a3k_kernel[kernelInputIndex] = parseInt(kernelInput.innerHTML);
          }

          state.a3k_kernelWeight = parseInt(document.getElementById("kernel_multiplier").value);

          var pseudolayer = _this._constructor.apply3x3Kernel({
            webgl: _this._webgl,
            a3k_image: targetPseudolayer,
            a3k_kernel: state.a3k_kernel,
            a3k_kernelWeight: state.a3k_kernelWeight
          });

          _this.updateUiLayer(targetUiLayer, pseudolayer);
        };
      };

      this.sobelEdgeDetection = function () {
        var targetUiLayer = _this.activeUiLayer;

        var targetPseudolayer = _this.restoreGuiState(targetUiLayer, "apply_sobel");

        var html = "<div id=\"sobelEdgeDetection\" class=\"inner_gui\">\n                          <p class=\"gui_title\">Apply sobel edge detection</p>\n                          <input id=\"apply_sobel\" type=\"button\" value=\"Apply\">\n                          <br><br>\n                      </div>";

        var gui = _this._addGuiToDOM(html);

        _this.activeGui = gui;

        document.getElementById("apply_sobel").onclick = function () {
          var state = targetUiLayer.state.sobelEdgeDetection;

          var pseudolayer = _this._constructor.sobelEdgeDetection({
            webgl: _this._webgl,
            sed_image: targetPseudolayer
          });

          _this.updateUiLayer(targetUiLayer, pseudolayer);
        };
      };

      // the WebGLCanvas object
      this._webgl = webgl; // constructors for the shader programs

      this._constructor = constructor; // object where keys are the id of the uiLayer, and the property is the uiLayer

      this._uiLayers = {}; // ordered array -> first element in this array is the pseudolayer that is rendered

      this._uiLayersOrder = []; // which layer is currently selected on the ui, and therefore is the target of any processing

      this.activeUiLayer = false; // which, if any, gui is currently rendered on the screen

      this.activeGui = false; // the previous gui that was rendered -> prevents the updated base pseudolayer from being used
      // if the same gui is used consecutively

      this._lastGui = false; // an object containing the methods that need to be called when a gui is to be opened

      this.guis = {
        "rgbaManipulation": this.rgbaManipulationGui,
        "rgbFiltering": this.rgbFilteringGui,
        "rgbPercentageFiltering": this.rgbPercentageFilteringGui,
        "apply3x3Kernel": this.apply3x3KernelGui,
        "sobelEdgeDetection": this.sobelEdgeDetection
      };
    } // add a pseudolayer to the ui, generating a new uiLayer. this uiLayer is added to the end 
    // of the existing uiLayers
    ;

    var rgbaManipulationShader = "#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 o_texCoord;\r\n\r\nuniform vec4 rgbam_multiplier;\r\nuniform sampler2D rgbam_image;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n   o_colour = texture(rgbam_image, o_texCoord) * rgbam_multiplier;\r\n}";

    var rgbFilteringShader = "#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 o_texCoord;\r\n\r\nuniform float rgbf_filter[3];\r\nuniform vec4 rgbf_removed;\r\nuniform sampler2D rgbf_image;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n    vec4 raw_colour = texture(rgbf_image, o_texCoord);\r\n    float remove = 0.0;\r\n\r\n    if(raw_colour.r {rgbfd1_remove} rgbf_filter[0]){\r\n        remove = 1.0;\r\n    }\r\n\r\n    if(raw_colour.g {rgbfd1_remove} rgbf_filter[1]){\r\n        remove = 1.0;\r\n    }\r\n\r\n    if(raw_colour.b {rgbfd1_remove} rgbf_filter[2]){\r\n        remove = 1.0;\r\n    }\r\n\r\n    vec4 final_colour;\r\n    if(remove == 1.0){\r\n        final_colour = rgbf_removed;\r\n    } else {\r\n        final_colour = raw_colour;\r\n    }\r\n\r\n    o_colour = final_colour;\r\n}";

    var rgbPercentageFilteringShader = "#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 o_texCoord;\r\n\r\nuniform float rgbfp_filter[3];\r\nuniform vec4 rgbfp_removed;\r\nuniform sampler2D rgbfp_image;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n    vec4 raw_colour = texture(rgbfp_image, o_texCoord);\r\n    float sum_colours = raw_colour.r + raw_colour.g + raw_colour.b;\r\n    float remove = 0.0;\r\n\r\n    if(raw_colour.r / sum_colours {rgbfpd1_remove} rgbfp_filter[0]){\r\n        remove = 1.0;\r\n    }\r\n\r\n    if(raw_colour.g / sum_colours {rgbfpd1_remove} rgbfp_filter[1]){\r\n        remove = 1.0;\r\n    }\r\n\r\n    if(raw_colour.b / sum_colours {rgbfpd1_remove} rgbfp_filter[2]){\r\n        remove = 1.0;\r\n    }\r\n\r\n    vec4 final_colour;\r\n    if(remove == 1.0){\r\n        final_colour = rgbfp_removed;\r\n    } else {\r\n        final_colour = raw_colour;\r\n    }\r\n\r\n    o_colour = final_colour;\r\n}";

    var stackLayers = "#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 o_texCoord;\r\n\r\nuniform sampler2D sl1_image;\r\nuniform sampler2D sl2_image;\r\nuniform float sl1_weight;\r\nuniform float sl2_weight;\r\nuniform float sl_multiplier;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n    vec4 sl1_texture = texture(sl1_image, o_texCoord) * sl1_weight;\r\n    vec4 sl2_texture = texture(sl2_image, o_texCoord) * sl2_weight;\r\n    vec4 sum_texture = sl1_texture + sl2_texture;\r\n    o_colour = vec4((sum_texture / sl_multiplier).rgb, 1);\r\n}";

    var apply3x3KernelShader = "#version 300 es\r\nprecision mediump float;\r\n\r\nuniform sampler2D a3k_image;\r\nuniform float a3k_textureWidth;\r\nuniform float a3k_textureHeight;\r\nuniform float a3k_kernel[9];\r\nuniform float a3k_kernelWeight;\r\n\r\nin vec2 o_texCoord;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n   vec2 onePixel = vec2(1.0 / a3k_textureWidth, 1.0 / a3k_textureHeight);\r\n   vec4 colorSum =\r\n       texture(a3k_image, o_texCoord + onePixel * vec2(-1, -1)) * a3k_kernel[0] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2( 0, -1)) * a3k_kernel[1] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2( 1, -1)) * a3k_kernel[2] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2(-1,  0)) * a3k_kernel[3] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2( 0,  0)) * a3k_kernel[4] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2( 1,  0)) * a3k_kernel[5] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2(-1,  1)) * a3k_kernel[6] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2( 0,  1)) * a3k_kernel[7] +\r\n       texture(a3k_image, o_texCoord + onePixel * vec2( 1,  1)) * a3k_kernel[8] ;\r\n   o_colour = vec4((colorSum / a3k_kernelWeight).rgb, 1);\r\n}";

    var sobelEdgeDetection = "#version 300 es\r\nprecision mediump float;\r\n\r\nuniform sampler2D sed_image;\r\nuniform float sed_textureWidth;\r\nuniform float sed_textureHeight;\r\n\r\nin vec2 o_texCoord;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n    vec2 onePixel = vec2(1.0 / sed_textureWidth, 1.0 / sed_textureHeight);\r\n\r\n    float tl = texture(sed_image, o_texCoord + onePixel * vec2(-1, -1)).r;\r\n    float tm = texture(sed_image, o_texCoord + onePixel * vec2( 0, -1)).r;\r\n    float tr = texture(sed_image, o_texCoord + onePixel * vec2( 1, -1)).r;\r\n    float ml = texture(sed_image, o_texCoord + onePixel * vec2(-1,  0)).r;\r\n    float mm = texture(sed_image, o_texCoord + onePixel * vec2( 0,  0)).r;\r\n    float mr =texture (sed_image, o_texCoord + onePixel * vec2( 1,  0)).r;\r\n    float bl = texture(sed_image, o_texCoord + onePixel * vec2(-1,  1)).r;\r\n    float bm = texture(sed_image, o_texCoord + onePixel * vec2( 0,  1)).r;\r\n    float br = texture(sed_image, o_texCoord + onePixel * vec2( 1,  1)).r;\r\n\r\n    float[9] x_kernel = float[9](1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0);\r\n\r\n    float dx =\r\n        tl * x_kernel[0] + \r\n        tm * x_kernel[1] + \r\n        tr * x_kernel[2] + \r\n        ml * x_kernel[3] + \r\n        mm * x_kernel[4] + \r\n        mr * x_kernel[5] + \r\n        bl * x_kernel[6] + \r\n        bm * x_kernel[7] + \r\n        br * x_kernel[8] ;\r\n\r\n    float[9] y_kernel = float[9](-1.0, -2.0, -1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0);\r\n\r\n    float dy =\r\n        tl * y_kernel[0] + \r\n        tm * y_kernel[1] + \r\n        tr * y_kernel[2] + \r\n        ml * y_kernel[3] + \r\n        mm * y_kernel[4] + \r\n        mr * y_kernel[5] + \r\n        bl * y_kernel[6] + \r\n        bm * y_kernel[7] + \r\n        br * y_kernel[8] ;\r\n\r\n    float mag = length(vec2(dx, dy));\r\n    o_colour = vec4(vec3(mag), 1.0);\r\n}";

    var greyscale = "#version 300 es\r\nprecision mediump float;\r\n\r\nuniform sampler2D gs_image;\r\n\r\nin vec2 o_texCoord;\r\n\r\nout vec4 o_colour;\r\n\r\nvoid main() {\r\n    vec4 color = texture(gs_image, o_texCoord);\r\n    float grey = dot(color.rgb, vec3(0.299, 0.587, 0.114));\r\n    o_colour = vec4(grey, grey, grey, color.a);\r\n}";

    var Constructor = function Constructor() {
      _classCallCheck(this, Constructor);

      this.rgbaManipulation = function () {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref.webgl,
            rgbam_image = _ref.rgbam_image,
            rgbam_multiplier = _ref.rgbam_multiplier;

        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "rgbaManipulation",
          inputs: {
            rgbam_image: rgbam_image
          },
          shader: rgbaManipulationShader,
          variables: {
            rgbam_multiplier: rgbam_multiplier
          },
          dynamics: {}
        });
        return pseudolayer;
      };

      this.apply3x3Kernel = function () {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref2.webgl,
            a3k_image = _ref2.a3k_image,
            a3k_kernel = _ref2.a3k_kernel,
            a3k_kernelWeight = _ref2.a3k_kernelWeight;

        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "apply3x3Kernel",
          inputs: {
            a3k_image: a3k_image
          },
          shader: apply3x3KernelShader,
          variables: {
            a3k_textureWidth: webgl.gl.canvas.width,
            a3k_textureHeight: webgl.gl.canvas.height,
            a3k_kernel: a3k_kernel,
            a3k_kernelWeight: a3k_kernelWeight
          },
          dynamics: {}
        });
        return pseudolayer;
      };

      this.averageLayers = function () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref3.webgl,
            al1_image = _ref3.al1_image,
            al2_image = _ref3.al2_image;

        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "averageLayers",
          inputs: {
            al1_image: al1_image,
            al2_image: al2_image
          },
          shader: averageLayersShader,
          variables: {},
          dynamics: {}
        });
        return pseudolayer;
      };

      this.rgbFiltering = function () {
        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref4.webgl,
            rgbf_image = _ref4.rgbf_image,
            rgbf_filter = _ref4.rgbf_filter,
            rgbf_removed = _ref4.rgbf_removed,
            rgbfd1_remove = _ref4.rgbfd1_remove;

        // todo handling for dynamics
        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "rgbFiltering",
          inputs: {
            rgbf_image: rgbf_image
          },
          shader: rgbFilteringShader,
          variables: {
            rgbf_filter: rgbf_filter,
            rgbf_removed: rgbf_removed
          },
          dynamics: {
            rgbfd1_remove: rgbfd1_remove
          }
        });
        return pseudolayer;
      };

      this.rgbPercentageFiltering = function () {
        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref5.webgl,
            rgbfp_image = _ref5.rgbfp_image,
            rgbfp_filter = _ref5.rgbfp_filter,
            rgbfp_removed = _ref5.rgbfp_removed,
            rgbfpd1_remove = _ref5.rgbfpd1_remove;

        // todo handling for dynamics
        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "rgbPercentageFiltering",
          inputs: {
            rgbfp_image: rgbfp_image
          },
          shader: rgbPercentageFilteringShader,
          variables: {
            rgbfp_filter: rgbfp_filter,
            rgbfp_removed: rgbfp_removed
          },
          dynamics: {
            rgbfpd1_remove: rgbfpd1_remove
          }
        });
        return pseudolayer;
      };

      this.stackLayers = function () {
        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref6.webgl,
            sl1_image = _ref6.sl1_image,
            sl2_image = _ref6.sl2_image,
            sl1_weight = _ref6.sl1_weight,
            sl2_weight = _ref6.sl2_weight,
            sl_multiplier = _ref6.sl_multiplier;

        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "stackLayers",
          inputs: {
            sl1_image: sl1_image,
            sl2_image: sl2_image
          },
          shader: stackLayers,
          variables: {
            sl1_weight: sl1_weight,
            sl2_weight: sl2_weight,
            sl_multiplier: sl_multiplier
          },
          dynamics: {}
        });
        return pseudolayer;
      };

      this.sobelEdgeDetection = function () {
        var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref7.webgl,
            sed_image = _ref7.sed_image;

        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "sobelEdgeDetection",
          inputs: {
            sed_image: sed_image
          },
          shader: sobelEdgeDetection,
          variables: {
            sed_textureWidth: webgl.gl.canvas.width,
            sed_textureHeight: webgl.gl.canvas.height
          },
          dynamics: {}
        });
        return pseudolayer;
      };

      this.greyscale = function () {
        var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            webgl = _ref8.webgl,
            gs_image = _ref8.gs_image;

        var pseudolayer = webgl.processPseudoLayer({
          shaderName: "greyscale",
          inputs: {
            sed_image: gs_image
          },
          shader: greyscale,
          variables: {},
          dynamics: {}
        });
        return pseudolayer;
      };
    };

    var testMapView = new View({
      center: [-19529.660727, 6643944.717062],
      zoom: 7
    });
    var testWMS = new XYZ({
      url: "https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png",
      params: {
        'TILED': true,
        'FORMAT': 'image/png',
        attributions: 'Sources: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'
      },
      attribution: "test",
      crossOrigin: "anonymous"
    }); // const testWMS = new TileWMS({
    //     url: "https://services.sentinel-hub.com/ogc/wms/e25b0e1d-5cf3-4abe-9091-e9054ef6640a",
    //     params: {
    //         'LAYERS': "FALSE_COLOR", 
    //         'TILED': true, 
    //         'FORMAT': 'image/png',
    //         'showLogo': false,
    //         'CRS': "EPSG:3857",
    //         'TIME': "2018-03-29/2018-05-29",
    //     },
    //     attribution: "test",
    //     crossOrigin: "anonymous",
    // });

    var testMapLayer1 = new TileLayer({
      source: testWMS,
      visible: true,
      title: "Sentinel testing",
      opacity: 1,
      minZoom: 1
    });
    var webgl = new WebGLCanvas("canvas_map");
    var con = new Constructor();
    var ui = new Ui(webgl, con);
    var l1 = new LayerObject(testMapLayer1, testMapView);
    var p1 = webgl.generatePseudoLayer(l1);
    var pp1 = con.rgbaManipulation({
      webgl: webgl,
      rgbam_image: p1,
      rgbam_multiplier: [1.5, 1.5, 1.5, 1.0]
    });
    var pp2 = con.rgbPercentageFiltering({
      webgl: webgl,
      rgbfp_image: pp1,
      rgbfp_filter: [0.38, 0.35, 0.35],
      rgbfp_removed: [0.0, 0.0, 0.0, 1.0],
      rgbfpd1_remove: ">"
    });
    var pp3 = con.sobelEdgeDetection({
      webgl: webgl,
      sed_image: p1
    });
    var pp4 = con.greyscale({
      webgl: webgl,
      gs_image: pp2
    });
    var pp5 = con.sobelEdgeDetection({
      webgl: webgl,
      sed_image: pp4
    }); // webgl.activatePseudolayer(pp1, 5);
    // const pp3 = con.rgbaManipulation({
    //     webgl: webgl, 
    //     rgbam_image: p1, 
    //     rgbam_multiplier: [1.5, 1.5, 1.5, 1.5],
    // });
    // const pp2 = con.stackLayers({
    //     webgl: webgl,
    //     sl1_image: p1,
    //     sl2_image: pp1,
    //     sl1_weight: 1.5,
    //     sl2_weight: 1.0,
    //     sl_multiplier: 2.0,
    // })
    // for (let x = 0; x < 1000; x++) {
    //     const r = Math.random() * 2.5;
    //     webgl.renderPseudoLayer(pp1, 5);
    // }
    // function test() {
    //     setTimeout(() => {
    //         console.log("run")
    //         const r = Math.random() * 2.5;
    //         const pp1 = con.rgbaManipulation({
    //             webgl: webgl, 
    //             rgbam_image: p1, 
    //             rgbam_multiplier: [r, 1.0, 1.0, 1.0],
    //         });
    //         webgl.activatePseudolayer(pp1, 5);
    //         test();   
    //     }, 1000)
    // }
    // test();

    ui.addUiLayer(p1); // ui.addUiLayer(pp1);
    // ui.addUiLayer(pp3);
    // const pp1 = con.rgbaManipulation(webgl, p1, [2.5, 2.5, 2.5, 1.0]);
    // const pp2 = con.apply3x3Kernel(webgl, pp1, [-1, -1, -1, -1, 16, -1, -1, -1, -1], 8);
    // const pp3 = con.rgbPercentageFiltering(webgl, p1, [1.0, 1.0, 1.0], [0.0, 0.0, 0.0, 1.0], ">");
    // const pp4 = con.apply3x3Kernel(webgl, pp3, [-1, -1, -1, -1,  8, -1, -1, -1, -1], 1);
    // UI EVENTS
    // select layer

    document.addEventListener('click', function (e) {
      var layerDiv = e.target;

      if (layerDiv && layerDiv.classList.contains('layer') || layerDiv.classList.contains('layer_text')) {
        ui.activateUiLayer(layerDiv);
      }
    }); // remove layer

    document.addEventListener('click', function (e) {
      var deleteButton = e.target;

      if (deleteButton && deleteButton.classList.contains("delete_layer")) {
        ui.removeUiLayer(deleteButton);
      }
    }); // close processing gui -> hide gui container and remove gui

    document.addEventListener('click', function (e) {
      var closeButton = e.target;

      if (closeButton && closeButton.id === "close_processing_gui") {
        ui.removeGui();
      }
    }); // open processing gui when dropdown selected

    document.addEventListener('click', function (e) {
      var menuOption = e.target;

      if (menuOption && menuOption.classList.contains("dropdown_menu_option")) {
        var buildGui = ui.guis[menuOption.dataset.id];
        buildGui();
      }
    }); // generate a new ui layer from selected layer

    document.addEventListener('click', function (e) {
      var newLayer = e.target;

      if (newLayer && newLayer.id === "new_layer") {
        var pseudolayer = ui.activeUiLayer.pseudolayer; // generate a new pseudolayer before adding a new layer, just in case the old pseudolayer is the same
        // as the new pseudolayer

        var pseudolayer = webgl.generatePseudoLayer(pseudolayer);
        ui.addUiLayer(pseudolayer);
      }
    }); // reset a ui layer

    document.addEventListener('click', function (e) {
      var resetLayer = e.target;

      if (resetLayer && resetLayer.id === "reset_layer") {
        ui.resetUiLayer();
      }
    });

})));
